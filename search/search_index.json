{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":""},{"location":"#the-destination-linux-guide-to-ubuntu-for-engineers","title":"The Destination Linux Guide to Ubuntu for Engineers","text":"<p>How to use Ubuntu for Network Engineering</p> <p></p> <p>Destination Linux is a weekly show where Ryan, Jill, &amp; Michael share their passion for Linux &amp; Open Source. Destination Linux is a show for all experience levels, whether you\u2019re a beginner to Open Source or a Guru of Sudo, this is the podcast for you. Destination Linux covers a wide range of topics from the latest news, discussions on Linux &amp; Open Source, gaming on Linux, unique in-depth interviews and much more!</p> <p>Visit The Destination Linux Podcast homepage.</p> <p>Listen to the review of the Guide on Destination Linux Episode 429 - It's in the <code>Community Tip and Trick</code> chapter or at 1:03:49 if your podcast player doesn't show chapters.</p>"},{"location":"CH02-Install-Tools/","title":"Gnome Desktop Tools","text":"<p> KEY TAKEAWAYS</p> <ul> <li>Ubuntu is built off of Debian Linux, so tools that are compatible with Debian will probably work on Ubuntu.</li> <li>Ubuntu comes with the The App Center built in. Thousands of applications are available. To open - Tap <code>Superkey</code>, type <code>App</code>, press <code>Enter</code>.</li> <li>Ubuntu supports the Gnome Project's Flat Pack applications.</li> <li>Ubuntu supports App Images. Linux apps that run anywhere!</li> <li>If you are coming from MacOS, you can use Homebrew to install packages.</li> <li>Thousands of networking tools are available on github</li> <li>The Packet Pushers network maintains a list of Open Source Networking Projects. Most work on Ubuntu.</li> </ul>"},{"location":"CH02-Install-Tools/#introduction","title":"Introduction","text":"<p>About GNOME on Ubuntu</p> <p>Ubuntu Desktop comes installed with a slightly modified version of the GNOME Desktop Environment. Here is a list of the notable differences between GNOME on Ubuntu and \"Vanilla\" GNOME.</p> <ul> <li>Ubuntu comes with Firefox instead of the GNOME Web browser.</li> <li>Ubuntu comes with the Remmina remote desktop client instead of GNOME Connections.</li> <li>The AppIndicators extension is included. This extension will enable icons in the top right corner of some applications.</li> <li>The Ubuntu Dock extension is included. This extension provides the left sidebar for running applications.</li> <li>The Desktop Icons NG extension is included. This extension enables the use of icons on the desktop.</li> <li>In addition to Ubuntu desktop wallpapers, the default theme is Yaru and the default font is Ubuntu.</li> <li>Minimize and maximize buttons are included on window title bars.</li> </ul> <p>Gnome News</p> <p>The Gnome project maintains a site called This Week in Gnome where they post links to short articles on what changed in the current week. I don't remember to look at it every week, but it's worth going to once in a while to see what has changed.</p>"},{"location":"CH02-Install-Tools/#getting-help","title":"Getting Help","text":"<p>You can tap the superkey and type <code>help</code> to open Ubuntu's Desktop Guide. If you are new to Ubuntu, I highly recommend that you review it.</p> <p></p>"},{"location":"CH02-Install-Tools/#terminal-based-package-managers","title":"Terminal based Package managers","text":"<p>On linux, Applications are commonly referred to as packages. For years Linux distributions have used a <code>Package Manager</code> to install applications. The problem with package managers is that Debian/Ubuntu used a different package manager than Redhat/Centos, which used a different package manager than Arch, which used a different package manager than SUSE. And on and on. This meant any developer who wanted to create Linux applications had to create packages for every manager. That was not popular with developers and held Desktop Linux adoption back.</p> <p>This chapter will be about Graphical tools but I need to explain two terminal package managers first because they are needed to update the system after the installation of Ubuntu finishes.</p>"},{"location":"CH02-Install-Tools/#advanced-package-tool-the-ubuntu-package-manager","title":"Advanced Package Tool - The Ubuntu package manager","text":"<p>The Advanced Package Tool (apt) is the default terminal based package manager for Debian based Linux distributions like Ubuntu.</p>"},{"location":"CH02-Install-Tools/#the-nala-package-manager","title":"The Nala Package manager","text":"<p>Description from the nala webpage: Nala is a front-end for libapt-pkg, the library that uses the python-apt api. Especially for newer users it can be hard to understand what apt is trying to do when installing or upgrading. We aim to solve this by not showing some redundant messages, formatting the packages better, and using color to show specifically what will happen with a package during install, removal, or an upgrade.</p>"},{"location":"CH02-Install-Tools/#benefits-of-nala-over-apt","title":"Benefits of Nala over Apt","text":"<p>Nala offers a more user-friendly interface with features like parallel downloads, improved output formatting, and package transaction history, making it easier to manage software</p> <p>Parallel Downloads</p> <p>Outside of pretty formatting, the number 1 reason to use Nala over apt is parallel downloads. By default, Nala will download 3 packages per unique mirror in your sources.list file. Opening multiple connections to the same mirror is great for speeding up downloading many small packages. We have the 3 connections per mirror limit to minimize how hard we are hitting mirrors. Additionally, we alternate downloads between the available mirrors to improve download speeds even further. If a mirror fails for whatever reason, we just try the next until all defined mirrors are exhausted.</p> <p>Note: Nala does not use APT for package downloading and verification</p> <p>Fetch</p> <p><code>sudo nala fetch</code></p> <p>Which brings us to the next standout feature, nala fetch. Nala fetch will check if your distribution is either Debian or Ubuntu. Nala will then go get all the mirrors from the respective master list. Once done we test the latency and score each mirror. Nala will choose the fastest 3 mirrors (configurable) and write them to a file.</p> <p>Note</p> <p>At the moment fetch will only work on Debian, Ubuntu and derivatives still tied to the main repos.</p> <p>History</p> <p><code>nala history</code></p> <p>The last big feature is the nala history command.</p> <p>Nala stores each  <code>Install</code>, <code>Remove</code> or <code>Upgrade</code> in <code>/var/lib/nala/history.json</code> with a unique <code>&lt;ID&gt;</code> number. At any time you can call <code>nala history</code> to print a summary of every transaction ever made. You can then further manipulate this with commands such as <code>nala history undo &lt;ID&gt;</code> or <code>nala history redo &lt;ID&gt;</code>.</p> <p>If there is something in the history file that you don't want, you can use the <code>nala history clear &lt;ID&gt;</code> to remove that entry.</p> <p>Alternatively for the clear command we accept --all which will remove the entire history - <code>sudo nala history clear --all</code>.</p> <p>Installation</p> <pre><code>sudo apt update\nsudo apt install nala\n</code></pre> <p>References</p> <p>Nala on Github</p> <p>Nala apt Frontend for Linux - An article from PhoenixNAP on Nala.</p>"},{"location":"CH02-Install-Tools/#universal-linux-package-managers","title":"Universal Linux Package Managers","text":"<p>To work around this problem three universal packaging systems were created:</p> <ul> <li>Snaps</li> <li>Flatpaks</li> <li>AppImages</li> </ul> <p>It's the old \"Pick a standard, any standard\" joke. We now have a package installer format that works on all platforms, but there are three of them \ud83d\ude01. This article explains the who, and how of the three - Flatpak vs. Snap vs. AppImage.</p>"},{"location":"CH02-Install-Tools/#snaps-vs-flatpak-vs-appimage","title":"Snaps vs Flatpak vs Appimage","text":"<p>Snaps</p> <p>Canonical, the publisher of Ubuntu, developed the Snap infrastructure so it's built into Ubuntu. It runs on a proprietary backend hosted by Canonical. This has caused an uproar in the Linux community that values Open Source over everything. My opinion is that I use Ubuntu, snaps are native to Ubuntu and the Ubuntu security team does a good job in general so I use snaps when I find a useful application packaged as a snap.</p> <p>Flatpaks</p> <p>Gnome, KDE and FreeDesktop created the Flatpak organization in September 2015. This is before Ubuntu switched to the Gnome desktop in October 2017.</p> <p>Note</p> <p>It was announced in December 2024 that Flatpak will become a standalone organization! I hope that this will increase developer interest in Flatpak.</p> <p>Appimages</p> <p>AppImage is an open source community project not affiliated with Canonical or The Gnome project. The Appimage webpage describes them as <code>Linux apps that run anywhere</code> and Linus Torvalds, Linux Creator says <code>This is just very cool.</code> Oddly enough, in the Flatpak section below, I will show a flatpak called <code>Gear lever</code> that was developed to make managing appimages easy!</p> <p>Tip</p> <p>Appimages on Ubuntu after 23.04 require installing the FUSE 2 library using <code>sudo apt install libfuse2t64</code>. Please read this article:  Appimages on Ubuntu &gt;22.04</p> <p>When I wrote this in July 2025, the Appimage Hub had 1522 applications listed!</p>"},{"location":"CH02-Install-Tools/#flatpak","title":"Flatpak","text":"<p>The Gnome project created dedicated applications for managing the Gnome desktop. I like the ones listed below, especially for users coming to Ubuntu from Windows. Gnome Resources and Disk Analyzer are similar to the Windows applications for managing resources and disk usage. You can use terminal tools like <code>htop</code> and <code>du</code> for viewing resources and disk usage but when you first start using Ubuntu the GUI tools will be more comfortable.</p> <p>We will cover terminal tools later. In this section we will learn how to install graphical tools using <code>Flatpaks</code>.</p> <p>I am going to start with flatpak applications instead of the Ubuntu App Store because there are some Gnome project developed flatpak applications that are useful for managing the system.</p> <p>Visit the Flatpak store by clicking this link: Flathub. There are thousands of applications that you can browse and install. Most are free open source software (FOSS). Some will have a <code>Donate</code> button. If you install the application and find it useful, please go back and donate. Most of the developers don't get paid for their time.</p>"},{"location":"CH02-Install-Tools/#install-flatpak","title":"Install Flatpak","text":"<p>I am going to be using the Nala package manager in the instructions. If you haven't installed Nala yet, substitute <code>apt</code> for <code>nala</code>. Open a terminal (ctrl+alt+t) and run the following commands:</p> <pre><code>sudo nala update\nsudo nala install flatpak\nflatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo\n</code></pre> <p>Explanation</p> <ul> <li>sudo nala update - This uses the <code>Nala</code> package manager to update the repositories that your machine uses.</li> <li>sudo nala install flatpak - This uses the <code>Nala</code> package manager to actually install flatpak.</li> <li>flatpak remote-add - This uses the <code>Aptitude</code> package manager to add the remote flatpak repository. This allows the flatpaks to receive updates.</li> </ul> <p>Warning</p> <p>Unfortunately you do have to restart after running the commands. There is no \"Reboot Now\" message but flatpak will not be available until you reboot.</p> <p>Once your system restarts we are going to install a few flatpak applications for managing the system and making life better!.</p>"},{"location":"CH02-Install-Tools/#gnome-specific","title":"Gnome Specific","text":"<p>The Gnome project maintains a site that contains Flatpak applications designed specifically to enhance the functionality of the Gnome desktop. Apps featured in this curated overview are all built with the GNOME philosophy in mind.</p> <p>They are easy to understand, simple to use, feature a consistent and polished design and provide a noticeable attention to details. Naturally, they are free software and have committed to being part of a welcoming and friendly community. These apps will perfectly integrate with your GNOME Desktop.</p>"},{"location":"CH02-Install-Tools/#gnome-core-apps","title":"Gnome Core Apps","text":"<p>Several of the the 28 <code>Core Apps</code> are installed in Ubuntu by default and are worth looking at. Here are descriptions of five that I find useful in day to day work.</p> <p></p> <p>The <code>Characters</code> application contains smiley faces, symbols, math characters, etc. that you can insert into documents. To open, tap the <code>Super</code> key, type <code>characters</code> and press enter.</p> <p></p> <p>The <code>Fonts</code> application lists every font available on your system. For coding, I installed <code>Fira Code</code> and I can view the six different faces of <code>Fira Code</code> using the Fonts application. To open, tap the <code>Super</code> key, type <code>fonts</code> and press enter.</p> <p></p> <p>The <code>Clocks</code> application is useful if you work with teams in different time zones. You can add clocks from any time zone in the world. Also included are an Alarm, Stopwatch, amd Timer. It's very similar to the clocks app on Apple IOS. To open, tap the <code>Super</code> key, type <code>clocks</code> and press enter.</p> <p></p> <p>The <code>System Monitor</code> application is similar to the <code>Gnome Resources</code> application but not as comprehensive. It's worth looking at. Below is a screenshot of the System Monitor application. To open, tap the <code>Super</code> key, type <code>system monitor</code> and press enter.</p> <p></p> <p></p> <p>The <code>Logs</code> application allows you to quickly look at system logs. It's a super fast way to look for issues. If the log has a URL for support, it will be shown.</p> <p></p>"},{"location":"CH02-Install-Tools/#gnome-circle-apps","title":"Gnome Circle Apps","text":"<p>GNOME Circle champions the great software that is available for the GNOME platform. Not only do we showcase the best apps and libraries for GNOME, but we also support independent developers who are using GNOME technologies. GNOME Circle contains applications extending the GNOME ecosystem. It champions the great additional software that is available for the GNOME platform. Learn more about GNOME Circle.</p> <p>One Circle application that I think is mandatory is <code>Impression</code>, an application to write ISO images to a flash drive! Start <code>Impression</code>, pick the image, select the USB flash drive, click <code>write</code>.</p> <p>In the screenshot below, I picked the the Windows 11 image from my ~/Downloads directory and selected the Aruba flash drive to write it to. All that is left is to click on <code>Write</code> and a bootable flash drive will be created.</p> <p></p> <p>Installation Instructions</p> <pre><code>flatpak install flathub io.gitlab.adhami3310.Impression\n</code></pre>"},{"location":"CH02-Install-Tools/#gnome-extensions","title":"Gnome Extensions","text":"<p>The Gnome project maintains an Extensions Site where you can install \"Extensions\". These are small programs that add functionality to the Gnome Desktop. I try to keep the number of extensions to a minimum because of performance and stability issues. This article Top 21 GNOME Extensions to Enhance Your Experience lists the extensions that <code>itsfoss</code> recommends.</p> <p>In the past, you used Google Chrome or Mozilla Firefox to install Gnome extensions. This was a painful process I thought and you had to install a chrome or Mozilla Firefox <code>Connector</code> first.</p> <p>I prefer to use an flatpak named <code>Gnome Extensions</code> to install extensions. This is a flatpak written by the Gnome Project so I am comfortable using it. <code>Gnome Extensions</code> handles updating extensions, configuring extension preferences and removing or disabling unwanted extensions without using a browser. For some reason, Gnome Extensions does not have the ability to install extensions. We will install the similarly named <code>Extensions Manager</code> that has the ability to install extensions.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub org.gnome.Extensions\n</code></pre> <p>Once installed, run <code>Extensions</code> from the terminal using:</p> <pre><code>flatpak run org.gnome.Extensions\n</code></pre> <p>Or by tapping the Super key, typing <code>extension</code> and clicking on the Extensions icon.</p> <p>Below is a screenshot of the <code>Gnome Extensions</code> application running on my laptop:</p> <p></p>"},{"location":"CH02-Install-Tools/#installing-extensions","title":"Installing Extensions","text":"<p>You can install extensions several ways. This article from itsfoss goes into detail on the different methods. I prefer to use this tool, <code>Extension Manager</code> even though it's not written by the Gnome team. It's confusing because it looks just like the <code>Gnome Extensions</code> application except that it has the capability to install extensions. I like this method better than using the Chrome browser extension.</p> <p>Installation Instructions</p> <p>Like all flatpak applications you search flathub.org, click the <code>Install</code> button and copy the terminal command.</p> <pre><code>flatpak install flathub com.mattjakeman.ExtensionManager\n</code></pre> <p>Then tap the super key and enter <code>Extension</code>, click the icon:</p> <p></p> <p>Once <code>Extensions Manager</code> opens, click <code>Browse</code> at the top and you can search and install <code>Gnome Extensions</code>.</p> <p></p> <p>You may ask why I installed the Gnome tool when this tool does everything the Gnome tool does and more. That is a good question. Basically I use my laptop every day and consider it a tool. I don't enjoy troubleshooting issues with the tool. Since I'm using the Gnome desktop, and Gnome writes a tool to update extensions I use it for updating. Why the official Gnome tool can't do installation is beyond me.</p> <p>Below are the extensions that I have installed:</p> <ul> <li>Clipboard Indicator - The most popular, reliable and feature-rich clipboard manager for GNOME with over 1M downloads</li> <li>Customize Clock on Lock Screen -  Create Custom Text on the Lock Screen</li> <li>GSConnect - With GSConnect you can securely connect to mobile devices</li> <li>Logo Menu - Adds a MacOS like button to the top left of the screen with <code>About my System</code>, <code>Force Quit App</code>, etc. Very cool extension.</li> <li>Removable Drive Menu - A status menu for accessing and unmounting removable devices.</li> <li>Systemd Manager - Systemd Manager is a Gnome Shell Extension which allows you to start/stop systemd services via a menu in the status area in the top panel. You can preselect which services should be shown in the extension preferences dialog.</li> </ul> <p>Tip</p> <p>From the terminal you can list the installed extensions <pre><code>gnome-extensions list -d --enabled | grep 'Name:' | sed 's/  Name: //'\n</code></pre></p> <p>Here is the output of the command:</p> <pre><code>gnome-extensions list -d --enabled | grep 'Name:' | sed 's/  Name: //'\nCustomize Clock on Lock Screen\nSystemd Manager\nRemovable Drive Menu\nClipboard Indicator\nGSConnect\nUbuntu AppIndicators\nUbuntu Dock\nDesktop Icons NG (DING)\nUbuntu Tiling Assistant\n</code></pre>"},{"location":"CH02-Install-Tools/#clipboard-indicator","title":"Clipboard Indicator","text":"<p>There are a lot of clipboard managers out there. I went with this one because it is a Gnome extension and it had good ratings. There are installable applications available but I liked the having an extension that is managed along with the other extensions I use. As always, there are security implications when using a clipboard manager. I felt that the convenience offsets the risk, you have to decide for yourself if it's worth the risk.</p> <p>Here is what it looks like in use:</p> <p></p> <p>Clicking on <code>Settings</code> brings up a dialog with tons of options. The  icon in <code>Gnome Extensions</code> exposes the settings menu. The only option I changed is <code>Notifications, show notification on copy</code> so that I get a popup message when I copy something to the clipboard.</p> <p>Installation Instructions</p> <p>Open the Extension Manager flatpak, click the <code>Browse</code> tab at the top, then type <code>clipboard indicator</code>. Once Extension Manager finds <code>Clipboard Indicator</code> click on the <code>Install...</code> button.</p>"},{"location":"CH02-Install-Tools/#customize-clock-on-lock-screen","title":"Customize Clock on Lock Screen","text":"<p>Since my laptop is at customer locations most of the time, I love this extension. It allows me to put my name and phone number on the lock screen like macOS!</p> <p>Note</p> <p>The shortcut keys to lock the screen are <code>super+l</code>. That's a lowercase <code>el</code>.</p> <p>Here are the settings I use. The  icon in <code>Gnome Extensions</code> exposes the settings menu.</p> <p></p> <p>That puts the following text on the lock screen:</p> <p></p> <p>If you want to use the same settings for time:</p> <pre><code>%A %B %d, %Y %H:%M:%S (%Z) - week %V\n</code></pre> <p>The week number is very popular in Europe. After I worked in France for awhile I find that I like it. In meetings you can say \"in week 48 we need to accomplish the following\" and everyone knows what dates you mean. There are widgets and applications for IOS and Android to show Weeks if you want to quickly see what a week number translates to on a calendar.</p> <p>Installation Instructions</p> <p>Open the Extension Manager flatpak, click the <code>Browse</code> tab at the top, then type <code>customize clock on Lock Screen</code>. Once Extension Manager finds <code>customize clock on Lock Screen</code> click on the <code>Install...</code> button.</p>"},{"location":"CH02-Install-Tools/#gsconnect","title":"GSConnect","text":"<p>If you use an Android phone this application is a must! It allows you to send/receive text messages from your laptop, send files to the phone, and much more. iPhone is more limited because Apple won't allow iMessages support. But with RCS rolling out in IOS 18 that might change.</p> <p>One nice feature that works on IOS and Android is <code>find my phone</code>! I always misplace my phone when working in closets and with GSConnect I can quickly make it ring to locate it.</p> <p>Note</p> <p>The phone and laptop have to be connected to the same network. This usually isn't an issue but if the customer doesn't allow you to connect then <code>Find My Phone</code> will fail.</p> <p>Open GSConnect Settings</p> <p>The  icon in <code>Gnome Extensions</code> exposes the settings menu:</p> <p></p> <p>You can also click on the <code>Quick Settings</code> at the top right of the screen and select <code>GS Connect</code> to open mobile settings.</p> <p></p> <p>Install KDE Connect</p> <p>GSConnect is a Gnome port of the KDE Connect application. On the GSConnect settings dialog you will see links to:</p> <ul> <li>Android Play Store</li> <li>Apple App Store</li> <li>Sailfish OS OpenRepos</li> <li>F-Droid</li> </ul> <p>Go to the appropriate store for your phone and install the KDE Connect application on your phone.</p> <p>Note</p> <p>On IOS you will be notified that KDE Connect is installed using a program called <code>TestFlight</code> that Apple uses for experimental Applications.</p> <p>Open the KDE Connect application on your phone and follow the instructions for connecting to GSConnect.</p> <p>From the GSConnect Settings dialog you will see all devices that have ever connected and their status:</p> <p></p> <p>I enabled the <code>GSConnect remains active when Gnome Shell is locked</code> slider so that the phone remains connected when I lock the desktop.</p> <p>Add the following rules to UFW so the phone can connect to GSConnect. Open the terminal and paste the following commands in:</p> <pre><code>sudo ufw allow 1716:1764/tcp\nsudo ufw allow 1716:1764/udp\nsudo ufw show added\n\n[output]\nAdded user rules (see 'ufw status' for running firewall):\nufw allow 1716:1764/tcp\nufw allow 1716:1764/udp\n</code></pre> <p>Troubleshooting</p> <p>If you open KDE Connect on the phone but your laptop can't be found:</p> <ul> <li>check the firewall rules:</li> </ul> <pre><code>sudo ufw status\n\nStatus: active\n\nTo                         Action      From\n--                         ------      ----\n514/udp                    ALLOW       Anywhere\n1716:1764/tcp              ALLOW       Anywhere\n1716:1764/udp              ALLOW       Anywhere\n514/udp (v6)               ALLOW       Anywhere (v6)\n1716:1764/tcp (v6)         ALLOW       Anywhere (v6)\n1716:1764/udp (v6)         ALLOW       Anywhere (v6)\n22/tcp (v6)                ALLOW       Anywhere (v6)              # Open ssh tcp port 22\nfe00::/7 546/udp           ALLOW       fe00::/7 547/udp\n</code></pre> <ul> <li>Check that the process is listening on the network.</li> </ul> <pre><code>sudo netstat -tunelp | grep -i gjs\ntcp6   0      0 :::1716   :::*    LISTEN      1000       46960      7665/gjs\nudp6   0   3584 :::1716   :::*                1000       46961      7665/gjs\n</code></pre> <ul> <li>Use <code>netcat</code> to verify the laptop can connect to the phone</li> </ul> <pre><code>netcat -z -v 192.168.10.101 1714-1764\nnetcat: connect to 192.168.10.101 port 1714 (tcp) failed: Connection refused\nnetcat: connect to 192.168.10.101 port 1715 (tcp) failed: Connection refused\nConnection to 192.168.10.101 1716 port [tcp/*] succeeded!\nnetcat: connect to 192.168.10.101 port 1717 (tcp) failed: Connection refused\n</code></pre> <p>If you ran the <code>netstat</code> command above you can just the active port for <code>netcat</code> instead of the range <code>1714-1764</code>.</p> <p>Note</p> <p>You will see a lot of <code>netcat: connect to 192.168.10.101 port 1764 (tcp) failed: Connection refused</code> messages. You only need 1 <code>succeeded!</code> message.</p> <p>This site has a lot of detail on KDE connect.</p>"},{"location":"CH02-Install-Tools/#logo-menu","title":"Logo Menu","text":"<p>Quick access menu for the GNOME panel with options that help ease the workflow for newcomers and power users alike and gives a great logo that you can switch to your liking to match your distribution or add something your own. Similar to the Apple Menu found on MacOS.</p> <p>Adds a customizable icon on the top left of screen. I picked an Icon that is the new Ubuntu Orange circle with the three dots.</p> <p></p> <p>I enabled the following options:</p> <p></p> <p>Here is what the dialog looks like when you click on it:</p> <p></p> <p>If you are migrating from macOS this extension will make you feel a little more at home on Ubuntu.</p>"},{"location":"CH02-Install-Tools/#removable-drive-menu","title":"Removable Drive menu","text":"<p>On some projects I end up using flash drives quite a lot. All this extension does is puts the <code>Eject Drive</code> icon  in the status menu. But I find useful when I'm not in <code>Files</code> and want to work with the files on a flash drive or eject a drive.</p> <p>Installation Instructions</p> <p>Open the Extension Manager flatpak, click the <code>Browse</code> tab at the top, then type <code>Removable Drive Menu</code>. Once Extension Manager finds <code>Removable Drive Menu</code> click on the <code>Install...</code> button.</p> <p>Now, any time a flash drive is installed, the Removable Drive icon will be in the status menu. Simply click the icon, then select the drive to eject!</p> <p></p> <p>One annoying feature of snaps is that they install as Loop devices. This means that when you run <code>lsblk</code> from the terminal to view your disks you see a lot of <code>loop</code> entries.</p> <pre><code>lsblk\nNAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nloop0         7:0    0   9.5M  1 loop /snap/asciinema/35\nloop1         7:1    0  11.6M  1 loop /snap/auto-cpufreq/146\nloop2         7:2    0  76.5M  1 loop /snap/aurora-editor/55\nloop3         7:3    0   9.4M  1 loop /snap/asciinema/32\nloop4         7:4    0  11.6M  1 loop /snap/auto-cpufreq/147\n</code></pre> <p>To avoid this, add the -e7 flag:</p> <pre><code>lsblk -e7\n</code></pre> <p>You can add an alias in the <code>.bahsrc</code> or <code>.zshrc</code> file using:</p> <pre><code>alias lsblk='lsblk -e7'\n</code></pre> <p>If you don't want to have to type the <code>-e7</code>.</p>"},{"location":"CH02-Install-Tools/#systemd-manager","title":"Systemd Manager","text":"<p>Systemd is a system and service manager for Linux operating systems. There are hundreds of services running on the system and usually terminal commands are used to start/stop/enable and check status. There are a few services like the <code>UFW Firewall</code>, <code>ssh server</code> and <code>tftp server</code> that I turn on and off often. The <code>Systemd Manager</code> extensions lets me easily check the status from the <code>status menu</code>. The icon looks like the Gnome setting gear - .</p> <p>Installation Instructions</p> <p>This extension isn't available using the <code>Extension Manager</code> flatpak. There appears to be some friction between the developer and the Gnome Project. At least that's what it seemed like on the Github Issues page. So far I have not had any problems with the extension. Follow these instructions to install.</p> <p>Click this link Systemd Manager to download the zip file of release V17. Version 17 supports Gnome 45/46/47.</p> <p>Right click on the zip file and select <code>Extract To..</code>. In the Files dialog that opens search for <code>~/.local/share/gnome-shell/extensions</code> and click <code>Select</code>. This will extract the file into a folder named <code>systemd-manager-v17</code> under the <code>extensions</code> directory. Locate the folder in Files and rename it to <code>systemd-manager@hardpixel.eu</code></p> <p>You will need to restart Ubuntu to activate the extension.</p> <p>One of files in the directory is named <code>metadata.json</code> Below are the contents of the json file. You can see the shell version the extension works with and the uuid. The uuid is the required name of the directory containing the extension's configuration files. I right clicked on <code>metadata.json</code> and used <code>Text Edit</code> to open the configuration file.</p> <pre><code>{\n  \"shell-version\": [\"45\", \"46\", \"47\"],\n  \"uuid\": \"systemd-manager@hardpixel.eu\",\n  \"url\": \"https://github.com/hardpixel/systemd-manager\",\n  \"settings-schema\": \"org.gnome.shell.extensions.systemd-manager\",\n  \"gettext-domain\": \"systemd-manager\",\n  \"version\": 17,\n  \"name\": \"Systemd Manager\",\n  \"description\": \"Toggle systemd services on/off from a popup menu in the top gnome panel. Can be used to start services like apache2, mysql, postgres. It uses `pkexec' to run `sytemctl'. If you want to start services without entering a password you have to polkit policy file. An example policy file can be found in the github repository.\",\n  \"donations\": {\n    \"github\": \"jonian\"\n  }\n}\n</code></pre> <p>Configuration</p> <p>Click on the <code>Systemd-Manager</code> icon in the status menu and select <code>Add Service</code>. Here is what it will look like:</p> <p></p> <p>Type a name for the service in the <code>Name in menu</code> field and enter the service in the <code>Search for service</code> field. Click the <code>+ Add</code> button and then click the <code>X</code> at the top right corner of the dialog to close it.</p> <p>Now click the <code>Systemd-Manager</code> icon in the <code>status menu</code> and you will see the services you added.</p> <p></p> <p>Simply slide the slider to the right to enable a service or to the left to disable a service. You can also restart a service by clicking the icon with the circular arrow or mask a service by clicking the icon on the right.</p> <p>Why the Red</p> <p>Notice that the TFTP entry is red. I wasn't sure what that meant so I ran the following command from a terminal:</p> <pre><code>sudo systemctl restart tftpd-hpa\n</code></pre> <p>And received a message that the service couldn't be started. I ran the following command to view the journal for tftpd-hpa:</p> <pre><code>journalctl -u tftpd-hpa\n</code></pre> <p>And found that tftpd-hpa had been failing since I upgraded to 24.10 on November 17th! I Googled the error message but nothing really jumped out so I did the following:</p> <pre><code>sudo cp /etc/default/tftpd-hpa /etc/default/tftpd-hpa.bak\nsudo dpkg --purge --force-all tftpd-hpa\nsudo nala install tftpd-hpa\nsudo cp /etc/default/tftpd-hpa.bak /etc/default/tftpd-hpa\nsudo systemctl is-enabled tftpd-hpa\nsudo systemctl start tftpd-hpa\n</code></pre> <p>Those commands did the following</p> <ul> <li>made a backup of the tftpd-hpa configuration file</li> <li>removed the tftpd-hpa service and the configuration file</li> <li>reinstalled the tftpd-hpa service</li> <li>copied the tftpd-hpa configuration file from the backup</li> <li>verified that the tftpd-hpa was enabled so that it could start after a reboot</li> <li>started the tftpd-hpa service</li> </ul> <p>Now when I click on the Systemd-Manager icon the TFTP entry is black</p> <p></p>"},{"location":"CH02-Install-Tools/#flatpak-applications","title":"Flatpak Applications","text":"<p>Now that we have the Gnome Extensions installed let's install some Flatpak applications that you might call \"Quality of Life\" improvements! I listed them in alphabetical order order, not the order that you will use the most!</p> <ul> <li>Dev Toolbox - Dev tools at your fingertips</li> <li>Disk Usage Analyzer - A GUI disk Space analyzer tool</li> <li>Draw.io - A flexible and privacy-focused production grade diagramming tool.</li> <li>Flatseal - A tool to manage flatpak security settings</li> <li>Foliate - An ebook reader</li> <li>Gear Lever - A flatpak for managing Appimages!</li> <li>KolourPaint - A simple painting program to quickly create raster images.</li> <li>Meld - A great diffing tool</li> <li>Pinta - An image editing, drawing and painting application</li> <li>Resources - A system resource monitor</li> <li>Vesktop - A snappier Discord Client</li> <li>Warehouse - A tool to manage every aspect of Flatpak applications</li> </ul>"},{"location":"CH02-Install-Tools/#dev-toolbox","title":"Dev Toolbox","text":"<p>Installation Instructions</p> <pre><code>flatpak install flathub me.iepure.devtoolbox\n</code></pre> <p>Once installed, run  <code>Dev Toolbox</code> from the terminal using:</p> <pre><code>flatpak run me.iepure.devtoolbox\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>dev</code> and clicking on the <code>Dev Toolbox</code> icon.</p> <p>Even if you aren't a developer this app has tools you might use. Dev Toolbox is a collection of powerful yet simple-to-use tools to solve the most common daily problems.</p> <p>Includes:</p> <ul> <li>JSON to YAML converter and vice-versa</li> <li>CRON expressions parser</li> <li>GZip compressor and decompressor</li> <li>Formatters for common programming languages</li> <li>Hash generators</li> <li>Regex tester</li> <li>Markdown Previewer</li> <li>Image converters</li> <li>Much more...</li> </ul> <p>For example, JSON is pervasive on the web now. It can be hard to read in raw format. You can pasted it into the is tool and use the <code>JSON Formatter</code> to make it easy to read.</p> <p>The <code>QR Code Generator</code> is great create a QR code for a web URL or other text and the <code>Text Diff</code> tool is super easy to use and is great from comparing an interface that has changed.</p> <p></p> <p></p>"},{"location":"CH02-Install-Tools/#disk-usage-analyzer","title":"Disk Usage analyzer","text":"<p>Installation Instructions</p> <pre><code>flatpak install flathub org.gnome.baobab\n</code></pre> <p>Once installed, run  <code>Disk Usage Analyzer</code> from the terminal using:</p> <pre><code>flatpak run org.gnome.baobab\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>disk</code> and clicking on the <code>Disk Usage Anlyzer</code> icon.</p> <p>Disk Usage analyzer is similar to disk usage tools on Windows and Mac. Here is a screenshot of the disk usage on my home folder:</p> <p></p> <p>I hovered over one of the large blocks and it told me that is the section of disk holding my Inbox. Since my email client is Thunderbird, I expanded the <code>.thunderbird</code> folder and then I could see <code>sent mail</code> and other folders. I prompted me to delete some email!</p> <p></p>"},{"location":"CH02-Install-Tools/#drawio","title":"Draw.io","text":"<p>Create and share diagrams</p> <p>draw.io is the most flexible and privacy-focused of any production grade diagramming tool. Create flowcharts, process diagrams, org charts, UML, ER diagrams, network diagrams and much more.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub com.jgraph.drawio.desktop\n</code></pre> <p>Once installed, run  <code>Drawio</code> from the terminal using:</p> <pre><code>flatpak run com.jgraph.drawio.desktop\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>drawio</code> and clicking on the <code>Drawio</code> icon.</p> <p>When you launch Drawio, these are the choices for getting started:</p> <p></p> <p>As you can see, there are a lot of built in templates. You select one of the built-in templates or select <code>Blank Diagram</code> to start from scratch.</p> <p>The Drawio Project homepage</p>"},{"location":"CH02-Install-Tools/#flatseal","title":"Flatseal","text":"<p>Flatseal is a graphical utility to review and modify permissions from your Flatpak applications. This application allows you to look at all of your installed Flatpak applications and verify their permissions.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub com.github.tchx84.Flatseal\n</code></pre> <p>Once installed, run <code>Flatseal</code> from the terminal using:</p> <pre><code>flatpak run com.github.tchx84.Flatseal\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>flatseal</code> and clicking on the Flatseal icon.</p> <p>You will be able to see all of the flatpak applications that are installed when flatseal opens.</p>"},{"location":"CH02-Install-Tools/#list-flatpaks-in-terminal","title":"List flatpaks in terminal","text":"<pre><code>flatpak list --app\n</code></pre> <p>To see the same list of applications. The <code>--app</code> limits the output to just applications. If you omit it, you will see flatpak runtime applications needed to make the flatpak infrastructure work.</p>"},{"location":"CH02-Install-Tools/#flatpaks-with-instructions","title":"flatpaks with Instructions","text":"<p>If you want to install the flatpak applications on a different machine, for example a VM, run the following command.</p> <pre><code>flatpak list --app | sed -e \"s/^[^\\t]*//\" -e \"s/^\\t/flatpak install /\" -e \"s/\\t.*$//\"\n</code></pre> <p>Copy the lines with <code>flatpak install</code> (you can click the copy icon on the right), then paste them into terminal on the new machine.</p> <pre><code>flatpak install cc.arduino.arduinoide\nflatpak install com.github.PintaProject.Pinta\nflatpak install com.github.johnfactotum.Foliate\nflatpak install com.github.tchx84.Flatseal\nflatpak install com.jgraph.drawio.desktop\nflatpak install com.mattjakeman.ExtensionManager\nflatpak install fr.rubet.rpn\nflatpak install io.github.cboxdoerfer.FSearch\nflatpak install io.github.flattool.Warehouse\nflatpak install io.gitlab.adhami3310.Impression\nflatpak install net.nokyan.Resources\nflatpak install net.werwolv.ImHex\nflatpak install org.gnome.baobab\nflatpak install org.gnome.meld\nflatpak install org.kde.kolourpaint\n</code></pre> <p>Here is a screenshot of the flatpak applications I have installed:</p> <p></p>"},{"location":"CH02-Install-Tools/#launch-flatpaks-with-a-script","title":"Launch flatpaks with a script","text":"<p>If you were wondering why I included the terminal command with each flatpak when they are GUI applications, it's because you might want to create a script and launch several at once. For example, let's say you want to launch <code>Foliate</code>, <code>KolourPaint</code>, and <code>Meld</code> every time you start up your laptop.</p> <p>First we need to open an editor and create a shell script.</p> <pre><code>#!/bin/zsh\n\nflatpak run com.github.johnfactotum.Foliate\nflatpak run org.kde.kolourpaint\nflatpak run org.gnome.meld\n</code></pre> <p>Save the file as <code>morning.sh</code></p> <p>Make the file executable</p> <pre><code>chmod +x morning.sh\n</code></pre> <p>Run the script</p> <pre><code>./morning.sh\n</code></pre>"},{"location":"CH02-Install-Tools/#foliate","title":"Foliate","text":"<p>Read e-books in style</p> <p>Discover a new chapter in reading with Foliate, the modern e-book reader tailored for GNOME. Immerse yourself in a distraction-free interface, with customization features designed to match your unique preferences.</p> <p>Features include:</p> <ul> <li>Open EPUB, Mobipocket, Kindle, FB2, CBZ, and PDF files</li> <li>Paginated mode and scrolled mode</li> <li>Customize font and line-spacing</li> <li>Light, sepia, dark, and invert mode</li> <li>Reading progress slider with chapter marks</li> <li>Bookmarks and annotations</li> <li>Find in book</li> <li>Quick dictionary lookup</li> </ul> <p>Technical education is changing. When I got into network engineering back in 1999 you almost had to take an instructor led class at an organization like New Horizons or a local community college.</p> <p>But the Internet has changed that. I haven't taken an instructor led course in years. I do a lot of webinars and YouTube videos. I also buy ebooks from Packt Publising, No Starch Press, and Gumroad. Even though Amazon makes $billions with its AWS service running 100% on Linux, they do not offer a Kindle app for Linux. Foliate solves that problem and is a great tool for organizing and reading ebooks.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub com.github.johnfactotum.Foliate\n</code></pre> <p>Once installed, run  <code>Meld</code> from the terminal using:</p> <pre><code>flatpak run com.github.johnfactotum.Foliate\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>foliate</code> and clicking on the <code>Foliate</code> icon.</p> <p>Here is a screenshot of Foliate with my Python Library:</p> <p></p> <p>Foliate has a lot of functionality. So far I have just used it for reading the ebooks that I have purchased.</p>"},{"location":"CH02-Install-Tools/#gearlever","title":"GearLever","text":"<p>Manage AppImages</p> <p>An utility to manage AppImages with ease! Gear lever will organize and manage AppImage files for you, generate desktop entries and app metadata, update apps in-place or keep multiple versions side-by-side.</p> <p>Features</p> <ul> <li>Integrate AppImages into your app menu with just one click</li> <li>Drag and drop files directly from your file manager</li> <li>Keep all the AppImages organized in a custom folder</li> <li>Open new AppImages directly with Gear lever</li> <li>Manage updates: keep older versions installed or replace them with the latest release</li> <li>Save CLI apps with their executable name automatically</li> <li>Modern and Fresh UI</li> </ul> <p>Installation Instructions</p> <pre><code>flatpak install flathub it.mijorus.gearlever\n</code></pre> <p>Once installed, run  <code>KolourPaint</code> from the terminal using:</p> <pre><code>flatpak run it.mijorus.gearlever\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>Gear Lever</code> and clicking on the <code>KolourPaint</code> icon.</p>"},{"location":"CH02-Install-Tools/#cli","title":"CLI","text":"<p>Starting from version 3.0.0, Gear Lever includes some useful command line tools to manage your AppImages. The CLI uses the same logics as the UI.</p> <p>Please use flatpak run it.mijorus.gearlever --help to get an updated version of this help screen</p> <p>Usage:</p> <pre><code>flatpak run it.mijorus.gearlever [OPTION...]`\n# OR gearlever [OPTION...] if using the alias\n\n--integrate        Integrate an AppImage file\n--update           Update an AppImage file\n--update --all     Update all apps\n--remove           Trashes an AppImage, its .desktop file and icons\n--list-installed   List integrated apps\n--list-updates     List available updates\n</code></pre> <p>Note</p> <p>For an improved user experience, add the following line to your .zshrc or.bashrc file:</p> <pre><code>alias gearlever='flatpak run it.mijorus.gearlever\n</code></pre> <p>Reference Links</p> <p>Gear Lever on Github Gear Lever on Flathub</p>"},{"location":"CH02-Install-Tools/#kolourpaint","title":"KolourPaint","text":"<p>Paint Program</p> <p>KolourPaint is a simple painting program to quickly create raster images. It is useful as a touch-up tool and simple image editing tasks. I use it to add callouts to screenshots.</p> <p>Features:</p> <ul> <li>Support for drawing various shapes</li> <li>lines</li> <li>rectangles</li> <li>rounded rectangles</li> <li>ovals and polygons</li> <li>curves</li> <li>text</li> <li>Color picker</li> <li>Selections</li> <li>Rotation, monochrome and other advanced effects</li> </ul> <p>Installation Instructions</p> <pre><code>flatpak install flathub org.kde.kolourpaint\n</code></pre> <p>Once installed, run  <code>KolourPaint</code> from the terminal using:</p> <pre><code>flatpak run org.kde.kolourpaint\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>KolourPaint</code> and clicking on the <code>KolourPaint</code> icon.</p> <p>The KolourPaint Handbook</p>"},{"location":"CH02-Install-Tools/#meld","title":"Meld","text":"<p>Meld is a flatpak from the Gnome project.</p> <p>Compare and merge your files</p> <p>Meld is a visual diff and merge tool targeted at developers. Meld helps you compare files, directories, and version controlled projects. It provides two- and three-way comparison of both files and directories, and supports many version control systems including Git, Mercurial, Bazaar and Subversion.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub org.gnome.meld\n</code></pre> <p>Once installed, run  <code>Meld</code> from the terminal using:</p> <pre><code>flatpak run org.gnome.meld\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>meld</code> and clicking on the <code>Meld</code> icon.</p>"},{"location":"CH02-Install-Tools/#example","title":"Example","text":"<p>Here is an example of comparing two configuration files. On line 1 notice that there are two arrows int the center of the screen pointing at each other. Out of view in screenshot is the firmware version. The left and right have different versions. The differences are highlighted in blue blocks.</p> <p>On line 2 you can see a blue highlight showing that the firmware on the left side is 14.01 and on the right it's 14.21.</p> <p>On line 10 you see a green highlighted line on the right side with an arrow pointing to the left. That tells you that the line <code>sntp server priority 1 10.124.14.5</code> was added to the file on the right.</p> <p>Further down you can see a blue highlighted line on the right that rolls over to the left. That tells you that the name of the interface was changed.</p> <p>It takes a little bit of time to learn all the features of Meld but is is a great tool for a network engineer.</p> <p></p>"},{"location":"CH02-Install-Tools/#pinta","title":"Pinta","text":"<p>Edit images and paint digitally</p> <p>Pinta is a image editing, drawing and painting application with a simple yet powerful interface. Pinta has a wide range of drawing tools, including: freehand, rectangles, circles and lines. It also has over 35 effects to apply to your images, and also has the ability to create unlimited layers to help organize your creativity.</p> <p>We installed KolourPaint earlier and it works as expected but Pinta has a lot more features if I'm doing more than annotating a screenshot.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub com.github.PintaProject.Pinta\n</code></pre> <p>Once installed, run  <code>Pinta</code> from the terminal using:</p> <pre><code>flatpak run com.github.PintaProject.Pinta\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>Pinta</code> and clicking on the <code>Pinta</code> icon.</p>"},{"location":"CH02-Install-Tools/#resources","title":"Resources","text":"<p>Gnome Resources is similar to the Windows Task Manager. Here is a link to the homepage describing Gnome Resources.</p> <p>Installation Instructions</p> <pre><code>flatpak install flathub net.nokyan.Resources\n</code></pre> <p>Once installed, run <code>Resources</code> from the terminal using:</p> <pre><code>flatpak run net.nokyan.Resources\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing resource and clicking on the Resources icon.</p> <p>Here is a screenshot of the Processes tab. Just like in the Windows Task Manager, you can right click on a process and get a menu of actions to perform:</p> <p></p> <p>Unlike the Windows Task Manager, you have a clean menu on the side where you can select the following resources:</p> <ul> <li>Apps - the apps that are running</li> <li>Processes - the processes that are running</li> <li>Processor - The CPU AND GPU percentages</li> <li>Memory - The amount of memory applications are using</li> <li>GPU1 - The utilization of GPU1</li> <li>GPU2 - The utilization of GPU2</li> <li>Disk activity - Activity of each internal disk</li> <li>Network - Ethernet utilization</li> <li>WiFI - Utilization of the WiFI adapter</li> <li>Battery - Battery usage and properties</li> </ul>"},{"location":"CH02-Install-Tools/#sar","title":"SAR","text":"<p>Linux has been around for over 30 years and is used on a lot of servers. That means that there are a lot of monitoring tools available. If you want to collect long term data on your laptop or have a server in your home lab you can use System Activity Report (SAR) to collect long term data.</p> <p>There is a graphical interface available called KSAR that presents the data in a nice GUI. It's beyond the scope of this article to cover SAR/KSAR but here are link to some details blogs:</p> <ul> <li>Using sar to Show Current and Past System\u2019s Statistics - Baeldung.com is a great site for indepth Linux sysadmin articles.</li> <li>KSAR - KSAR is a Java implementation of the GUI for SAR. I'm not big on Java tools but KSAR seems to be well maintained.</li> </ul>"},{"location":"CH02-Install-Tools/#vesktop","title":"Vesktop","text":"<p>Snappier Discord app with Vencord</p> <p>Vesktop is a cross platform desktop app aiming to give you a snappier Discord experience with Vencord pre-installed.</p> <p>Vesktop comes bundled with Venmic, a purpose-built library to provide functioning audio screenshare.</p> <p>When you start <code>vesktop</code> you are presented with a Discord login screen:</p> <p></p> <p>Installation Instructions</p> <pre><code>flatpak install flathub dev.vencord.Vesktop\n</code></pre> <p>Once installed, run <code>Vesktop</code> from the terminal using:</p> <pre><code>flatpak run dev.vencord.Vesktop\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing Vesktop and clicking on the Vesktop icon.</p>"},{"location":"CH02-Install-Tools/#warehouse","title":"Warehouse","text":"<p>Ok, one more application for managing Flatpaks! Warehouse is relatively new and I had already been using <code>Gnome Extensions</code> and <code>Extension Manager</code> for flatpaks when I found this application. It can do everything in one place including adding non Flathub.org repositories. I haven't gone down that rabbit hole yet because I am happy spending time in the terminal if I'm not in VS Code.</p> <p>Manage all things Flatpak</p> <p>Warehouse provides a simple UI to control complex Flatpak options, all without resorting to the command line.</p> <p>Features:</p> <ul> <li>Manage installed Flatpaks and view properties of any package</li> <li>Change versions of a Flatpak to rollback any unwanted updates</li> <li>Pin runtimes and mask Flatpaks</li> <li>Filter packages and sort data, to help find anything easily</li> <li>See current app user data, and cleanup any unused data left behind</li> <li>Add popular Flatpak remotes with a few clicks or add custom remotes instead</li> <li>Take snapshots of your apps' user data, saving your data</li> <li>Install new packages from any remote, or from your system</li> <li>Responsive UI to fit large and small screen sizes</li> </ul> <p>Installation Instructions</p> <pre><code>flatpak install flathub io.github.flattool.Warehouse\n</code></pre> <p>Once installed, run  <code>Warehouse</code> from the terminal using:</p> <pre><code>flatpak run io.github.flattool.Warehouse\n</code></pre> <p>Or by tapping the <code>Super</code> key, typing <code>warehouse</code> and clicking on the <code>Warehouse</code> icon.</p> <p>One great feature of <code>Warehouse</code> is that you can see how much disk space each application uses.</p> <p></p>"},{"location":"CH02-Install-Tools/#wrapping-up","title":"Wrapping up","text":"<p>We installed several Gnome extensions that add functionality to the Gnome Desktop. Then we installed a few GUI applications that are useful in day to day operations. With these tools installed, I hope you find Ubuntu with Gnome desktop easy to manage and highly capable. In the next chapter we setup the terminal for complete awesomeness! You will wonder how you ever lived with cmd.exe!</p>"},{"location":"Ch01-Using-Ubuntu/","title":"Using Ubuntu","text":"<p> KEY TAKEAWAYS</p> <ul> <li>It's surprising easy switch from MS Windows to Ubuntu 24.04</li> <li>There are no license fees to use Ubuntu</li> <li>Ubuntu's desktop and files manager are very similar to Windows 10</li> <li>You can customize so many things in Ubuntu that you can't customize in Windows</li> </ul> <p>It's surprisingly easy to switch from Microsoft Windows to Ubuntu 24.04.The basic operation of the Ubuntu desktop is similar to Windows. The file manager (Files) is similar to Windows Explorer and of course, Chrome or Edge work just like they do in Windows including syncing, extensions, etc. There is a keyboard button called the superkey (on most keyboards it will have the Windows logo) just like the Windows key. You tap it and search for an application or pick from the running applications.</p> <p>So, what is the hard part? Things like killing a hung application, searching for files from the terminal, and checking free disk space are different and will take a little getting used to. It's a lot like working on Cisco IOS for years and then having to work on an Aruba or Juniper switch. At first, it's frustrating, you have to look up commands and do some things differently.</p> <p>The reason for this guide is to help get you past the hurdles so that you can start enjoying Ubuntu. I promise that if you get over the hump your productivity as a network engineer will soar. Since MacOS is based on Open BSD Unix, once your muscle memory is up to speed you can jump back and forth easily between Windows, Mac and Linux. In a later chapter I will discuss the terminal tools that make Linux so much fun and so powerful for a network engineer.</p>"},{"location":"Ch01-Using-Ubuntu/#desktop-environments-in-linux","title":"Desktop Environments in Linux","text":"<p>One of the big advantages for Linux is that you can customize almost everything since it's open source. You can change the terminal you use, the file manager, the way almost anything works and even the desktop itself.</p> <p>The first choice you have to make with Ubuntu is which Desktop Environment do  you want to use. The two most popular desktop environments (DE) for Linux are Gnome (Ubuntu\u2019s default), and KDE (which is available on Ubuntu) but there are many more. Gnome is the most popular Desktop Environment in Linux and I just learned to customize Gnome to fit my workflow. Here is a TecMint article on Desktop Environments that will explain the differences between them. My advice is to start out with Ubuntu and Gnome until you are comfortable.</p> <p>I listen to a lot of podcasts on Linux and KDE, XFCE and MATE are highly recommended desktop environments (DE) that you may like better than Gnome. If you watched the second episode of Mr. Robot (Season 1 \u2013 which I highly recommend) there is a scene were an executive tells Elliot that he runs KDE but understands why Elliott prefers Gnome.</p> <p>These two short YouTube videos sum it up better than I can:</p> <ul> <li>6 Things to Know When Switching to Linux from Windows</li> <li>10 things you can do with Linux that you can't do with Windows</li> </ul>"},{"location":"Ch01-Using-Ubuntu/#podcasts-on-linux","title":"Podcasts on Linux","text":"<p>There are a lot of podcasts dedicated to Linux. In your podcast application just search Linux. My favorites are:</p> <ul> <li>Destination Linux - A weekly podcast on general Open Source topics.</li> <li>Late Night Linux - A weekly podcast on Linux and the wider tech industry. NOTE: Lots of F bombs!</li> <li>Linux After Dark - A weekly podcast on Linux experiences.</li> <li>Linux Dev Time - A weekly podcast on Developing on Linux</li> <li>Linux Downtime - A weekly podcast \"From working in the Industry and progressing your career, to managing a project's community\"</li> <li>Linux Unplugged - A weekly podcast on Linux by Jupiter Broadcasting. Covers news and applications for Linux.</li> <li>This Week in Linux - A weekly podcast on Linux</li> </ul>"},{"location":"Ch01-Using-Ubuntu/#casting-your-display","title":"Casting your display","text":"<p>I have a Vizio \u201cSmart\u201d TV with Chromecast built in. Using the Chrome browser I can click the three dot menu on the right and select \u201cCast...\u201d to send the output to the TV.</p> <p>In VLC, select \u201cPlayback, Renderer\u201d to send VLC\u2019s output to the TV. I don\u2019t have a Chromecast dongle, but I am guessing it would work the same way as the Vizio TV.</p>"},{"location":"Ch01-Using-Ubuntu/#using-rdp-to-share-the-ubuntu-desktop","title":"Using RDP to share the Ubuntu desktop","text":"<p>Ubuntu 24.04 has an RDP server built in. To enable it:</p> <ul> <li>Tap the <code>super key</code> (Windows key on some laptops), type <code>settings</code> and press <code>enter</code>.</li> <li>In the top left corner of the screen click on the magnifying glass, type rdp.</li> <li>Click on the resulting <code>System</code></li> <li>Click on <code>Remote Desktop</code>, enable <code>Desktop Sharing</code> and <code>Remote Control</code></li> <li>Under <code>login details</code>, click on the eyeball icon so show the password</li> <li>Add port 3389 to the firewall using <code>sudo ufw allow from any to any port 3389 proto tcp</code></li> </ul> <p>You can now use Windows RDP or any RDP client to connect to your laptop!</p> <p>For a more detailed tutorial see Ubuntu Remote Desktop Access from Windows 10/11</p>"},{"location":"Ch01-Using-Ubuntu/#working-with-applications","title":"Working with Applications","text":"<p>Like in Windows, there are many ways to open applications in Gnome.</p>"},{"location":"Ch01-Using-Ubuntu/#the-super-key","title":"The Super Key","text":"<p>You can hit the Windows key (Superkey is what it's called in Ubuntu) to bring up a search box.</p> <p></p> <p>Notice that the files application icon has two dots on the left side. That's because I have two separate windows open. If you click on the icon, the screen will change to show the two files windows.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#search-for-an-application","title":"Search for an application","text":"<p>To open an application using search, simply tap the super key and start typing the name of the application in the search box. As you type, all the matching applications will be displayed below the search box. If the one you want is the first one displayed on the left you can just hit enter. If not, keep typing and the list of displayed applications will get smaller. In the screenshot below, hitting enter will open the built in calculator app. Right arrow, Enter will open LibreOffice Calc!</p> <p></p> <p>You can also use the mouse and click on any application that is displayed to open it.</p>"},{"location":"Ch01-Using-Ubuntu/#switching-applications","title":"Switching Applications","text":"<p>Tap the super key (Windows key on some keyboards). Below the search box are the applications that are currently running. If you want to switch to one of the open applications, you can use the Tab key and [enter] or use the mouse to select one of the running applications.</p> <p>You can also use ctrl+tab just like in Windows.</p> <p>Finally, you can use the dock to open applications that you have pinned to it and switch to an open application.</p>"},{"location":"Ch01-Using-Ubuntu/#viewing-all-installed-applications","title":"Viewing all installed applications","text":"<p>The dock has a small icon at the bottom, it\u2019s three rows of three dots. You can click that icon to see the installed applications in a window.</p> <p></p> <p>If there are too many to display, a column of circles will appear at the bottom of the screen and and an arrow on the right side. You can scroll down with the mouse button, click on one of the circles or click the arrow on the right to jump to the next page. As you can see, it\u2019s very easy to open applications in Ubuntu.</p> <p></p> <p>Note</p> <p>Ubuntu 24.10 has changed the icon to an Ubuntu icon instead of the dots.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#switching-between-multiple-open-windows-in-the-same-application","title":"Switching between multiple open windows in the same application","text":"<p>If you have several copies of the same application open you can switch between them using the super key + ~ key (the key to the left of 1 on a US keyboard). You can also bring up the dock, click on the application icon and then select the one you want but the keyboard is much easier and faster.</p> <p>For Example, in LibreCalc I often have a lot of spreadsheets open. To switch to a different sheet I can use the super + ` key combination. On a US keyboard that is the key to teh left of the 1 key. Here is a screenshot of two spreadsheets.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#configuring-the-dock","title":"Configuring the Dock","text":"<p>Like Windows and Mac, Ubuntu with the Gnome DE has a dock. You customize the dock using the Gnome Settings application. To open the Gnome Settings application, click on \"Activities Overview\" icon at the top right corner of the screen, then select the gear icon. This will open the \"settings\" application. It\u2019s very similar to \u201cSystem Preferences\u201d on the Mac or Control Panel on Windows.</p> <p>At the top left corner of the screen there is a magnifying glass. Click it and enter \"dock\". The dock is under \"Ubuntu Desktop\".</p> <p></p> <p>One thing I do to help me use all three operating systems is to customize the dock to be similar across all OSes. I set Windows, Mac and Linux to display it on the left because I am almost 100% of the time on a laptop and the screen is wider than it is high. I also set the dock to auto-hide and display a few commonly used apps.</p> <p>Using the super key and typing the first few letters is now my preferred work flow rather than clicking on an icon in the dock. One thing I like about Ubuntu is that when I\u2019m using multiple monitors it puts the dock on all the monitors.</p>"},{"location":"Ch01-Using-Ubuntu/#customizing-gnome-the-tweaks-tool","title":"Customizing Gnome - The Tweaks Tool","text":"<p>Ubuntu ships with Gnome as the desktop environment (DE). Unlike Windows, Linux distributions can use a lot of different desktop environments (DE). Gnome is the default desktop environment for Ubuntu and Redhat (CentOS) so it has a large percentage of the desktop market in Linux. If you want to try others there are several official flavors of Ubuntu that you can download from Canonical.</p> <p>First, install the Gnome Tweak Tool. This tool allows you to change a lot of the Gnome settings to your preference. Open a terminal window, <code>ctrl+alt+t</code>, and type the following:</p> <p><code>sudo apt install gnome-tweak-tool</code></p> <p>Press [enter], you will be prompted for your password because of sudo, and the install will start. When it finishes, hit the super key, type</p> <p><code>tweaks</code></p> <p>and hit [enter].</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#startup-applications","title":"Startup Applications","text":"<p>Gnome Tweaks is where you set the applications that run on startup. I try to keep these to a minimum. It's easy to forget that some application you don't use anymore is automatically starting and using system resources.</p> <p>There are a lot of options that you can \"tweak\" with the tool. I don't make a lot of changes but I do like having the Top Bar show Day, Data and Time.</p>"},{"location":"Ch01-Using-Ubuntu/#display-asterisks-when-typing-passwords","title":"Display Asterisks when typing passwords","text":"<p>By default Ubuntu doesn't display anything when you type a password. This annoys some users. Here is how to add Asterisks.</p> <p>Ubuntu provides a terminal tool called <code>visudo</code> to modify the <code>/etc/sudoers</code> file. This tool is a safety blanket that will catch a lot of mistakes when you try to exit. If you bork the file bad enough the system won't log in! Digital Ocean has a tutorial on editing the sudoers file.</p> <p>Warning</p> <p>Never edit this file with a normal text editor! Always use the visudo command instead! Because improper syntax in the /etc/sudoers file can leave you with a broken system where it is impossible to obtain elevated privileges, it is important to use the visudo command to edit the file.</p> <p>The <code>visudo</code> command opens a text editor like normal, but it validates the syntax of the file upon saving. This prevents configuration errors from blocking sudo operations, which may be your only way of obtaining root privileges.</p> <p>Traditionally, visudo opens the /etc/sudoers file with the vi text editor. Ubuntu, however, has configured visudo to use the nano text editor instead. Before running <code>visudo</code> use the following command to verify what editor will be used:</p> <pre><code>sudo update-alternatives --config editor\n[sudo] password for mhubbard:\nThere are 9 choices for the alternative editor (providing /usr/bin/editor).\n\n  Selection    Path                Priority   Status\n------------------------------------------------------------\n* 0            /usr/bin/joe         70        auto mode\n  1            /bin/ed             -100       manual mode\n  2            /bin/nano            40        manual mode\n  3            /usr/bin/jmacs       50        manual mode\n  4            /usr/bin/joe         70        manual mode\n  5            /usr/bin/jpico       50        manual mode\n  6            /usr/bin/jstar       50        manual mode\n  7            /usr/bin/rjoe        25        manual mode\n  8            /usr/bin/vim.basic   30        manual mode\n  9            /usr/bin/vim.tiny    15        manual mode\n\nPress &lt;enter&gt; to keep the current choice[*], or type selection number:\n</code></pre> <p>You can see that I changed the default to the <code>joe editor</code>. Joe can handle massive text files and I do a lot of password hash cracking so I need to open word lists that are 100's of MBs in length. Joe easily handles that but it uses non-standard keys for save, exit, etc.</p> <p>I suggest leaving <code>nano</code> as the default if you are new to Ubuntu.</p> <p>Open the sudoers file with visudo</p> <pre><code>sudo visudo\n</code></pre> <p>Scroll down till you see <code>Defaults        env_reset</code> and add <code>,pwfeedback</code>. The end result will be <code>Defaults        env_reset,pwfeedback</code>. Press <code>ctrl+s</code> to save the file and <code>ctrl+x</code> to exit.</p> <p>Now you will see Asterisks when typing a password:</p> <pre><code>$ sudo nmap -vv --script ssl-cert,ssl-enum-ciphers -p 443 192.168.10.253\n[sudo] password for mhubbard: ********\n</code></pre>"},{"location":"Ch01-Using-Ubuntu/#using-the-gui-files-application","title":"Using the GUI Files application","text":"<p>Files is the file manager for Gnome. The Gnome team is very creative with application names! The text editor is named \"Text Editor\", I kid you not. It makes Googling for tips a bit of a challenge.</p> <p>File used to be named <code>nautilus</code> and you can still launch the application from the terminal using <code>nautilus</code>. If you are having an issue with Files starting, for example you get a dialog saying \"Files is not responding\" with a Force quit and a Wait button you, go ahead and <code>Force Quit</code> it. Then open a terminal and type <code>nautilus</code>. If it fails to open you will get detailed output that should point you in the right direction to solve the problem.</p> <p>I am bringing this up because I installed a bunch of Gnome extensions a while back and one of them caused nautilus to hang. I got the logs from the terminal and and found this on article on bugs.launchpad.net. Running <code>systemctl mask --user --now tracker-miner-fs-3.service</code> fixed the issue with nautilus hanging. But searching with the word <code>files</code> would be a waste of time.</p>"},{"location":"Ch01-Using-Ubuntu/#two-options-i-always-use-in-files","title":"Two options I always use in Files","text":"<p>If you click on the hamburger menu, or press <code>ctrl+,</code> you will see <code>Preferences</code>. Two options are available that I always enable:</p> <ul> <li>Sort Folders Before Files</li> <li>Expandable Folders in List View</li> </ul> <p>The <code>Expandable Folders</code> option puts a <code>&gt;</code> symbol beside the folder name. Clicking the symbols expands the folder</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#tabs","title":"Tabs","text":"<p>Files works great and has a feature I love \u2013 Tabs! Once you get used to having tabs in your file manager it\u2019s hard to use Windows Explorer! Below is a screenshot with three tabs open. You can see how convenient this is. On a Mac, the Finder app has tabs. I don\u2019t know why Windows doesn\u2019t.</p> <p>Note</p> <p>From PCWorld</p> <p>Remember, tabs within File Explorer were not part of the Windows 11 2022 Update (22H2) \u2014 they were added as part of a later separate update. It\u2019s all part of the new \u201cMoments\u201d strategy that Microsoft has implemented to add new features at unexpected times.</p>"},{"location":"Ch01-Using-Ubuntu/#the-files-right-click-menu","title":"The Files right Click menu","text":"<p>Files has an extensive right click menu. Here are the options for the folder <code>Scripts</code>. You can see the <code>&gt;</code> symbol beside the folder name.</p> <p></p> <p>I use the <code>list</code> view to list files. Unlike with the <code>Icon</code> view, there isn't an open space to right click on is you want to create a nw folder or paste a file. But, you can right click just to the left of the list of folders to bring up the an options menu. See the next image:</p> <p></p> <p>The dialog has options for:</p> <ul> <li>New Folder - Create a new folder.</li> <li>New Document - Create a new document based off of a template.</li> <li>Open With... - This is an odd one. It allows you to select an application to - open a new folder with.</li> <li>Paste - If you have copied a file, a Paste menu will appear, otherwise it's greyed out.</li> <li>Paste as link - Similar to a <code>shortcut</code> on Windows.</li> <li>Select All - Selects all folders.</li> <li>Visible Columns - This opens a dialog where you can choose which columns are visible.</li> <li>Open in Terminal - Opens the Ubuntu Terminal in this folder.</li> <li>Open as Administrator - Open a new window running with root privileges.</li> <li>Properties - Shows the size of the folder and the permissions of the folder.</li> </ul>"},{"location":"Ch01-Using-Ubuntu/#new-document","title":"New Document","text":"<p>You can create templates in the <code>/home/$USER/templates</code> folder for the document types that you use on a regular basis. To create a template:</p> <ul> <li>Open the application you want to create a template for</li> <li>Set any options for the template or enter text if it's a document.</li> <li>Save the file in the <code>/home/$USER/templates</code> folder. For example, my template folder is <code>/home/mhubbard/templates</code></li> </ul> <p>I wanted a plain text template so I opened <code>Text Editor</code> and saved the blank document as New_Text_Document.txt in the templates folder. Now when I right click I can select <code>New_Txt_Document.txt</code> for a blank text file.</p> <p>I right clicked over the <code>New_Text_Document.txt</code> file and selected <code>Open With</code> then set VS Code as the <code>Always use for this type of file</code> option.</p> <p></p> <p>You can also create LibreOffice templates. The templates that end in <code>.ott</code> are for LibreOffice Writer and templates that end in <code>.ots</code> are for LibreOffice Calc.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#visible-columns","title":"Visible Columns","text":"<p>There are a lot of options for which columns to display:</p> <p></p> <p>I like the <code>detailed Type</code> option. Here is a screenshot of what is displayed:</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#open-as-administrator","title":"Open as Administrator","text":"<p>This one is very useful is you like to use GUI applications for files that require root privileges. You can also click your mouse into the address bar and type <code>admin:</code> to change the current window to root. You will be prompted for your password. Then you can open files as root.</p>"},{"location":"Ch01-Using-Ubuntu/#open-a-new-tab","title":"Open a new Tab","text":"<p>You can use the keyboard shortcut <code>ctrl+t</code> to create a new tab or click the <code>Hamburger menu</code> and select New Tab. This will open the current folder in a new tab.</p> <p>If your mouse has a center button, you can select a folder and click it to open the selected folder in a new tab! That is a big time saver.</p>"},{"location":"Ch01-Using-Ubuntu/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>Gnome <code>Files</code> has a lot of keyboard shortcuts. You click the hamburger menu and select <code>Keyboard Shortcuts</code> or press <code>ctrl+?</code> to open a dialog displaying the shortcuts. There are 3 pages of them!</p>"},{"location":"Ch01-Using-Ubuntu/#creating-archives","title":"Creating archives","text":"<p>From the right click menu you can select \"Compress...\" to create an archive. The <code>Compress...</code> menu supports:</p> <ul> <li>zip</li> <li>7zip (Must install 7z <code>sudo apt install 7zip</code>)</li> <li>tar.xz</li> </ul>"},{"location":"Ch01-Using-Ubuntu/#display-the-full-path-in-files","title":"Display the Full path in files","text":"<p>Sometimes you want to copy the full path to a file when working in the file manager. Hit <code>ctrl+l</code> (lowercase el) and the path will change to a format that you can copy.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#easily-preview-files-in-files","title":"Easily preview files in Files","text":"<p>One thing I missed from Windows Explorer was the preview pane. In Ubuntu running the Gnome desktop you can install \"Sushi\" to preview files. Then you just hit the space bar to preview a supported file format.</p> <p>To install GNOME Sushi using Ubuntu Software, open a terminal and paste the following code in:</p> <pre><code>sudo apt install gnome-sushi\n</code></pre> <p>For a more detailed description see How to Quickly Preview a File in Ubuntu's File Manager (Like \"Quick Look\" in macOS)</p>"},{"location":"Ch01-Using-Ubuntu/#resizerotate-images","title":"Resize/Rotate images","text":"<p>Gnome provides a package that adds resize and rotate capabilities for the Files application. I find this package very useful when creating documentation.</p> <p>To install the Nautilus Image Converter, open a terminal and paste the following code in:</p> <pre><code>sudo apt install nautilus-image-converter\n</code></pre> <p>Now when you right click on an image file, you will see an option to resize and an option to rotate.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#search","title":"Search","text":"<p>The completely new \"Files\" application in Gnome 46 (Ubuntu 24.04) is amazing. Here is the announcement from the project Introducing GNOME 46, \u201cKathmandu\u201d</p> <p>One of the best features in Files is the new search. Just click on the magnifying glass next to the address bar and enter some text. Unlike in Windows, you can enter text that is in the middle of the filename. In the screenshot below, I entered \"new\" and it found \"frequent-new.png\" in a directory one level down.</p> <p></p> <p>You can click on the funnel icon after you open search and filter on:</p> <ul> <li>Date</li> <li>Created<ul> <li>Last Modified</li> <li>Last Used</li> </ul> </li> <li>What - There are well over 100 file types to choose from</li> <li>Full Text or Filename</li> </ul> <p>Ubuntu has an article on using the new feature here: Search for files</p> <p>Ubuntu also has a Common Tasks page for Files</p>"},{"location":"Ch01-Using-Ubuntu/#custom-folder-icons-in-files","title":"Custom folder icons in Files","text":"<p>You can change the icon for a folder in the Files application. Right click on a folder, and select <code>Properties</code> from the menu. Look at the lower right of the folder icon and you will see pencil icon. Click the <code>Pencil</code> and a <code>Select Custom Icon</code> dialog will open. Navigate to a folder containing icons and select the one you want.</p> <p>Here is the icon I have set for the folder containing the files for this project:</p> <p></p> <p>Custom folder Icon - An article from OMG Ubuntu on setting custom folder icons</p>"},{"location":"Ch01-Using-Ubuntu/#i-have-a-red-lock-icon-on-a-file-or-folder","title":"I have a red Lock icon on a file or folder","text":"<p>Files, like every other GUI file manager, uses icons to represent files and folders. If the icon has a green check mark in it, you have full access to the file or folder.</p> <p>If the icon has a red lock in it, you don\u2019t have full permissions to the file or folder. Here is a screenshot of Files showing a file with a red x.</p> <p></p> <p>To take ownership of the file, open the terminal and enter:</p> <p><code>sudo chown mhubbard testsync.txt</code></p> <p>You will be prompted to enter your password.</p>"},{"location":"Ch01-Using-Ubuntu/#i-have-a-grey-x-on-a-file-or-folder","title":"I have a grey X on a file or folder","text":"<p>If the file has a grey square icon with an X in it the file is read only.</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#access-the-root-folder","title":"Access the root folder","text":"<p>To navigate to the root of the file system, click into the address bar, type <code>\\</code> and press <code>enter</code>. To create a bookmark for root press <code>ctrl+d</code> while in the root folder.</p> <p>Here is a screenshot of the bookmark</p> <p></p>"},{"location":"Ch01-Using-Ubuntu/#access-the-root-folder-as-admin","title":"Access the root folder as admin","text":"<p>In the <code>Files</code> application, click into the address bar, type <code>admin://</code> and press <code>enter</code>. You will be prompted for your user password.</p> <p>Here is a screenshot showing that we are in the folder as administrator.</p> <p></p> <p>As always, BE CAREFUL when you are the administrator!</p> <p>References for the Files app</p> <ul> <li>Meaning of files-folders with a red x</li> <li>10 tips for Gnome Files - A 10 minute video that is worth watching.</li> <li>Access Root Directory in Nautilus File Manager</li> </ul>"},{"location":"Ch01-Using-Ubuntu/#creating-a-bootable-usb-stick-from-an-iso-image","title":"Creating a bootable USB stick from an ISO image","text":"<p>You don't need a third-party tool to create a bootable USB stick on Linux if you don't mind using the terminal.</p>"},{"location":"Ch01-Using-Ubuntu/#use-dd-to-make-bootable-flash","title":"Use dd to make bootable flash","text":"<p>Note</p> <p>Ubuntu uses a system called \"snaps\" to sandbox applications. The drawback to snaps is that they mount every application using a \"squashfs\". I use the following alias so that I don't have to see all the applications.</p> <p><code>alias df=\"df -h --exclude=squashfs\"</code></p> <p>To add the alisa to bash:</p> <pre><code>gnome-text-editor ~/.bashrc\nor\ngnome-text-editor ~/.zshrc\n</code></pre> <p>Depending on what your shell is. The default shell is bash. I will go over changing the shell to zsh later on.</p> <p>If you create the alias you can use df -h instead of including the --exclude=squashfs option.</p> <ul> <li>run df -h --exclude=squashfs</li> <li>Insert the flash drive</li> <li>run df -h --exclude=squashfs</li> </ul> <p>Look for a new entry in the table. For example, on my laptop I have two flash drives mounted.</p> <pre><code>Filesystem      Size  Used Avail Use% Mounted on\ntmpfs           3.2G  4.0M  3.1G   1% /run\n/dev/nvme0n1p2  457G  392G   43G  91% /\ntmpfs            16G  219M   16G   2% /dev/shm\ntmpfs           5.0M   12K  5.0M   1% /run/lock\nefivarfs        384K   80K  300K  21% /sys/firmware/efi/efivars\n/dev/nvme0n1p1  513M   31M  483M   6% /boot/efi\ntmpfs           3.2G  1.3M  3.2G   1% /run/user/1000\n/dev/sdc1       7.5G  4.1G  3.5G  55% /media/mhubbard/C253-EE9A\n/dev/sdb1       116G  5.0G  111G   5% /media/mhubbard/LINUX-ARCHI\n</code></pre> <p>The two flash drives are /dev/sdc1 and /dev/sdb1. I can tell because they are listed as /media/mhubbard which is the mount point for the flash drives.</p> <p>In this example I am burning System Rescue to the flash drive. Parameters:</p> <ul> <li>if - input file name</li> <li>of - output filename</li> <li>bs - Block size to use</li> <li>status=progress - display progress</li> <li>&amp;&amp; sync - In Linux the \"&amp;&amp;\" means finish the first command then run the next command. In this case sync the writes to make sure it's ejected cleanly Enter the following:</li> </ul> <p><code>dd if=systemrescue.iso of=/dev/sdb bs=10M status=progress &amp;&amp; sync</code></p> <p>Be careful if you use this method</p> <p>dd is commonly referred to as \"disk destroyer\", meaning that it starts as soon as you hit enter, there are no \"Are you sure\" prompts.</p> <p>MAKE SURE THAT YOU HAVE THE OF (output file) SET TO THE FLASH DRIVE!!</p>"},{"location":"Ch01-Using-Ubuntu/#use-the-ubuntu-make-startup-disk-tool","title":"Use the Ubuntu \"Make Startup disk\" tool","text":"<p>You can use the built in \u201cStartup disk creator\u201d by tapping the super key (Windows Key) and typing <code>start</code>. You will see the Startup disk icon:</p> <p></p> <ul> <li>Pick the ISO image from the \u201cSource disc image (.iso)\u201d drop down</li> <li>Then select the USB stick from \"Disk to Use\"</li> <li>Click \u201cMake Startup Disk\u201d</li> <li>You will be prompted to select \"Yes or No\"</li> </ul> <p></p> <p>In this example, I am burning Kali Linux 2023.3 to the flash drive.</p>"},{"location":"Ch01-Using-Ubuntu/#use-qemu-to-test-a-startup-disk","title":"Use qemu to test a startup disk","text":"<p>You can install qemu and create a simple virtual machine to test a startup disk. I'm not going to cover that but these two articles will explain.</p> <ul> <li>How do I install qemu on Ubuntu 23.10?</li> <li>Using QEMU to quickly test an ISO or bootable USB drive</li> </ul>"},{"location":"Ch01-Using-Ubuntu/#working-with-the-linux-file-system","title":"Working with the Linux File System","text":"<p>If you have been a Windows user for a long time the hardest part of switching to Linux is the file system. There is no concept of drive letters in Linux. The Linux file system is based on the \u201cFile system Hierarchy Standard\u201d maintained by the Linux Foundation.</p> <p>The top of the Linux file system is called the root. All files and directories are referenced from the root, even if they are stored on different physical or virtual devices. That is so different from Windows that it will take some time to get comfortable with.</p> <p>Here is a link to a great tutorial on the Linux file system by Abhishek Prakash - Linux Directory Structure Explained for Beginners. His tutorial will get you up to speed on the Linux file system. Abhishek creates Linux tutorials and I recommend that you sign up for his newsletter. The subscribe button is at the top of the page.</p> <p>On Windows you have drive letters and the root of the file system is the \u201c\\\u201d character \u2013 The good old C:. But Linux/Mac, or any *NIX for that matter, doesn\u2019t use drive letters. The file system is usually described as a tree with root at the beginning. Root is shown in the file system as /. Everything is then displayed off the root. The \u201c/\u201d is another difference that will take a while to get used to. Unix/Linux/Mac use a forward slash instead of the backslash \u201c\\\u201d for file system commands. When you use a web browser, you use the forward slash for file commands \u2013 https://github.com/rikosintie for example.</p>"},{"location":"Ch01-Using-Ubuntu/#lsblk","title":"LSBLK","text":"<p>For a quick look at block devices (hard drives, thumb drives, nvme, etc.) on the system, you can use the \"list block devices\" command - lsblk. Here is an lsblk listing on my Dell laptop which has an m.2 NVME drive with the OS on it and 1TB SSD for data.</p> <pre><code>$ lsblk -e7\nNAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nsda           8:0    0 931.5G  0 disk /media/mhubbard/Data\nnvme0n1     259:0    0 465.8G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0 513.1M  0 part /boot/efi\n\u2514\u2500nvme0n1p2 259:2    0 465.3G  0 part /\n</code></pre> <p>Notice that I included -e7 on the end of the <code>lsblk</code> command. That is because Ubuntu uses \"snaps\" for a lot of applications and the show up as \"loop\" devices in lsblk. The -e means exclude and 7 is the number loop devices.</p> <p>So you can see that I have an NVME drive called nvme01n1. There are two partitions on the nvme drive:</p> <ul> <li>nvme01n1p1</li> <li>nvme01n1p2</li> </ul> <p>P1 is the boot partition and p2 has the operating system. Notice that nvme0n1p2 is type partition and mount is /. That means nvme0n1p2 is the root of the file system.</p> <p>There is also a \"block device\" named sda. This is a 1TB SATA SSD drive and it's mounted at /media/mhubbard/Data off the root.</p> <p></p> <p>The display needs a little explanation. For the disk labeled \u201cUbuntu\u201d it says 45.4 GB / 490.6 GB available. That actually means it\u2019s a 490.6GB drive with 45.4GB available.</p> <p>Once you get used to it, this seems more intuitive and easier to scale than the drive letter model used by Windows. You will also notice in the lsblk output that Linux/Mac, and again all *NIX systems, use the forward slash as a delimiter rather than the backslash.</p> <p>Linux has many \u201cls\u201d commands for listing things:</p> <ul> <li>lsblk \u2013 list block level devices like disk drives, thumb drives, etc.</li> <li>lspci \u2013 list the PCI bus devices on the system</li> <li>lsusb \u2013 list USB bus devices</li> <li>lsof \u2013 list open files</li> <li>lslogins \u2013 list logins</li> <li>lsmod \u2013 list the status of modules inserted into the kernel</li> </ul> <p>I will cover each of these a later in this section.</p> <p>To list the commands that start with \"ls\" you can type ls and press [tab]. This works with any Linux command. Just like in a Cisco switch, Linux has \"tab completion\" but it will also show you a list f all commands that match.</p> <pre><code>$ ls\nls           lsattr       lsb_release  LSCOLORS     lsdiff       lsinitramfs  lslocks      lsmem        lsns         lspci        lspgpot      lsusb\nlsa          lsblk        LS_COLORS    lscpu        lshw         lsipc        lslogins     lsmod        lsof         lspcmcia     lspower\n</code></pre>"},{"location":"Ch01-Using-Ubuntu/#lsusb","title":"LSUSB","text":"<p>Linux makes it easy to see what USB devices are connected, who the manufacturer is and what the Product ID (PID) and Vendor ID (VID) are.</p> <p>In this example, I have a USB to Serial adapter connected. It uses the Future Technology Devices International (FTDI) UART. It\u2019s connected to Bus 001, the Vendor ID is 0403, and the Product ID is 6001.</p> <pre><code>lsusb\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 002: ID 0c45:6a08 Microdia\nBus 001 Device 003: ID 8087:0aaa Intel Corp.\nBus 001 Device 006: ID 0403:6001 Future Technology Devices International, Ltd FT232 USB-Serial (UART) IC\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n</code></pre> <p>This is a very useful command once you make it part of your skill set. Anytime you connect a USB device you can quickly see who the manufacturer of the chipset is. This is especially useful if the device isn\u2019t working correctly and want to Google for some information.</p> <p>Another command that will help here is dmesg. This displays the system messages that have been logged. With the <code>lsusb</code> command above you can see a Future Technology USB-Serial adapter has been inserted.</p> <p>If I run:</p> <pre><code>sudo dmesg | grep FT232\n[83003.234941] usb 1-3: Product: FT232R USB UART\n[83003.242719] usb 1-3: Detected FT232RL\n[106493.653320] usb 1-3: Detected FT232RL\n</code></pre> <p>You can see that the system logged the insertion of the UART. To see what kernel module is loaded for the UART (Note \u2013 I am only showing the UART module. Other USB kernel modules were displayed):</p> <pre><code>lsmod | grep usb\nusbserial\n49152 3 ftdi_sio\n</code></pre> <p>In this example the Future Technology USB-Serial adapter is working correctly but you would do the same things to troubleshoot a device that wasn\u2019t working. The big difference over Windows is that support for a device in Linux is built into the kernel and loads when the device is inserted.</p> <p>There are cases where there is no support in the kernel and you will have to go to the manufacturer\u2019s site and download a kernel module (driver in Windows).</p> <p>The steps above will quickly let you know that the device isn\u2019t being discovered by Linux</p>"},{"location":"Ch01-Using-Ubuntu/#gnome-system-tool-gui","title":"Gnome System Tool (GUI)","text":"<p>Gnome includes a tool like \u201cservice.msc\u201d on Windows. You start it by tapping the super key and typing \u201cSystem\". Here is a screenshot of the \"Processes\" panel.</p> <p></p> <p>Like in Windows, you can right click and select an action:</p> <p></p> <p>Here is a screenshot of the \"Resources\" panel</p> <p></p> <p>Here is a screenshot of the \"File Systems\" panel</p> <p></p> <p>You can see that my laptop boots off a 500GB nvme disk and has a 1TB drive (sdb) for storage.</p>"},{"location":"Ch01-Using-Ubuntu/#working-with-services","title":"Working with services","text":"<p>Ubuntu uses an \"init system\" called systemd to start and control services. At first it seems confusing and a little difficult compared to  \u201cservices.msc\u201d on Windows. But like most things, after you do it a few times it\u2019s very logical and easy to use. Here is a cheat sheet for systemd.</p> Viewing Systemd Information systemctl list-dependencies Show a unit's dependencies systemctl list-sockets List sockets and what activates systemctl list-jobs View active systemd jobs systemctl list-unit-files See unit files and their states systemctl list-units Show if units are loaded/active systemctl get - default List default target (like run level) <p>Example</p> <pre><code>systemctl list-dependencies ufw\nufw.service\n\u25cf \u251c\u2500system.slice\n\u25cf \u251c\u2500local-fs.target\n\u25cf \u2502 \u251c\u2500-.mount\n\u25cf \u2502 \u251c\u2500boot-efi.mount\n\u25cb \u2502 \u251c\u2500systemd-fsck-root.service\n\u25cf \u2502 \u2514\u2500systemd-remount-fs.service\n\u25cf \u2514\u2500network-pre.target\n</code></pre> Working with Services systemctl stop service Stop a running service systemctl start service Start a service systemctl restart service Restart a running service systemctl reload service Restart a running service systemctl status service See if service is running/enabled systemctl enable service Enable a service to start on boot systemctl disable service Disable a service - won't start at boot systemctl -H host status network Run any systemctl command remotely <p>The difference between start and enable is that you use enable to set the service to start on boot. If you just run \"start\" the service will be started but on reboot the service will not be started.</p> <p>Example</p> <pre><code>systemctl status ufw\n\u25cf ufw.service - Uncomplicated firewall\n     Loaded: loaded (/lib/systemd/system/ufw.service; enabled; preset: enabled)\n     Active: active (exited) since Mon 2024-07-01 17:42:00 PDT; 1 day 4h ago\n       Docs: man:ufw(8)\n   Main PID: 1713 (code=exited, status=0/SUCCESS)\n        CPU: 89ms\n\nJul 01 17:41:59 1S1K-G5-5587 systemd[1]: Starting ufw.service - Uncomplicated firewall...\nJul 01 17:42:00 1S1K-G5-5587 systemd[1]: Finished ufw.service - Uncomplicated firewall.\n</code></pre> Changing System states systemctl reboot Reboot the system systemctl poweroff Power off the system systemctl emergency Put in emergency mode systemctl default Back to default target"},{"location":"Ch01-Using-Ubuntu/#viewing-log-messages","title":"Viewing Log Messages","text":"Viewing Log Messages journalctl Show all collected log messages journalctl -u network.services See network service messages journalctl -f Follow messages as they appear journalctl -k show only kernel messages journalctl -e Jump to the end <p>Example</p> <pre><code>journalctl -e | grep clam\nJul 02 19:00:01 1S1K-G5-5587 CRON[1218459]: (mhubbard) CMD (clamav sleep $((RANDOM % 42)); venv/bin/fangfrisch --conf /etc/fangfrisch.conf refresh)\nJul 02 19:10:01 1S1K-G5-5587 CRON[1226306]: (mhubbard) CMD (clamav sleep $((RANDOM % 42)); venv/bin/fangfrisch --conf /etc/fangfrisch.conf refresh)\nJul 02 19:20:01 1S1K-G5-5587 CRON[1234175]: (mhubbard) CMD (clamav sleep $((RANDOM % 42)); venv/bin/fangfrisch --conf /etc/fangfrisch.conf refresh)\nJul 02 19:30:01 1S1K-G5-5587 CRON[1242328]: (mhubbard) CMD (clamav sleep $((RANDOM % 42)); venv/bin/fangfrisch --conf /etc/fangfrisch.conf refresh)\n</code></pre>"},{"location":"Ch01-Using-Ubuntu/#locating-files-from-the-terminal","title":"Locating files from the terminal","text":"<p>The locate tool allows you to search everywhere on the file system. To install and update the database. Run the <code>sudo updatedb</code> command  periodically especially if you modify the configuration file.</p> <pre><code>sudo apt install mlocate\nsudo updatedb\n</code></pre> <p>To configure locate: These two articles have detailed information on customizing locate.     \u2022 configure locate - configure locate     \u2022 Linux locate command practical examples</p> <p>Example</p> <pre><code>locate apsum.py\n/home/mhubbard/Insync/michael.hubbard999@gmail.com/GoogleDrive/Python/Scripts/prod/apsum.py\n</code></pre>"},{"location":"Ch01-Using-Ubuntu/#drill-a-graphical-and-cli-tool-for-searching-files","title":"Drill - A graphical and CLI tool for searching files","text":"<p>From the website, \u201cSearch files without indexing, but clever crawling. It uses a different algorithm than most search tools and doesn't use a database like the the Ubuntu locate utility. It will search every mount point on the computer and is multithreaded so that it can search many at once. It will also use all available RAM to speed up the search.\u201d</p> <p>In the GUI, just enter any part of the filename that you can remember. It's not case sensitive and will find the string anywhere in the name. From the website, Download Drill, you can download the GUI (.deb) and the cli (CLI .deb). It is also available as an appimage if you don't want to install it.</p> <p>Example</p> <pre><code>drill-search-cli apsum.py\n/home/mhubbard/Insync/michael.hubbard999@gmail.com/GoogleDrive/Python/Scripts/prod/apsum.py\n</code></pre>"},{"location":"GUI-Tools/","title":"Introduction","text":"<p>The super power of Linux for a network engineer is how easy it is to create a vlan on an interface and tag it, all of the Unix tools that are built is such as <code>awk, grep, sed, sort</code> that allow you to quickly pull data out of files, change text inside files and print out results, and all the free open source projects for networking such as My Traceroute, and sipcalc.</p> <p>I did a refresh at a customer with 72 sites. They were replacing Cisco 3750s with HPE 2930s. There were a lot of IoT type devices like body cameras, door access controllers, surveillance cameras, etc. that they wanted verified after the cutover. I have a python script on my github that takes the output of <code>show ip arp</code> and creates a file with the mac address/ip address in a python dictionary. The output of that script is sent to a second script located here that uses the output of <code>show mac address interface g1/0/1</code> and the dictionary to build a table of the:</p> <ul> <li>vlan</li> <li>ip address</li> <li>MAC address</li> <li>port number</li> <li>manufacturer</li> </ul> <p>for each entry in the dictionary. Here is a sample of the table created:</p> <pre><code>Number of Entries: 184\n\nDevice Name: Cisco-6509\nVlan   IP Address       MAC Address       Type       Interface   Vendor\n-------------------------------------------------------------------------------\n  42   10.50.43.84      ac8b.a915.301e    dynamic    Gi3/41      Ubiquiti\n--------------------------------------------------------------------------------\n  42   10.50.43.43      0002.9908.53f0    dynamic    Gi3/43      Apex\n--------------------------------------------------------------------------------\n 900   10.254.50.106    000b.86b7.ac5f    dynamic    Gi3/44      ArubaaHe\n-------------------------------------------------------------------------------\n</code></pre> <p>I used grep and sort to pull out the devices that needed to be verified. Here is an example:</p> <pre><code>grep -E 'Uni|Axi|Aru|Chec|Sam|Sony|Hew|Honey|SHARP|Pronet|IB|Digiboar|Siemens|Tanta|Bosch|Videx|Industr|WatchG|Zebra|Conte' Cisco-6509-ports.txt | sort -b -k 5\n  35   10.50.35.15      80c1.6e91.99b1    dynamic    Gi3/25      HewlettP\n  35   10.50.35.23      aca8.8e51.3221    dynamic    Gi3/25      SHARP\n  40   10.50.40.96      0020.4afb.8f89    dynamic    Gi3/38      Pronet\n  42   10.50.42.198     24de.c6cc.5792    dynamic    Gi3/41      ArubaaHe\n  42   10.50.43.150     0020.4a0b.e40f    dynamic    Gi3/41      Pronet\n 900   10.254.50.106    000b.86b7.ac5f    dynamic    Gi3/44      ArubaaHe\n  40   10.50.40.17      84d4.7ecf.937e    dynamic    Gi3/47      ArubaaHe\n 905   10.254.50.37     001a.1e06.c0a8    dynamic    Gi4/35      ArubaaHe\n 906   10.254.50.37     001a.1e06.c0a8    dynamic    Gi4/36      ArubaaHe\n 901   10.254.50.106    000b.86b7.ac5f    dynamic    Gi4/37      ArubaaHe\n  42   10.50.43.251     0040.8420.700b    dynamic    Gi8/1       Honeywel\n  42   10.50.42.221     a08c.fd68.f4f5    dynamic    Gi9/10      HewlettP\n  42   10.50.42.71      001d.9608.7fe1    dynamic    Gi9/24      WatchGua\n  42   10.50.43.107     001d.9608.7fe5    dynamic    Gi9/24      WatchGua\n  42   10.50.43.113     001d.9608.7fe2    dynamic    Gi9/24      WatchGua\n  42   10.50.43.127     001d.9608.7fe0    dynamic    Gi9/24      WatchGua\n  42   10.50.43.138     001d.9608.7fe6    dynamic    Gi9/24      WatchGua\n  42   10.50.42.79      0030.6ec5.d6e6    dynamic    Gi9/36      HewlettP\n  42   10.50.43.159     7446.a050.ca72    dynamic    Gi9/36      HewlettP\n  42   10.50.43.78      c8d9.d2b6.dbdb    dynamic    Gi9/36      HewlettP\n  42   10.50.43.195     aca8.8e76.b63f    dynamic    Gi9/36      SHARP\n</code></pre> <p>Grep is used to search for the terms, the <code>|</code> means OR and then <code>sort -b -k 5</code>  means ignore leading blanks, sort by the 5th column.</p> <p>With 72 sites, an average of 4 switches per site, you can image how long it would have taken using Notepad to open 288 files and copy the data out? but with the grep/sort line it took seconds. And the interfaces are in order so it's easy to match the <code>running configuration</code> to the output.</p> <p>FreeCAD</p> <p>Draw.io</p> <p></p>"},{"location":"GUI-Tools/#the-ubuntu-app-store","title":"The Ubuntu App store","text":""},{"location":"GUI-Tools/#packetsender","title":"PacketSender","text":"<p>A cross platform open source tool. Available for Mac, Linux, Windows.</p> <p>Features Packet Sender can send and receive UDP, TCP, SSL, and DTLS on the ports of your choosing. It also has a built-in HTTP client for GET/POST requests and Panel Generation for the creation of complex control systems.</p> <p>Common Uses Packet Sender was designed to be very easy to use while still providing enough features for power users.</p> <p>\u2022 Test automation Using its command line tool or hotkeys</p> <p>\u2022 Testing network APIs Using the built-in UDP/TCP/SSL/DTLS clients</p> <p>\u2022 Malware analysis using the built-in UDP/TCP/SSL/DTLS servers</p> <p>\u2022 Panel Generation Create single-button panels that trigger a series of commands for control systems.</p> <p>\u2022 Testing HTTP Single-button GET/POST requests for control systems.</p> <p>\u2022 Intense Traffic Flood at a particular rate to stress-test devices</p> <p>\u2022 Testing network connectivity/firewalls by having 2 Packet Senders talk to each other</p> <p>\u2022 Tech support by sending customers a portable Packet Sender with pre-defined settings and packets</p> <p>\u2022 Security research Send SSL and then analyze the traffic log.</p> <p>Installation Instructions</p>"},{"location":"Introduction/","title":"Introduction","text":"<p> KEY TAKEAWAYS</p> <ul> <li>Ubuntu is Free, Open Source Software - FOSS!</li> <li>Ubuntu is published by Canonical, a private company with an estimated $175M in annual revenues</li> <li>Canonical Support, called Ubuntu Pro, is free for 5 personal devices</li> <li>Ubuntu Pro is enterprise class support similar to the Microsoft Enterprise Agreement</li> <li>Ubuntu has many flavors and dozens of specialized derivatives.</li> <li>Ubuntu will run on Intel/AMD x64 processors and many ARM processors such as Raspberry Pi, Odroid, etc.</li> <li>Ubuntu works great on VMware Workstation/Fusion, KVM, VirtualBox, and Gnome Boxes</li> <li>You can run almost all of the tools and applications in this guide on Windows 11 using WSL. There are tons of blogs and YouTube videos on installing WLS2 and Ubuntu.</li> </ul> <p>Ubuntu Today</p> <p>From Ubuntu's website, the first official Ubuntu release \u2014 Version 4.10, codenamed the \u2018Warty Warthog\u2019 \u2014 was launched in October 2004, and sparked dramatic global interest as thousands of free software enthusiasts and experts joined the Ubuntu community.</p> <p>The Ubuntu desktop is by far the world\u2019s most widely used Linux workstation platform, powering the work of engineers across the globe. Ubuntu Core sets the standard for tiny, transactional operating systems for highly secure connected devices. Ubuntu Server is the reference operating system for the OpenStack project, and a hugely popular guest OS on AWS, Azure and Google Cloud. Ubuntu is pre-installed on computers from Dell, HP, Asus, Lenovo and other global vendors.</p>"},{"location":"Introduction/#who-is-this-guide-written-for","title":"Who is this guide written for?","text":"<p>Any technical user running Microsoft Windows 10/11 who wants to try Linux! I used MS Windows from Windows 3.1 up until Windows 8 came out. At that time I had been using Linux for things like Nagios and the Asterisk VoIP system, but not on my laptop. Windows 8 convinced me to try macOS and Ubuntu!</p> <p>Once I started working with Python and studying for the Cisco NetDevOps certification, it became clear that Linux is a better choice for a technical user, whether they are a network engineer, administrator or developer. Tools like nmap work better under Linux (raw socket support), you have access to sophisticated terminal emulators like Terminator, Alacritty, Tilix, and different shells (what most people call \"the Terminal\"). This guide will show you how to switch the shell from BASH to ZSH in a later chapter.</p> <ul> <li>Network Engineers can use this guide to get started with Linux and then to customize their daily driver to fit the unique needs of a network engineer.</li> <li>Network Administrators will find Unix tools like grep, sed, awk, and arp-scan useful in their day to day operation. This guide discusses these tools in Working in the Terminal.</li> <li>Security Personnel will find a plethora of open source tools available for Linux. Many of these tools are discussed in the DNS chapter and in the networking tools chapter.</li> <li>A Curious student who wants to learn about Linux, Open Source, and NetDevOps.</li> </ul> <p>This guide is written assuming that you have skills in MS Windows, Putty, Network devices, and a desire to learn how Linux can make you a better, more efficient engineer.</p>"},{"location":"Introduction/#why-use-ubuntu","title":"Why use Ubuntu?","text":"<p>I helped a college student who was studying data science switch to Ubuntu recently. Our conversations had all been over text. I had the chance to meet him in person a month or so later and I asked him if he stuck with Ubuntu. His response was an enthusiastic Yes!</p> <p>I have been using Linux for quite a while, so his next comment caught me off guard. He said, \"I love how there are no ads and nothing pops up in the start menu.\" There were more comments about how \"clean\" the Ubuntu interface is. I hadn't realized how intrusive ads are on the Windows 10/11 home edition.</p>"},{"location":"Introduction/#but-i-need-microsoft-office","title":"But I need Microsoft office","text":"<p>There's a joke in the Linux community that \"Microsoft  Linux\". Back in the 1990s Steve Balmer said \"Linux is a cancer that attaches itself in an intellectual property sense to everything it touches.\" Now Microsoft supports Linux with the WSL in Windows, Linux servers in Azure and other ways.</p> <p>With Microsoft 365 it's not a problem to use Teams, Outlook, PowerPoint, Word, and Excel. All of the Microsoft Applications run in a browser. I use Edge when I\u2019m using Microsoft applications, but they also work in Chrome. For my needs they are great.</p> <p>Here is an image of the Microsoft 365 launcher in Linux:</p> <p></p> <p>I don't have a license for Visio, I use the web based tool Excalidraw to create network diagrams. It's not as full featured as Visio but I know three Solutions Architects that have switched because it works on any OS and customers don't need Visio Viewers. In the Tools section of the guide I will show you an Flatpak application called Draw.io that doesn't need an Internet connection to work.</p>"},{"location":"Introduction/#libreoffice","title":"LibreOffice","text":"<p>If you prefer a real application, LibreOffice is better than Microsoft office in my opinion. I have had zero issues sharing LibreOffice documents with Microsoft Office users. I loved Microsoft Office up until Office 2003, but not as much after that! I can say that I love LibreOffice! I create a lot of Avery labels for switch boxes and the mail merge between different LibreWriter and LibreCalc is much easier than in Word/Excel!</p> <p>LibreOffice is a Free open source Software (FOSS) project and is included in the full install of Ubuntu. I have met a few of the LibreOffice team at the Southern California Linux Expo and they are a great group of Geeks! The project releases updates to LibreOffice on a regular basis.</p>"},{"location":"Introduction/#as-a-network-engineer-it-rocks","title":"As a Network Engineer it Rocks","text":"<p>Network Engineering is moving to a NetDevOps model and away from the CLI. This means using Python, Ansible, Git and other DevOps tools. Ubuntu is the OS that Cisco recommends for the DevNet certifications. In fact, Cisco is so strong on Ubuntu that they released an Ubuntu image for the DevNet Expert course. There is no reason not to use it for learning Linux. It's available as an OVA for VMWare Workstation and a QCOW2 for Linux.</p> <p>Download it here: Cisco Certified DevNet Expert (v1.0) Equipment and Software List</p> <p>Here is an image from the Cisco DevNet Associate course. You can see the emphasis on coding and automation.</p> <p></p>"},{"location":"Introduction/#open-source-software-and-the-community","title":"Open source software and the community","text":"<p>Ubuntu is a Linux distribution published by Canonical in the UK. There are both desktop and server versions available on the Canonical site. If you are using VMware ESXi in your home lab, I recommend downloading Ubuntu server and spinning up a VM. It's free and the best way to learn is to get some hands on time with it. I have Ubuntu server 24.04 running on ESXi and have various networking tools installed.</p> <p>If you have VMware workstation, Virtualbox, or Gnome Boxes running on your laptop, you can download/install Ubuntu Desktop and test it out for free.</p> <p>Ubuntu is Open source software, meaning that the source code is available on the Canonical website. This concept might be difficult to understand if you're used to proprietary software like Microsoft Windows! You will hear Open source software called 'Free, Open Source Software' (FOSS) or Libre Software. In this case the 'free' refers to freedom, not zero cost. Some open source projects offer support agreements or other services that require payment.</p> <p>What I love about Ubuntu is the \"Open Source Software\" community. It is a large community of developers, users, and engineers who love creating software, hardware, and sharing it. Some examples of Open Source Software include:</p> <ul> <li>FireFox</li> <li>MariaDB</li> <li>OpenSSH</li> <li>OpenSSL</li> <li>Apache</li> <li>Nmap</li> <li>KeePassXC</li> <li>Python</li> </ul> <p>Just to name a few!</p>"},{"location":"Introduction/#open-source-in-cisco-products","title":"Open Source In Cisco Products","text":"<p>From Cisco's website: Cisco values the open source community as an essential resource and partner in innovation. Here you can find information on the open source used in Cisco products.</p> <p>Cisco is a Leader in Open Source Innovation</p> <p>Open source is changing the technology industry and Cisco is a dedicated partner in that innovation. Cisco has been participating in open source development for nearly 3 decades, including founding projects like OpenDaylight, FD.io, VPP, SNAS, and OpenH264, and contributing to projects like OPNFV, Kubernetes, OpenStack, Ansible, Chef, Puppet, Maven, and countless more.</p> <p>Cisco uses many open-source tools, with extensive documentation available at the link above.</p> <p>Why am I bringing this up? Because when I started using Linux I just saw it as a tool. But now that I am a few years in, I see that it is the foundation of modern society. Almost every switch, router, firewall, public web server, surveillance camera, and IoT device runs on Linux and uses Open Source software. Once you start using Open Source software you really feel like part of the community.</p>"},{"location":"Introduction/#netdevops-certifications","title":"NetDevOps Certifications","text":"<p>Cisco and Juniper both have certifications for NetDevOps. They both have a substantial amount of free training material available. I have a repository with information on each program. If you are interested in working on either certification, the repositories can be found here:</p> <ul> <li>Cisco DevNetAssoc</li> <li>Juniper DevOps</li> </ul>"},{"location":"Introduction/#linux-certifications","title":"Linux Certifications","text":"<p>The Linux Professional Institute (LPI) offers several different certifications if you are interested. Linux Essentials is a good place to start. It is more about the Open Source philosophy and the history of Linux than a deep technical certification. LPI has free certification materials on its site. If you attend one of the many Linux expos around the country, the LPI may be there and have the exams half off.</p> <p>Linux Events</p> <ul> <li>Southern California Linux Expo - The largest event in the US. It's held in early March in. Pasadena, California</li> <li>Linux Fest NorthWest - Held in April at the Bellingham, Washington Technical College</li> <li>Southeast Linux Fest - It's held in June in Charlotte, North Carolina.</li> <li>Fosdem - Held in April in Brussels.</li> </ul>"},{"location":"Introduction/#installing-ubuntu","title":"Installing Ubuntu","text":"<p>This document is meant to get you up to speed with Ubuntu quickly. The first question is should I just spin up a virtual machine or use bare metal? I used Linux for a few years as a VM before I bought dedicated hardware.</p> <p>The advantage of using a VM is that if you damage it or decide for any reason it\u2019s not the right distribution you can just delete it and try another one. A drawback of using a VM is that you will have to manually map usb devices from the host to the VM. This isn't a big deal, it just makes troubleshooting USB devices a bit more complicated.</p> <p>My suggestion, if you have never touched Linux, is to install Ubuntu as a VM and get some experience with it. You won\u2019t have to spend any money, Ubuntu is free, although I usually donate $10 when I download it to install on a fresh machine, and you can run any of the tools in this book.</p> <p>I have Ubuntu running on a System76 Gazelle from 2016 and a Dell G5 5587 laptop from 2018. I did this because I wanted to get my Linux certifications and I felt that I needed to be running Linux on my daily driver to learn. Using a VM can perform almost anything the bare metal can. However, when I encountered an issue,  I often just shut it down and returned to Windows rather than solving it. Running on bare metal removed the temptation to do that!</p> <p>There are a lot of good tutorials on installing Ubuntu available on the Internet, so I am not going to cover it here. It is actually very easy, pretty much click, click, next, reboot! This Youtube video How to Install Ubuntu 24.04 Desktop: Complete Beginner's Guide is a great guide to installing Ubuntu 24.04.</p> <p>The site linux config has a lot of great Ubuntu tutorials. Here is a link to a several tutorials on installing/configuring 24.04 tools \u2013 Install Ubuntu 24.04 tools. If you want to install Ubuntu 24.04 on bare metal, the Lenovo T480 or T490 are good choices. They can be found for under $300 on ebay in good condition and have hardware that is certified on Ubuntu. You can also use the Ubuntu Search Ubuntu certified hardware site to verify that the hardware you want to use will be well-supported on Ubuntu.</p>"},{"location":"Introduction/#ubuntu-release-types","title":"Ubuntu Release Types","text":"<p>Ubuntu is released on a regular cadence. There are two types of releases:</p> <ul> <li>LTS releases - Every two years on even years. So 22.04 is the long-term release from 2022. The current LTS is 24.04</li> <li>Interim Releases - Released in October and April. So 22.10, 23.04, and 23.10 are interim releases after the LTS 22.04.</li> </ul> <p>The LTS releases are rock solid, but they don't get new features or the latest kernel versions. If you put Ubuntu on bare metal and use it as your daily driver, I recommend that you use an LTS release.</p> <p>In this guide, I am going to document the tools that I found useful in the transition to Linux for network engineering tasks.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/","title":"Join Ubuntu 24.04 desktop to AD","text":"<p> KEY TAKEAWAYS</p> <ul> <li>It's surprising easy to join Ubuntu 24.04 to Active Directory</li> <li>All of the packages needed are in the Ubuntu package manager</li> <li>Ubuntu has several tools for managing the AD connection</li> </ul> <p>Many companies will require that all laptops or Virtual Machines be connected to Active Directory. That is no problem with Ubuntu 24.04 as Canonical provides the packages needed.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#install-the-packages-needed-to-join-ad","title":"Install the packages needed to join AD","text":"<p>Whether it's a laptop or VM it should be fully updated before starting the installation of the Active Directory packages. Use the following command to update and install the packages:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\nsudo apt install sssd-ad sssd-tools realmd adcli\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#review-the-installed-packages","title":"Review the installed packages","text":"<p>This is optional but I wanted to show you how to use <code>apt</code> to display versions</p> <pre><code>mhubbard@z420VM-2404:~$ apt policy sssd-ad sssd-tools realmd adcli\nsssd-ad:\n  Installed: 2.9.4-1.1ubuntu6\n  Candidate: 2.9.4-1.1ubuntu6\n  Version table:\n *** 2.9.4-1.1ubuntu6 500\n        500 http://us.archive.ubuntu.com/ubuntu noble/main amd64 Packages\n        100 /var/lib/dpkg/status\nsssd-tools:\n  Installed: 2.9.4-1.1ubuntu6\n  Candidate: 2.9.4-1.1ubuntu6\n  Version table:\n *** 2.9.4-1.1ubuntu6 500\n        500 http://us.archive.ubuntu.com/ubuntu noble/main amd64 Packages\n        100 /var/lib/dpkg/status\nrealmd:\n  Installed: 0.17.1-3build2\n  Candidate: 0.17.1-3build2\n  Version table:\n *** 0.17.1-3build2 500\n        500 http://us.archive.ubuntu.com/ubuntu noble/main amd64 Packages\n        100 /var/lib/dpkg/status\nadcli:\n  Installed: 0.9.2-1ubuntu2\n  Candidate: 0.9.2-1ubuntu2\n  Version table:\n *** 0.9.2-1ubuntu2 500\n        500 http://us.archive.ubuntu.com/ubuntu noble/main amd64 Packages\n        100 /var/lib/dpkg/status\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#prerequisites-before-joining-ad","title":"Prerequisites before joining AD","text":"<ul> <li>A working Active Directory domain is available</li> <li>You have access to the credentials to join a machine to that domain</li> <li>The DC is acting as an authoritative DNS server for the domain.</li> <li>The primary DNS resolver on the laptop points to a DC (check with resolvectl status).</li> <li>System time is correct and in sync with the DC, maintained via a service like chrony or ntp.</li> <li>The domain used in this example is pu.pri.</li> <li>The laptop's hostname is z420VM-2404.</li> </ul>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#check-the-current-host-configuration","title":"Check the current host configuration","text":"<pre><code>mhubbard@z420VM-2404:~$ hostnamectl\n Static hostname: z420VM-2404.pu.pri\n       Icon name: computer-vm\n         Chassis: vm \ud83d\uddb4\n      Machine ID: c7fecbdab8ed4fdba09c3833e51fc616\n         Boot ID: e71c80c79fb54e2b9e88ea1c77e005a9\n  Virtualization: vmware\nOperating System: Ubuntu 24.04 LTS\n          Kernel: Linux 6.8.0-31-generic\n    Architecture: x86-64\n Hardware Vendor: VMware, Inc.\n  Hardware Model: VMware Virtual Platform\nFirmware Version: 6.00\n   Firmware Date: Thu 2020-11-12\n    Firmware Age: 3y 6month 2w 3d\n</code></pre> <p>Notice that the fully qualified DNS domain <code>pu.pri</code> is appended to the hostname. That is the domain we will join. For an Ubuntu 24.04 machine to join AD it must have the hostname setup correctly.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#if-the-host-needs-to-have-the-fqdn-configured","title":"If the host needs to have the FQDN configured","text":"<pre><code>mhubbard@z420VM-2404:~$ sudo hostnamectl set-hostname z420VM-2404.pu.pri\nmhubbard@z420VM-2404:~$ hostname\nz420VM-2404.pu.pri\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#verify-that-a-dc-19216810222-is-the-dns-resolver","title":"Verify that a DC (192.168.10.222) is the DNS resolver","text":"<pre><code>mhubbard@z420VM-2404:~$ resolvectl status\nGlobal\n         Protocols: -LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported\n  resolv.conf mode: stub\n\nLink 2 (ens33)\n    Current Scopes: DNS\n         Protocols: +DefaultRoute -LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported\nCurrent DNS Server: 192.168.10.222\n       DNS Servers: 192.168.10.222\n        DNS Domain: pu.pri\n</code></pre> <p>Note</p> <p>To clear the DNS cache use <code>resolvectl flush-caches</code></p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#verify-that-the-host-can-be-found-in-dns","title":"Verify that the host can be found in DNS","text":"<p>The <code>host</code> command with a domain name as the parameter will return DNS information about the domain name.</p> <pre><code>host pu.pri\npu.pri has address 192.168.10.222\npu.pri has IPv6 address fd24:42b2:12ce:0:a9da:b612:7d4c:7683\n</code></pre> <p>Now we know at there is a DC is at <code>192.168.10.222</code>.</p> <p>The <code>host</code> command with a hostname will print out the hostname and ip address. Then we use the <code>host</code> command with the ip address to look up the host in DNS.</p> <pre><code>mhubbard@z420VM-2404:~$ host z420VM-2404\nz420VM-2404.pu.pri has address 192.168.10.105\nmhubbard@z420VM-2404:~$ host 192.168.10.105\n105.10.168.192.in-addr.arpa domain name pointer z420VM-2404.pu.pri.\n</code></pre> <p>The <code>host</code> command may return 127.0.1.1 as the ip address. This will still work in the second step. The host command returned the pu.pri domain so the host can be found in the DNS zone. There are two reasons I did it this way instead of just looking at the terminal prompt and pinging that name with the domain added on:</p> <ul> <li>You just learned about the host command. You can use <code>man host</code> to learn more.</li> <li>DNS is critical to AD and this method makes the DNS properties more obvious.</li> </ul>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#use-dig-to-verify-that-dns-works","title":"Use dig to verify that DNS works","text":"<p>If the <code>host</code> command returns 127.0.1.1 as the ip address then use the <code>ip address</code> command to find the network ip address. In this example the <code>@</code> is used to pick a specific DNS server. If you don't use it the host will use the loopback IP address.</p> <pre><code>mhubbard@z420VM-2404:~$ dig @192.168.10.222 -x 192.168.10.105\n\n; &lt;&lt;&gt;&gt; DiG 9.18.28-0ubuntu0.24.04.1-Ubuntu &lt;&lt;&gt;&gt; @192.168.10.222 -x 192.168.10.105\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24053\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4000\n;; QUESTION SECTION:\n;105.10.168.192.in-addr.arpa.    IN    PTR\n\n;; ANSWER SECTION:\n105.10.168.192.in-addr.arpa. 3600 IN    PTR    z420VM-2404.pu.pri.\n\n;; Query time: 0 msec\n;; SERVER: 192.168.10.222#53(192.168.10.222) (UDP)\n;; WHEN: Thu Aug 15 17:40:12 PDT 2024\n;; MSG SIZE  rcvd: 88\n</code></pre> <p>You can also use grep to just pull out the hostname section:</p> <pre><code>dig @192.168.10.222 -x 192.168.10.105 | grep -B 2 z420\n\n;; ANSWER SECTION:\n105.10.168.192.in-addr.arpa. 3600 IN    PTR    z420VM-2404.pu.pri.\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#use-dig-with-the-hostname","title":"Use dig with the hostname","text":"<pre><code>mhubbard@z420VM-2404:~$ dig @192.168.10.222 z420VM-2404.pu.pri\n\n; &lt;&lt;&gt;&gt; DiG 9.18.28-0ubuntu0.24.04.1-Ubuntu &lt;&lt;&gt;&gt; @192.168.10.222 z420VM-2404.pu.pri\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 3444\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4000\n;; QUESTION SECTION:\n;z420VM-2404.pu.pri.            IN    A\n\n;; ANSWER SECTION:\nz420VM-2404.pu.pri.    3600     IN    A    192.168.10.105\n\n;; Query time: 0 msec\n;; SERVER: 192.168.10.222#53(192.168.10.222) (UDP)\n;; WHEN: Thu Aug 15 17:45:48 PDT 2024\n;; MSG SIZE  rcvd: 63\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#troubleshooting-if-using-dhcp","title":"Troubleshooting If using DHCP","text":"<p>It's critical that the host got a dhcp assigned address and that DHCP registered a DNS A record. If the above fails you have to fix it before proceeding.</p> <p>I setup Windows server DHCP to always register a DNS A record and created an AD account for it to use.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#release-and-renew-the-lease","title":"Release and renew the lease","text":"<p>Ubuntu 24.04 has transitioned a lot of networking services to networkd from network manager. Because of this dhclient isn't installed. Run the following commands to install it and release/renew the lease:</p> <pre><code>sudo apt install isc-dhcp-client\nsudo dhclient -r ens33\nsudo dhclient -v ens33\n</code></pre> <p>The <code>-r</code> releases and the dhclient with no options renews. The <code>-v</code> means verbose and I like to use it to get more detail.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#troubleshooting-if-using-static-ip","title":"Troubleshooting If using static IP","text":"<p>There is no automatic way for the DNS server to register your laptop if you are using a static IP address. You will have to manually create the DNS entry. I highly recommend that you create the forward and reverse DNS entry.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-the-ntp-server","title":"Display the NTP server","text":"<pre><code>cat /etc/systemd/timesyncd.conf\n</code></pre> <p>If you see <code>#NTP</code> then you will need to edit the <code>/etc/systemd/timesyncd.conf</code> file.</p> <pre><code>sudo gnome-text-editor /etc/systemd/timesyncd.conf\n</code></pre> <p>Set the DC as the NTP server</p> <pre><code>[Time]\nNTP=192.168.10.222\nFallbackNTP=time-b.nist.gov\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#restart-the-daemons","title":"Restart the daemons","text":"<pre><code>systemctl daemon-reload\n</code></pre> <p>Verify that the time on the DC matches the time on the Ubuntu box</p> <p>On the DC</p> <ul> <li>Open a cmd window</li> </ul> <pre><code>C:\\Windows\\system32&gt;time\nThe current time is: 14:57:02.37\n</code></pre> <p>On the Ubuntu box</p> <pre><code>mhubbard@z420VM-2404:~$ timedatectl status\n               Local time: Thu 2024-05-30 14:58:08 PDT\n           Universal time: Thu 2024-05-30 21:58:08 UTC\n                 RTC time: Thu 2024-05-30 21:58:08\n                Time zone: America/Los_Angeles (PDT, -0700)\nSystem clock synchronized: yes\n              NTP service: active\n          RTC in local TZ: no\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#verify-that-the-host-can-find-ad","title":"Verify that the host can find AD","text":"<pre><code>mhubbard@z420VM-2404:~$ realm -v discover pu.pri\n * Resolving: _ldap._tcp.pu.pri\n * Performing LDAP DSE lookup on: 192.168.10.222\n * Successfully discovered: pu.pri\npu.pri\n  type: kerberos\n  realm-name: PU.PRI\n  domain-name: pu.pri\n  configured: no\n  server-software: active-directory\n  client-software: sssd\n  required-package: sssd-tools\n  required-package: sssd\n  required-package: libnss-sss\n  required-package: libpam-sss\n  required-package: adcli\n  required-package: samba-common-bin\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#create-the-kerberos-file","title":"Create the Kerberos file","text":"<pre><code>mhubbard@z420VM-2404:~$ sudo touch /etc/krb5.conf\n\nmhubbard@z420VM-2404:~$ sudo gnome-text-editor /etc/krb5.conf\n[libdefaults]\n    default_realm = PU.PRI\n    rdns = false\n\nmhubbard@z420VM-2404:~$ sudo cat /etc/krb5.conf\n[libdefaults]\n    default_realm = PU.PRI\n    rdns = false\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#verify-that-the-dc-is-discoverable","title":"Verify that the DC is discoverable","text":"<pre><code>mhubbard@z420VM-2404:~$ realm discover randc02.pu.pri\npu.pri\n  type: kerberos\n  realm-name: PU.PRI\n  domain-name: pu.pri\n  configured: no\n  server-software: active-directory\n  client-software: sssd\n  required-package: sssd-tools\n  required-package: sssd\n  required-package: libnss-sss\n  required-package: libpam-sss\n  required-package: adcli\n  required-package: samba-common-bin\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#join-the-domain","title":"Join the Domain","text":"<pre><code>mhubbard@z420VM-2404:~$ realm join randc02.pu.pri\nPassword for Administrator:\n\nmhubbard@z420VM-2404:~$ realm discover randc02.pu.pri\npu.pri\n  type: kerberos\n  realm-name: PU.PRI\n  domain-name: pu.pri\n  configured: kerberos-member\n  server-software: active-directory\n  client-software: sssd\n  required-package: sssd-tools\n  required-package: sssd\n  required-package: libnss-sss\n  required-package: libpam-sss\n  required-package: adcli\n  required-package: samba-common-bin\n  login-formats: %U@pu.pri\n  login-policy: allow-realm-logins\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-the-sssdconf-file","title":"Display the sssd.conf file","text":"<pre><code>mhubbard@z420VM-2404:~$ sudo ls -l /etc/sssd\ntotal 8\ndrwxr-xr-x 2 root root 4096 Apr 16 02:55 conf.d\n-rw------- 1 root root  414 May 30 15:57 sssd.conf\n\nmhubbard@z420VM-2404:~$ sudo cat /etc/sssd/sssd.conf\n\n[sssd]\ndomains = pu.pri\nconfig_file_version = 2\nservices = nss, pam\n\n[domain/pu.pri]\ndefault_shell = /bin/bash\nad_server = randc02.pu.pri\nkrb5_store_password_if_offline = True\ncache_credentials = True\nkrb5_realm = PU.PRI\nrealmd_tags = manages-system joined-with-adcli\nid_provider = ad\nfallback_homedir = /home/%u@%d\nad_domain = pu.pri\nuse_fully_qualified_names = True\nldap_id_mapping = True\naccess_provider = ad\n</code></pre> <p>Set the correct file permissions</p> <p>Something very important to remember is that this file must have permissions 0600 and ownership root:root, or else SSSD won\u2019t start!</p> <p>Some key things from this config file:</p> <ul> <li>cache_credentials: This allows logins when the AD server is unreachable</li> <li>fallback_homedir: The home directory. By default, <code>/home/&lt;user&gt;@&lt;domain&gt;</code>. For example, the AD user john will have a home directory of <code>/home/john@pu.pri</code>.</li> <li>use_fully_qualified_names: Users will be of the form user@domain, not just user. This should only be changed if you are certain no other domains will ever join the AD forest, via one of the several possible trust relationships.</li> </ul>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-the-pam-configuration-file","title":"Display the PAM configuration file","text":"<p>In Linux Pluggable Authentication Modules (PAM) are used to extend authentication to new services.</p> <pre><code>mhubbard@z420VM-2404:~$ sudo cat /etc/pam.d/common-session\n#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of interactive sessions.\n#\n# As of pam 1.0.1-6, this file is managed by pam-auth-update by default.\n# To take advantage of this, it is recommended that you configure any\n# local modules either before or after the default block, and use\n# pam-auth-update to manage selection of other modules.  See\n# pam-auth-update(8) for details.\n\n# here are the per-package modules (the \"Primary\" block)\nsession [default=1]         pam_permit.so\n# here's the fallback if no module succeeds\nsession requisite           pam_deny.so\n# prime the stack with a positive return value if there isn't one already;\n# this avoids us returning an error just because nothing sets a success code\n# since the modules above will each just jump around\nsession required            pam_permit.so\n# The pam_umask module will set the umask according to the system default in\n# /etc/login.defs and user settings, solving the problem of different\n# umask settings with different shells, display managers, remote sessions etc.\n# See \"man pam_umask\".\nsession optional            pam_umask.so\n# and here are more per-package modules (the \"Additional\" block)\nsession required    pam_unix.so\nsession optional    pam_sss.so\nsession optional    pam_systemd.so\n# end of pam-auth-update config\nmhubbard@z420VM-2404:~$ sudo pam-auth-update --enable mkhomedir\nmhubbard@z420VM-2404:~$ sudo cat /etc/pam.d/common-session\n#\n# /etc/pam.d/common-session - session-related modules common to all services\n#\n# This file is included from other service-specific PAM config files,\n# and should contain a list of modules that define tasks to be performed\n# at the start and end of interactive sessions.\n#\n# As of pam 1.0.1-6, this file is managed by pam-auth-update by default.\n# To take advantage of this, it is recommended that you configure any\n# local modules either before or after the default block, and use\n# pam-auth-update to manage selection of other modules.  See\n# pam-auth-update(8) for details.\n\n# here are the per-package modules (the \"Primary\" block)\nsession [default=1]          pam_permit.so\n# here's the fallback if no module succeeds\nsession requisite            pam_deny.so\n# prime the stack with a positive return value if there isn't one already;\n# this avoids us returning an error just because nothing sets a success code\n# since the modules above will each just jump around\nsession required             pam_permit.so\n# The pam_umask module will set the umask according to the system default in\n# /etc/login.defs and user settings, solving the problem of different\n# umask settings with different shells, display managers, remote sessions etc.\n# See \"man pam_umask\".\nsession optional             pam_umask.so\n# and here are more per-package modules (the \"Additional\" block)\nsession required    pam_unix.so\nsession optional    pam_sss.so\nsession optional    pam_systemd.so\nsession optional    pam_mkhomedir.so\n# end of pam-auth-update config\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-the-realm","title":"Display the realm","text":"<pre><code>mhubbard@z420VM-2404:~$ realm list\npu.pri\n  type: kerberos\n  realm-name: PU.PRI\n  domain-name: pu.pri\n  configured: kerberos-member\n  server-software: active-directory\n  client-software: sssd\n  required-package: sssd-tools\n  required-package: sssd\n  required-package: libnss-sss\n  required-package: libpam-sss\n  required-package: adcli\n  required-package: samba-common-bin\n  login-formats: %U@pu.pri\n  login-policy: allow-realm-logins\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-ad-status","title":"Display AD Status","text":"<pre><code>mhubbard@z420VM-2404:~$ sudo sssctl domain-status pu.pri\nOnline status: Online\n\nActive servers:\nAD Global Catalog: not connected\nAD Domain Controller: randc02.pu.pri\n\nDiscovered AD Global Catalog servers:\n- randc02.pu.pri\n\nDiscovered AD Domain Controller servers:\n- randc02.pu.pri\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#log-into-the-domain","title":"Log into the domain","text":"<p>The format at the login screen is <code>username@domain</code>. In this example, my username is mhubbard and the domain is pu.pri so the login will be <code>mhubbard@pu.pri</code>. Remember that the password is the Active Directory password.</p> <p></p> <p>You will see a message that the /home/username@domain directory is being created. If we open a terminal and run:</p> <pre><code>ls -l /home/\ntotal 12\ndrwxr-x--- 17 mhubbard        mhubbard            4096 Aug 15 21:57  mhubbard/\ndrwxr-x--- 16 mhubbard@pu.pri domain users@pu.pri 4096 Aug 16 13:28 'mhubbard@pu.pri'/\n</code></pre> <p>you can see the <code>mhubbard@pu.pri</code> home directory, the owner is <code>mhubbard@pu.pri</code>and group membership is <code>domain users@pu.pri</code>.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#add-the-ad-user-to-the-sudoers-group","title":"Add the AD user to the sudoers group","text":"<p>If your company policy allows it you should add your new AD account to the sudoers group. Log in with your local account (Assuming it has sudo rights) and run the following command:</p> <pre><code>sudo usermod -aG sudo mhubbard@pu.pri\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#connect-to-a-windows-share","title":"Connect to a windows share","text":"<p>Ubuntu uses the SAMBA protocols to join and work with a Windows domain. Once the laptop is joined you can easily access Windows share resources. Open the <code>Files</code> application and click on <code>+ Other Locations</code> at the bottom of the left window. You will see a <code>connect to server</code> message and a <code>Connect</code> button.</p> <p>Since we are using the SAMBA protocol, the address will start with <code>smb://</code> and then the server name (IP or FQDN) and a share name. In the image below I an connecting to the DC (randc02.pru.pri) and a share named <code>tftp-root</code>.</p> <p></p> <p>Click on <code>Connect</code> and the share will be mounted and files will open a new window with the share displayed:</p> <p></p> <p>If you want to work with the files in the terminal the easiest way is to right click in the share window and select <code>Open in Terminal</code>:</p> <p></p> <p>The path is gnarly!</p> <pre><code>/run/user/1242401104/gvfs/smb-share:server=randc02.pu.pri,share=tftp-root$ ls -l\ntotal 225895\n-rwx------ 1 mhubbard@pu.pri domain users@pu.pri 16979365 Aug 17 23:21 WB_16_08_0002.swi\n-rwx------ 1 mhubbard@pu.pri domain users@pu.pri 16977864 Aug 17 23:21 WB_16_08_0003.swi\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#create-a-mount-point","title":"Create a mount point","text":"<p>If you work mostly from the terminal it's probably better to create a mount point and mount the share:</p> <pre><code>sudo mkdir /mnt/tftp-root\n\nsudo mount -t cifs -o username=mhubbard@pu.pri,password=Sup3rS3cr3t //192.168.10.222/tftp-root /mnt/tftp-root/\n\ncd /mnt/tftp-root/\nmhubbard@pu.pri@z420-2404:/mnt/tftp-root$ l -l\ntotal 225912\n-rwxr-xr-x 1 root root 16979365 Aug 17 23:21 WB_16_08_0002.swi*\n-rwxr-xr-x 1 root root 16977864 Aug 17 23:21 WB_16_08_0003.swi*\n</code></pre> <p>Then when you are finished, unmount the shared filesystem:</p> <pre><code>sudo umount -l /mnt/tftp-root\n</code></pre> <p>The <code>-l</code> argument means lazy. It unmounts when all processes and dependencies are released.</p>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-a-specific-user","title":"Display a specific user","text":"<pre><code>sudo sssctl user-checks mhubbard@pu.pri\nuser: mhubbard@pu.pri\naction: acct\nservice: system-auth\n\nSSSD nss user lookup result:\n - user name: mhubbard@pu.pri\n - user id: 1242401104\n - group id: 1242400513\n - gecos: Hubbard, Michael\n - home directory: /home/mhubbard@pu.pri\n - shell: /bin/bash\n\nSSSD InfoPipe user lookup result:\n - name: mhubbard@pu.pri\n - uidNumber: 1242401104\n - gidNumber: 1242400513\n - gecos: Hubbard, Michael\n - homeDirectory: not set\n - loginShell: not set\n\ntesting pam_acct_mgmt\n\npam_acct_mgmt: Permission denied\n\nPAM Environment:\n - no env -\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-the-domain-users-group","title":"Display the \"Domain Users\" group","text":"<pre><code>mhubbard@z420VM-2404:~$ getent group \"domain users\"@pu.pri\ndomain users@pu.pri:*:1242400513:z420VM-2404@pu.pri\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-a-users-groups","title":"Display a user's groups","text":"<pre><code>groups mhubbard@pu.pri\nmhubbard@pu.pri : domain users@pu.pri denied rodc password replication group@pu.pri cisco admins@pu.pri sonicwall-nps@pu.pri domain admins@pu.pri\n</code></pre>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#display-user-information","title":"Display user information","text":"<pre><code>mhubbard@z420VM-2404:~$ getent passwd mhubbard@pu.pri\nmhubbard@pu.pri:*:1242401104:1242400513:Hubbard, Michael:/home/mhubbard@pu.pri:/bin/bash\n</code></pre> <p>The values:</p> <ul> <li>User ID Number (uidNumber):   <code>1242401603</code></li> <li>group ID Number (gidNumber):  <code>1242400513</code></li> <li>User:                         <code>Hubbard, Michael</code></li> <li>Home Directory:               <code>/home/mhubbard@pu.pri</code></li> <li>Shell:                        <code>/bin/bash</code></li> </ul>"},{"location":"Join-Ubuntu-24.04-desktop-to-AD/#references","title":"References","text":"<ul> <li>How to set up SSSD with Active Directory</li> <li>Arch Wiki - Configuring/troubleshooting systemd-resolved for DNS resolution.</li> <li>How to Add a User to Sudoers in Ubuntu 24.04</li> </ul>"},{"location":"KVM-Bridge/","title":"KVM Install","text":"<p> KEY TAKEAWAYS</p> <ul> <li>Ubuntu supports KVM virtualization on the desktop and server</li> <li>KVM supports NATed and bridged interfaces just like VMware Fusion or workstation.</li> <li>You create/manage KVM virtual machines with a GUI (virt-manager) or from the terminal (virsh commands)</li> <li>KVM is updated automatically by Ubuntu so there are never package mismatches with the kernel.</li> </ul>"},{"location":"KVM-Bridge/#introduction","title":"Introduction","text":"<p>KVM is the Linux Kernel-mode Virtual Machine tool. It's free and easy to install on Ubuntu. With all the uncertainty around VMware workstation, it's worth knowing how to use KVM! Like everything else when switching to Linux, it will feel quite different than using VMware Workstation at first. But once you spend a couple days KVM and create a few virtual machines I think you will like it.</p> <p>Plus, VMware is always way behind the Linux kernel so you have to resort to running the updates from vmwware host modules after you update Ubuntu. It's an ugly situation.</p> <p>By default KVM creates virtual machines on a NATed interface with a dhcp address in the range of 192.168.122.2-.254. The linux package dnsmasq is used to provide the DNS/DHCP services. NAT enables connected guests to use the host physical machine IP address for communication to any external network.</p> <p>The <code>default</code> network interface is <code>virbr0</code> and using <code>ip address device show virbr0</code> looks like this:</p> <pre><code>ip address show device virbr0\n20: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    link/ether 52:54:00:b5:48:b1 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\n       valid_lft forever preferred_lft forever\n</code></pre> <p></p> <p>As with VMware, you can create a bridge interface so that the virtual machine has an ip address on the same network as the host. Creating a bridge interface is explained below. A network engineer will probably need a bridge interface.</p> <p></p> <p>The two Redhat links in the references section have a lot of information on creating interfaces.</p>"},{"location":"KVM-Bridge/#installing-kvm","title":"Installing KVM","text":"<p>To run KVM, you must have virtualization enabled at the BIOS level. It can be a challenge to find virtualization in the BIOS because different manufacturers call it different things. The easiest way to find out what virtualization is called on your PC is to google your motherboard model.</p>"},{"location":"KVM-Bridge/#verifying-virtualization","title":"Verifying virtualization","text":"<p>Once you have enabled virtualization in the BIOS, you should verify that it is seen by the CPU.</p>"},{"location":"KVM-Bridge/#using-egrep","title":"Using egrep","text":"<p>To verify that virtualization is enabled in BIOS, run:</p> <pre><code>egrep -c '(vmx|svm)' /proc/cpuinfo\n</code></pre> <p>48</p> <p>This greps the /proc/cpuinfo file,  vmx is Intel, svm is AMD. You need to see a number in the output. In my case I have a 24 core Xeon processor that provides 48 cores of virtual CPUs.</p>"},{"location":"KVM-Bridge/#install-cpu-checker","title":"Install cpu-checker","text":"<pre><code>sudo apt install cpu-checker -y\n</code></pre> <p>This is a optional package. From the Debian site: \"There are some CPU features that are filtered or disabled by system BIOSes. This set of tools seeks to help identify when certain features are in this state, based on kernel values, CPU flags and other conditions. Supported feature tests are NX/XD and VMX/SVM.\"</p> <p>The tools is run using <code>kvm-ok</code> even though it's installed with <code>cpu-checker</code> for some reason. One advantage it has over grepping the /proc/cpuinfo file is that in some failure cases it will provide hints on what to do.</p> <pre><code>sudo kvm-ok\nINFO: /dev/kvm exists\nKVM acceleration can be used\n</code></pre> <p>from <code>man kvm-ok</code> page:</p> <pre><code>DESCRIPTION\n    kvm-ok is a program that will determine if the system\n    can host hardware accelerated KVM virtual machines.\n\n    The program will first determine if `/proc/cpuinfo`\n    contains the flags indicating that the CPU has the\n    Virtualization Technology (VT) capability.\n\n    Next, it will check if the /dev/kvm device exists.\n\n    If running as root, it will check your CPU's MSRs\n    to see if VT is disabled in the BIOS.\n\n    In some failure cases, kvm-ok provides hints on\n    how you might go about enabling KVM on a system\n    where it is arbitrarily disabled.\n\n    If KVM can be used, this script will exit 0, otherwise it will exit non-zero.\n</code></pre>"},{"location":"KVM-Bridge/#use-lscpu","title":"Use lscpu","text":"<p>lscpu is a built in tool to view cpu information. You can see on line 10 that the virtualization is VT-x:</p> <pre><code>lscpu | egrep -i 'Model name|Socket|Thread|NUMA|CPU\\(s\\)|virtual'\nAddress sizes:                        46 bits physical, 48 bits virtual\nCPU(s):                               24\nOn-line CPU(s) list:                  0-23\nModel name:                           Intel(R) Xeon(R) CPU E5-2697 v2 @ 2.70GHz\nThread(s) per core:                   2\nCore(s) per socket:                   12\nSocket(s):                            1\nCPU(s) scaling MHz:                   48%\nVirtualization:                       VT-x\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-23\n</code></pre>"},{"location":"KVM-Bridge/#installing-the-packages-for-kvm","title":"Installing the packages for KVM","text":""},{"location":"KVM-Bridge/#verify-the-ubuntu-version","title":"Verify the Ubuntu Version","text":"<p>While  not technically necessary, you can verify the version of Ubuntu you have installed with:</p> <pre><code>cat /etc/os-release\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       \u2502 File: /etc/os-release\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 PRETTY_NAME=\"Ubuntu 24.04 LTS\"\n   2   \u2502 NAME=\"Ubuntu\"\n   3   \u2502 VERSION_ID=\"24.04\"\n   4   \u2502 VERSION=\"24.04 LTS (Noble Numbat)\"\n   5   \u2502 VERSION_CODENAME=noble\n   6   \u2502 ID=ubuntu\n   7   \u2502 ID_LIKE=debian\n   8   \u2502 HOME_URL=\"https://www.ubuntu.com/\"\n   9   \u2502 SUPPORT_URL=\"https://help.ubuntu.com/\"\n  10   \u2502 BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\n  11   \u2502 PRI_POL_URL=\"https://www.ubuntu.com/terms-and-policies/privacy-policy\"\n  12   \u2502 UBUNTU_CODENAME=noble\n  13   \u2502 LOGO=ubuntu-logo\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre>"},{"location":"KVM-Bridge/#make-sure-ubuntu-is-up-to-date","title":"Make sure Ubuntu is up to date","text":"<pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre>"},{"location":"KVM-Bridge/#install-the-packages","title":"Install the packages","text":"<pre><code>sudo apt install libvirt-daemon\nsudo apt install virt-manager\nsudo apt install qemu-kvm\nsudo apt install virtinst\nsudo apt install libvirt-clients\nsudo apt install bridge-utils\n</code></pre> <p>or you can use this to install all at once:</p> <pre><code>sudo apt install libvirt-daemon virt-manager qemu-kvm virtinst libvirt-clients bridge-utils\n</code></pre> <p>I prefer to do one package at time so that I can watch each package but either works. All packages are about 200MB.</p>"},{"location":"KVM-Bridge/#configure-the-groups","title":"Configure the groups","text":"<p>Your user has to be in the following groups</p> <pre><code>sudo usermod -aG kvm $USER\nsudo usermod -aG libvirt $USER\n</code></pre>"},{"location":"KVM-Bridge/#verify-the-groups-have-your-user","title":"Verify the groups have your user","text":"<pre><code>groups $USER\nmhubbard : mhubbard adm cdrom sudo dip plugdev users kvm lpadmin libvirt wireshark\n</code></pre>"},{"location":"KVM-Bridge/#enable-the-virt-daemon","title":"Enable the virt daemon","text":"<pre><code>sudo systemctl enable --now libvirtd\nsudo systemctl start libvirtd\nsudo systemctl status libvirtd\n</code></pre>"},{"location":"KVM-Bridge/#if-you-make-changes-and-need-to-restart-the-daemon","title":"If you make changes and need to restart the daemon","text":"<pre><code>sudo systemctl restart libvirtd\n</code></pre>"},{"location":"KVM-Bridge/#where-are-the-virt-files-stored","title":"Where are the virt files stored","text":"<p>The qemu files are located in /etc/libvirt. You can list the files using:</p> <pre><code>ls -l /etc/libvirt\ntotal 126K\ndrwxr-xr-x 2 root root    2 2024-05-06 06:12 hooks/\n-rw-r--r-- 1 root root  450 2024-01-15 01:58 libvirt-admin.conf\n-rw-r--r-- 1 root root  547 2024-01-15 01:58 libvirt.conf\n-rw-r--r-- 1 root root  18K 2024-05-06 06:12 libvirtd.conf\n-rw-r--r-- 1 root root 2.3K 2024-01-15 01:58 libxl.conf\n-rw-r--r-- 1 root root 2.2K 2024-05-06 06:12 libxl-lockd.conf\n-rw-r--r-- 1 root root 2.5K 2024-05-06 06:12 libxl-sanlock.conf\n-rw-r--r-- 1 root root 1.2K 2024-01-15 01:58 lxc.conf\ndrwxr-xr-x 2 root root   26 2024-05-07 19:47 nwfilter/\ndrwxr-xr-x 4 root root    8 2024-08-02 16:44 qemu/\n-rw------- 1 root root  38K 2024-05-20 16:17 qemu.conf\n-rw------- 1 root root  38K 2024-05-20 16:15 qemu.conf.bak\n-rw-r--r-- 1 root root 2.2K 2024-05-06 06:12 qemu-lockd.conf\n-rw-r--r-- 1 root root 2.5K 2024-05-06 06:12 qemu-sanlock.conf\ndrwx------ 2 root root    2 2024-05-07 19:47 secrets/\ndrwxr-xr-x 3 root root    5 2024-05-08 21:36 storage/\n-rw-r--r-- 1 root root 3.0K 2024-01-15 01:58 virtlockd.conf\n-rw-r--r-- 1 root root 4.0K 2024-01-15 01:58 virtlogd.conf\n</code></pre>"},{"location":"KVM-Bridge/#back-up-qemuconf","title":"Back up qemu.conf","text":"<p>If you want to make any changes to the qemu.conf file I recommend making a backup first using:</p> <pre><code>sudo cp /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.bak\n</code></pre> <p>Run the following to show the backup:</p> <pre><code>sudo ls -l /etc/libvirt/qemu.conf*\n-rw------- 1 root root 38439 May 20 16:17 /etc/libvirt/qemu.conf\n-rw------- 1 root root 38407 May 20 16:15 /etc/libvirt/qemu.conf.bak\n</code></pre> <p>To list the qemu.conf file:</p> <pre><code>sudo cat etc/libvirt/qemu.conf\n</code></pre> <p>To edit the qemu.conf file:</p> <pre><code>sudo gnome-text-editor /etc/libvirt/qemu.conf\n</code></pre> <p>I didn't need to change the qemu.conf file for anything in this post. It's unlikely that you will need to but I wanted to show how to backup a file in the /etc/ directory.</p>"},{"location":"KVM-Bridge/#creating-a-kvm-bridge","title":"Creating a KVM Bridge","text":"<p>Why do I need create a bridge?</p> <p>From the Tecmint link in the reference section below</p> <p>A typical use case of software network bridging is in a virtualization environment to connect virtual machines (VMs) directly to the host server network. This way, the VMs are deployed on the same subnet as the host and can access services such as DHCP and much more.</p> <p>See the link Introduction to Linux interfaces for virtual networking for a detailed tutorial on all the virtual interfaces that Linux supports. The list is impressive!</p> <p>If you just need a virtual machine that is isolated on the host you can use the NAT interface that is built into KVM. Each guest will get an IP address in the range <code>192.16810.2 - 192.168.10.254</code>.</p> <p>If you need a static address on the default network see KVM libvirt assign static guest IP addresses using DHCP on the virtual machine</p>"},{"location":"KVM-Bridge/#the-lan-information","title":"The LAN Information","text":"<ul> <li>LAN Network 192.168.10.0/24</li> <li>Ubuntu workstation NIC - <code>eno1</code></li> </ul>"},{"location":"KVM-Bridge/#install-the-bridge-utils-package","title":"Install the bridge-utils package","text":"<p>If you installed the <code>bridge-utils</code> package earlier you can skip this step.</p> <p><code>sudo apt-get install bridge-utils</code></p> <p>If you can't remember just run the command again. APT will tell you that the latest version is installed and exit.</p>"},{"location":"KVM-Bridge/#create-the-netplan-yaml-file","title":"Create the Netplan yaml file","text":"<ul> <li><code>sudo touch etc/netplan/01-netcfg.yaml</code></li> <li><code>sudo gnome-text-editor /etc/netplan/01-netcfg.yaml</code></li> <li>Paste the following into the yaml file. Change IP addresses and interfaces to match your machine.</li> </ul> /etc/netplan/01-netcfg.yaml<pre><code># This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n      eno1:\n          addresses:\n              - 192.168.10.235/24\n\n  bridges:\n    br0:\n      interfaces: [ eno1 ]\n      dhcp4: false\n      addresses: [192.168.10.250/24]\n      routes:\n      - to: default\n        via: 192.168.10.253\n        metric: 100\n        on-link: true\n      nameservers:\n        addresses: [1.1.1.1]\n      dhcp6: yes\n      link-local: [ ]\n      parameters:\n        stp: true\n        forward-delay: 4\n</code></pre> <p>Save the file, then change the permissions</p> <p><code>sudo chmod 600 etc/netplan/01-netcfg.yaml</code></p>"},{"location":"KVM-Bridge/#activate-the-bridge","title":"Activate the bridge","text":"<p>You can use <code>sudo netplan try</code> to test the changes to 01-netcfg.yaml. If there are no errors just press <code>enter</code> to accept the changes.</p> <p>Yaml is a pain to work with. You will probably have some errors in the beginning!</p> <p>If you are sure that the yaml is correct you can use:</p> <p><code>sudo netplan apply</code></p> <p>to activate the file without testing. I recommend using <code>sudo netplan try</code> all the time.</p> <p>This creates a bridge named br0 mastered to eno1.</p> <p>Use <code>ip a</code> to view the interfaces:</p> <p><code>eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000</code></p> <p><code>br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000     link/ether e6:b5:f8:a0:9b:c5 brd ff:ff:ff:ff:ff:ff     inet 192.168.10.250/24 brd 192.168.10.255 scope global noprefixroute br0        valid_lft forever preferred_lft forever</code></p>"},{"location":"KVM-Bridge/#display-the-bridge","title":"Display the bridge","text":"<pre><code>sudo brctl show\nbridge name bridge id          STP enabled  interfaces\nbr0         8000.e6b5f8a09bc5  yes          eno1\n                                            vnet3\n                                            vnet5\n</code></pre>"},{"location":"KVM-Bridge/#display-the-netplan-configuration","title":"Display the netplan configuration","text":"<p>The following displays the system wide network configuration</p> <p><code>sudo netplan get</code></p>"},{"location":"KVM-Bridge/#ping-the-hosts-on-the-bridge","title":"Ping the hosts on the bridge","text":"<p>The Window server is at 192.168.10.231 and the Windows 10 guest is at 192.168.10.232</p> <pre><code>\u250c\u2500[mhubbard@HP-Z420] - [~] - [375]\n\u2514\u2500[$] ping 192.168.10.231\nPING 192.168.10.231 (192.168.10.231) 56(84) bytes of data.\n64 bytes from 192.168.10.231: icmp_seq=1 ttl=128 time=0.358 ms\n64 bytes from 192.168.10.231: icmp_seq=2 ttl=128 time=0.390 ms\n\n\u250c\u2500[mhubbard@HP-Z420] - [~] - [376]\n\u2514\u2500[$] ping 192.168.10.232\nPING 192.168.10.232 (192.168.10.232) 56(84) bytes of data.\n64 bytes from 192.168.10.232: icmp_seq=1 ttl=128 time=0.657 ms\n</code></pre>"},{"location":"KVM-Bridge/#list-out-the-xml-config-files","title":"list out the xml config files","text":"<p><code>l -la /etc/libvirt/qemu/networks</code></p>"},{"location":"KVM-Bridge/#verify-the-physical-network-switchport-settings","title":"Verify the physical network switchport settings","text":"<p>Make sure that the switchport of the physical network switch doesn't have bpdu-guard enabled! Once the bridge comes up it sends bpdu frames.</p> <p>I was connected to a Cisco 3850 on an access port. The switch had <code>spanning-tree portfast bpduguard default</code> in global configuration. The port went into err-disabled when the bridge came up. It took me a while  to figure out why the bridge wasn't working!</p> <p>I changed the port to a trunk with native vlan 10 to match the configuration that had been on the access port.</p> <pre><code>interface GigabitEthernet1/0/6\n description &lt; HP z420 &gt;\n switchport access vlan 10\n switchport trunk native vlan 10\n switchport mode trunk\n storm-control broadcast level 1.00 0.50\n storm-control multicast level 1.00 0.50\nend\n</code></pre>"},{"location":"KVM-Bridge/#virsh-commands","title":"Virsh Commands","text":""},{"location":"KVM-Bridge/#view-saved-configuration","title":"View saved configuration","text":"<ul> <li><code>sudo virsh dumpxml win2k16 | grep -i 'bridge'</code> show bridge config for a host named win2k16</li> <li><code>sudo virsh dumpxml win2k16 &gt; ~/win2k16.xml</code> Save the configuration for a host named win2k16</li> </ul>"},{"location":"KVM-Bridge/#startstop-a-virtual-machine","title":"Start/stop a virtual machine","text":"<ul> <li><code>sudo virsh win2k16 start</code> Start a virtual machine named win2k16</li> <li><code>sudo virsh shutdown win2k16</code> Send an ACPI shutdown signal to the virtual machine</li> <li><code>sudo virsh destroy win2k16</code> Power off the VM without signalling it. Data loss can occur</li> <li><code>sudo virsh reboot</code> win2k16 Does not signal the VM. Data loss can occur</li> </ul>"},{"location":"KVM-Bridge/#view-vm-details","title":"View VM Details","text":"<ul> <li><code>sudo virsh dominfo win2k16</code> Show detailed information</li> </ul>"},{"location":"KVM-Bridge/#check-virtual-machine-status","title":"Check Virtual Machine status","text":"<ul> <li><code>sudo virsh domstate win2k16</code></li> </ul>"},{"location":"KVM-Bridge/#list-virtual-machines","title":"List virtual machines","text":"<ul> <li><code>sudo virsh list --all</code> List all vms including those not running</li> <li><code>sudo virsh list</code> List all running vms</li> </ul>"},{"location":"KVM-Bridge/#connect-to-vm-console","title":"Connect to VM Console","text":"<ul> <li><code>sudo virsh console win2k16</code> See How to enable KVM virsh console access for a detailed article on how to setup console access</li> </ul>"},{"location":"KVM-Bridge/#view-dhcp-leases","title":"View DHCP leases","text":"<ul> <li><code>sudo virsh net-dhcp-leases default</code> show dhcp leases on network default.</li> <li><code>sudo virsh net-dhcp-leases host-bridge</code> show dhcp leases on network host-bridge.</li> </ul> <p>In the yaml file we disabled dhcp with <code>dhcp4: false</code> so there are no leases.</p>"},{"location":"KVM-Bridge/#view-the-network-yaml-files","title":"View the network yaml files","text":"<ul> <li>sudo virsh netdumpxml default Show the configuration of the network named default</li> <li>sudo virsh netdumpxml host-bridge Show the configuration of the network named host-bridge</li> </ul>"},{"location":"KVM-Bridge/#edit-the-network-yaml-files","title":"Edit the network yaml files","text":"<ul> <li>virsh net-edit default - Open the yaml configuration file of the  network <code>default</code> in the system editor</li> <li>sudo virsh net-edit host-bridge - Open the yaml configuration file of the network <code>host-bridge</code> in the system editor</li> </ul>"},{"location":"KVM-Bridge/#startstop-networks","title":"Start/Stop networks","text":"<ul> <li>sudo virsh net-destroy default - Stop the network <code>default</code></li> <li>sudo virsh net-start default Start the network <code>default</code></li> </ul>"},{"location":"KVM-Bridge/#manually-create-the-bridge-configuration","title":"Manually create the bridge configuration","text":"<p>You can manually create the bridge and link it to eno1 from the terminal</p> <pre><code>sudo ip link add name br0 type bridge\nsudo ip link set eno1 master br0\nsudo ip address add 192.168.10.250/16 brd 192.168.10.255\n</code></pre> <p>This method will not survive a reboot but it's quick for testing.</p>"},{"location":"KVM-Bridge/#create-a-windows-10-virtual-machine","title":"Create a Windows 10 virtual machine","text":"<p>Linux can't ship Windows drivers so you have to download the <code>virtio</code> package first. The Fedora People host the ISO here. Save it to your <code>Downloads</code> directory.</p> <p>You do not need the virtio ISO if you are creating a Linux virtual machine.</p> <p>You will need the Windows ISO also. You can download it using this link - Windows 10 2023 Update | Version 22H2</p> <p>Open the terminal and enter:</p> <pre><code>virt-manager\n</code></pre> <p>Or hit the super key and type <code>virt</code> to bring up the virtual machine icon.</p> <p>This will open the virt-manager GUI.</p> <p>Click on the \"New Virtual Machine\" Icon.</p> <p></p> <p>Select \"local install media (ISO image or CD-ROM)\" and click forward.</p> <p></p> <p>On this screen click \"Browse\" and select the Windows ISO and click \"Forward\". Notice that KVM identifies the ISO as Windows 11.</p> <p></p> <p>Set the Memory and CPU sizes, click forward</p> <p></p> <p>Set the disk size. Since this is a throw away virtual machine I set it to 20GB.</p> <p></p> <p>Click on \"Select or create custom storage\". Click \"Manage...\" and select the virtio ISO that you downloaded earlier.</p> <p></p> <p>Click Forward, this is the \"ready to begin installation\" dialog. Click \"Customize before install\".</p> <p>Click forward and select the NIC</p> <p></p> <p>Note</p> <p>You must follow the Creating a KVM Bridge section first. If you just need a NAT virtual machine, you don't need to create a bridge. But you won't be able to remote desktop into the Windows virtual machine.</p> <p>If you need a bridge, leave the NIC at NAT, finish creating the virtual machine, follow the instructions for creating a bridge, then go back and change the NIC to Bridge/Br0 using the Edit, Virtual Machine Details menu.</p> <p>Click finish and the GUI based installation of Windows will begin. It's different than a Windows install on bare metal and you will see an image of the virtio drivers installing before the windows installation starts.</p>"},{"location":"KVM-Bridge/#start-the-virtual-machine","title":"Start the virtual machine","text":"<p>From the terminal you can open the Virtual Machine's GUI console using</p> <p><code>virt-viewer</code></p> <p></p> <p>Select the Win11 virtual machine anc click connect.</p> <p>The GUI console will open:</p> <p></p> <p>Click the icon on the top left and select <code>Ctrl+Alt+Delete</code>.</p> <p></p> <p>  The VM says it's Windows 11 but it is actually Windows 10!</p> <p></p> <p>Congratulations, you now have a bridged Windows virtual machine up and running on Linux with KVM!</p>"},{"location":"KVM-Bridge/#install-the-qemu-guest-agent","title":"Install the qemu guest-agent","text":"<p>The qemu-guest-agent is a helper daemon installed in a virtual machine (guest) when using QEMU. It is used to exchange information between the host and guest, and can be used to properly shut down the guest. The agent passes network information, including IP addresses, from the virtual machine to the host.</p>"},{"location":"KVM-Bridge/#mount-the-iso-image","title":"Mount the ISO image","text":"<p>We need to mount the virtio-win-.iso image on the host <p>On the Linux host</p> <p>Open a terminal and run these commands:</p> <pre><code>cd /media\nsudo mkdir iso\nsudo mount -o loop ~/Downloads/virtio-win-0.1.240.iso /media/iso\nmount: /media/iso: WARNING: source write-protected, mounted read-only.\n</code></pre> <p>Now the iso is mounted at /media/iso. It's read only but that's fine. We are not going to change anything.</p> <p>Now change to the iso directory and list the files:</p> <pre><code>cd iso\nls -l\ntotal 45M\ndr-xr-xr-x 13 root root 2.0K 2023-09-18 23:17 amd64/\ndr-xr-xr-x 16 root root 2.0K 2023-09-18 23:17 Balloon/\ndr-xr-xr-x  2 root root 2.0K 2023-09-18 23:17 cert/\ndr-xr-xr-x  2 root root 2.0K 2023-09-18 23:17 data/\ndr-xr-xr-x 11 root root 2.0K 2023-09-18 23:17 fwcfg/\ndr-xr-xr-x  2 root root 2.0K 2023-09-18 23:18 guest-agent/\n...\n</code></pre> <p>The file that we will be installing is in the guest-agent folder, qemu-ga-x86_64.msi.</p> <pre><code>cd guest-agent\n\n/media/iso/guest-agent\n$ ls -l\ntotal 20M\n-r--r--r-- 1 root root 9.6M 2023-07-10 23:17 qemu-ga-i386.msi\n-r--r--r-- 1 root root 9.7M 2023-07-10 23:17 qemu-ga-x86_64.msi\n</code></pre>"},{"location":"KVM-Bridge/#mount-the-iso-on-the-windows-guest","title":"Mount the iso on the Windows guest","text":"<p>Switch to <code>virt-manager</code> and open a console to the Windows host. Above the console, click the <code>Virtual Machine</code> menu and select <code>Redirect USB device</code>:</p> <p></p> <p>A dialog will open, select the <code>Generic Mass Storage</code> device.</p> <p></p>"},{"location":"KVM-Bridge/#install-the-guest-agent","title":"Install the Guest Agent","text":"<p>In the guest, open file Explorer and select the iso.</p> <p>Double click on the guest-agent directory, then double click on <code>qemu-ga-x86_64.msi</code>. This is a standard Windows MSI installer, follow the directions and finish the install.</p>"},{"location":"KVM-Bridge/#verify-that-the-guest-agent-is-running-on-windows","title":"Verify that the guest agent is running on Windows","text":"<p>Open a PowerShell console</p> <pre><code>PS C:\\Users\\mhubbard&gt; Get-Service QEMU-GA\n\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  QEMU-GA            QEMU Guest Agent\n</code></pre> <p>You will now be able to copy/paste between the guest/host and host/guest.</p>"},{"location":"KVM-Bridge/#clean-up","title":"Clean up","text":"<p>Now that the agent is installed, we need to eject the ISO from the guest and unmount the ISO from the host. In Files Explorer, right click over the DVD Drive: virtio-win-0.1.240 and select the <code>eject</code> option.</p> <p></p> <p>On the host, open a terminal (you can't be in the /media/iso directory or the unmount will fail):</p> <pre><code>cd ~\nsudo umount /media/iso\n</code></pre>"},{"location":"KVM-Bridge/#qemu-references","title":"QEMU References","text":"<ul> <li>Issue with copy/paste in QEMU Windows guest</li> <li>Qemu-guest-agent - A ProxMox tutorial on the Guest Agent</li> <li>How to Mount ISO Files on Linux</li> </ul>"},{"location":"KVM-Bridge/#bridged-interface-with-vlans","title":"Bridged interface with vlans","text":"<p> KEY TAKEAWAYS</p> <ul> <li>Ubuntu supports vlans by default on the desktop and server</li> <li>KVM supports bridge interfaces with vlan tagging</li> <li>The bridge interface uses STP by default</li> <li>brctl has a rich set of tools for working with bridge interfaces</li> <li>KVM supports Open vSwitch</li> </ul> <p>Why would you want to create a bridge interface with vlans? On the laptop that you carry around you probably wouldn't have a need to. But if you have an Ubuntu server setup in your lab you almost certainly will want to be able to segment your services.</p> <p>This tutorial is based of of the official Ubuntu documentation for netplan. I modified the tutorial to fit my lab server.</p>"},{"location":"KVM-Bridge/#the-vlan-information","title":"The VLAN Information","text":"<ul> <li>LAN (untagged) Network 192.168.10.0/24</li> <li>vlan 40 Surveillance 192.168.40.0/24</li> <li>vlan 41 IoT 192.168.41.0/24</li> <li>Ubuntu workstation NIC - <code>eno1</code></li> </ul> <p>Interface <code>eno1</code> is connected to a Cisco switch on port Gi1/0/6. The port has the following configuration:</p> <pre><code>interface GigabitEthernet1/0/6\n description &lt; HP z420 &gt;\n switchport access vlan 10\n switchport trunk native vlan 10\n switchport trunk allowed vlan 10,40,41\n switchport mode trunk\n storm-control broadcast level 1.00 0.50\n storm-control multicast level 1.00 0.50\nend\n</code></pre> <p>Inter vlan routing is enabled and L3 interfaces are configured:</p> <ul> <li>vlan 40 - 192.168.10.235</li> <li>vlan 41 - 192.168.41.235</li> </ul>"},{"location":"KVM-Bridge/#disable-netfilter-for-bridged-interfaces","title":"Disable netfilter for bridged interfaces","text":"<p>To allow communication between the host server, its virtual machines, and the devices in the local VLANs, disable netfilter for bridged interfaces:</p> /etc/systemctl.conf<pre><code>net.bridge.bridge-nf-call-iptables = 0\nnet.bridge.bridge-nf-call-ip6tables = 0\nnet.bridge.bridge-nf-call-arptables = 0\n</code></pre> <p>Apply the changes immediately, without rebooting the host.</p> <pre><code>sysctl -p /etc/sysctl.conf\n</code></pre>"},{"location":"KVM-Bridge/#netplan-configuration","title":"Netplan configuration","text":"<ul> <li>Disable dhcp on the NIC</li> <li>Create vlans 40, 41</li> <li>Create three bridge interfaces, and assign IPv4 addresses to them:</li> <li>br0: bridge on the untagged VLAN1 and the management interface of the server</li> <li>br40: bridge on vlan40</li> <li>br41: bridge on vlan41</li> </ul>"},{"location":"KVM-Bridge/#create-the-yaml-file","title":"Create the yaml file","text":"/etc/netplan/01-netcfg.yaml<pre><code># This file describes the network interfaces available on your system\n# For more information, see netplan(5).\n# eno1 - untagged vlan1\n# eno1-vlan40 - Vlan interface to connect to tagged vlan40\n# eno1-vlan41 - Vlan interface to connect to tagged vlan41\n# br0 - bridge for interface eno1 on untagged vlan1\n# br40 - bridge tagged on vlan40\n# br41 - bridge tagged on vlan41\n# switch IPs\n# untagged 192.168.10.235\n# Vlan 40 192.168.40.235\n# Vlan 41 192.168.41.235\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eno1:\n      dhcp4: false\n  vlans:\n    eno1-vlan40:\n      id: 40\n      link: eno1\n    eno1-vlan41:\n      id: 41\n      link: eno1\n    eno1-vlan42:\n      id: 42\n      link: eno1\n  bridges:\n    br0:\n      interfaces: [eno1]\n      dhcp4: false\n      addresses: [192.168.10.235/24]\n    br40:\n      interfaces: [eno1-vlan40]\n      dhcp4: false\n      addresses: [192.168.40.254/24]\n    br41:\n      interfaces: [eno1-vlan41]\n      dhcp4: false\n      addresses: [192.168.41.254/24]\n</code></pre> <p>It's very easy to make mistakes when creating a Yaml file. You can use the site YAML Validator to validate your yaml file.</p>"},{"location":"KVM-Bridge/#test-the-new-network-settings","title":"Test the new network settings","text":"<pre><code>sudo netplan try\n</code></pre> <p>If no errors occur, press <code>enter</code> to accept the network settings.</p>"},{"location":"KVM-Bridge/#apply-the-configuration","title":"Apply the configuration","text":"<pre><code>sudo netplan apply\n</code></pre>"},{"location":"KVM-Bridge/#verify-an-yaml-file-before-modifying-production","title":"Verify an yaml file before modifying production","text":"<p>The yaml files that Netplan executes can be in these directories:</p> <pre><code>/etc/netplan\n/run/netplan\n/lib/netplan\n</code></pre> <p>Netplan searches directories in that order. You can have as many yaml files as needed. They are processed numerically so a file that starts with 00 will be processed first.</p> <p>You can use the following command to test a yaml file that isn't in one of these locations.</p> <pre><code>sudo netplan try --config-file /tmp/60-static-ip.yaml\n</code></pre> <p>Once you are happy with the configuration, copy the configuration file to <code>/etc/netplan/</code> and run <code>sudo netplan apply</code>.</p>"},{"location":"KVM-Bridge/#configure-virtual-networks-using-virsh","title":"Configure virtual networks using virsh","text":"<p>The next step is to configure virtual networks defined for virsh domains. This is not necessary, but it makes VM deployment and management easier.</p>"},{"location":"KVM-Bridge/#check-networking-and-delete-the-default-network","title":"Check networking and delete the default network","text":"<p>Check existing virtual networks:</p> <pre><code>sudo virsh net-list --all\n</code></pre> <p>There should be one default network as in this example:</p> <pre><code>Name      State    Autostart   Persistent\n--------------------------------------------\ndefault   active   yes         yes\n</code></pre> <p>If needed, use the net-info command to gather more details about the default network:</p> <pre><code>virsh net-info default\n</code></pre> <p>Remove the default network:</p> <pre><code>sudo virsh net-destroy default\nsudo virsh net-undefine default\n</code></pre> <p>Check network list to confirm the changes have been applied. There should no networks defined now:</p> <pre><code>sudo virsh net-list --all\n</code></pre>"},{"location":"KVM-Bridge/#create-the-networks","title":"Create the networks","text":"<p>Create a directory for VM data. For example:</p> <pre><code>sudo mkdir /mnt/vmstore/\ncd /mnt/vmstore/\n</code></pre> <p>Define the bridge interface, br0, for VLAN1 by creating the /mnt/vmstore/net-br0.xml file with the following contents:</p> /mnt/vmstore/net-br0.xml<pre><code>&lt;network&gt;\n    &lt;name&gt;br0&lt;/name&gt;\n    &lt;forward mode=\"bridge\" /&gt;\n    &lt;bridge name=\"br0\" /&gt;\n&lt;/network&gt;\n</code></pre> <p>Define the bridge interface, br0-vlan40, for VLAN40 by creating the /mnt/vmstore/net-br0-vlan40.xml file with the following contents:</p> /mnt/vmstore/net-br0-vlan40.xml<pre><code>&lt;network&gt;\n    &lt;name&gt;br0-vlan40&lt;/name&gt;\n    &lt;forward mode=\"bridge\" /&gt;\n    &lt;bridge name=\"br40\" /&gt;\n&lt;/network&gt;\n</code></pre> <p>Define the bridge interface, br0-vlan41, for VLAN41 by creating the /mnt/vmstore/net-br0-vlan41.xml file with the following contents:</p> /mnt/vmstore/net-br0-vlan41.xml<pre><code>&lt;network&gt;\n    &lt;name&gt;br0-vlan41&lt;/name&gt;\n    &lt;forward mode=\"bridge\" /&gt;\n    &lt;bridge name=\"br41\" /&gt;\n&lt;/network&gt;\n</code></pre>"},{"location":"KVM-Bridge/#enable-the-networks","title":"Enable the networks","text":"<p>This consists of three steps (performed for each of the networks):</p> <ul> <li>Define the network</li> <li>Start the network.</li> <li>Set the network to autostart.</li> </ul> <pre><code>sudo virsh net-define net-br0.xml\nsudo virsh net-define net-br0-vlan40.xml\nsudo virsh net-define net-br0-vlan41.xml\nsudo virsh net-start br0\nsudo virsh net-start br0-vlan40\nsudo virsh net-start br0-vlan41\nsudo virsh net-autostart br0\nsudo virsh net-autostart br0-vlan40\nsudo virsh net-autostart br0-vlan41\n</code></pre> <p>At this point you should have a bridge interface configured with the vlans 40, 41 up and running.</p>"},{"location":"KVM-Bridge/#verify-the-networks","title":"Verify the networks","text":"<p>KVM/Virsh provides a rich set of terminal commands for verifying the network and viewing vlans, MAC addresses and ohter network information.</p>"},{"location":"KVM-Bridge/#use-net-list","title":"Use net-list","text":"<pre><code>sudo virsh net-list --all\n Name         State    Autostart   Persistent\n-----------------------------------------------\n br0          active   yes         yes\n br0-vlan40   active   yes         yes\n br0-vlan41   active   yes         yes\n</code></pre>"},{"location":"KVM-Bridge/#viewing-the-links","title":"Viewing the links","text":"<p>You can use the following command to view the links. I have piped the output to <code>grep</code> and used the <code>or</code> operator <code>\\|</code> to filter on <code>master</code> and <code>vlan protocol</code>.</p> <p>Untagged br0</p> <pre><code>ip -d link show dev eno1  | grep 'master \\| vlan protocol'\n4: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP mode DEFAULT group default qlen 1000\n</code></pre> <p>Tagged vlan 40</p> <pre><code>ip -d link show dev eno1-vlan40  | grep 'master \\| vlan protocol'\n137: eno1-vlan40@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br40 state UP mode DEFAULT group default qlen 1000\n    vlan protocol 802.1Q id 40 &lt;REORDER_HDR&gt;\n</code></pre> <p>See what bridge the vlan interface is connected to</p> <p>The <code>master br40</code> in line 2 tells you that this interface is mastered to bridge br40. Line 3 shows the vlan tagging is <code>id 40</code> or vlan 40.</p> <p>Tagged vlan 41</p> <pre><code>ip -d link show dev eno1-vlan41 | grep 'master \\| vlan protocol'\n84: eno1-vlan41@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br41 state UP mode DEFAULT group default qlen 1000\n    vlan protocol 802.1Q id 41 &lt;REORDER_HDR&gt;\n</code></pre> <p>See what bridge the vlan interface is connected to</p> <p>The <code>master br41</code> in line 2 tells you that this interface is mastered to bridge br41. Line 3 shows the vlan tagging is <code>id 41</code> or vlan 41.</p>"},{"location":"KVM-Bridge/#display-the-bridge-interfaces","title":"Display the bridge interfaces","text":"<pre><code>sudo bridge link\n4: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br0 state forwarding priority 32 cost 100\n75: vnet18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br40 state forwarding priority 32 cost 2\n149: eno1-vlan40@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br40 state forwarding priority 32 cost 100\n150: eno1-vlan41@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br41 state forwarding priority 32 cost 100\n</code></pre> <p>  This output is after I connected the Ubuntu VM to <code>br0-vlan40</code>. That is why there is the <code>vnet18</code>entry. The <code>vnet</code> is the virtual interface in the VM.</p> <p>You can add at <code>-d</code> flag for more details:</p> <pre><code>sudo bridge -d link\n4: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br0 state forwarding priority 32 cost 100\n    hairpin off guard off root_block off fastleave off learning on flood on mcast_flood on bcast_flood on mcast_router 1 mcast_to_unicast off neigh_suppress off Vlan_tunnel off isolated off locked off\n83: eno1-vlan40@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br40 state forwarding priority 32 cost 100\n    hairpin off guard off root_block off fastleave off learning on flood on mcast_flood on bcast_flood on mcast_router 1 mcast_to_unicast off neigh_suppress off Vlan_tunnel off isolated off locked off\n84: eno1-vlan41@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br41 state forwarding priority 32 cost 100\n    hairpin off guard off root_block off fastleave off learning on flood on mcast_flood on bcast_flood on mcast_router 1 mcast_to_unicast off neigh_suppress off Vlan_tunnel off isolated off locked off\n</code></pre>"},{"location":"KVM-Bridge/#display-the-ipv6-multicast-groups","title":"Display the ipv6 multicast groups","text":"<p>I have ipv6 running on br0. To view the ipv6 multicast groups that it has joined:</p> <pre><code>sudo bridge -d mdb\ndev br0 port eno1 grp ff02::1:ffe0:a4db temp proto kernel\ndev br0 port eno1 grp ff02::fb temp proto kernel\n</code></pre>"},{"location":"KVM-Bridge/#monitor-devices","title":"Monitor devices","text":"<p>From the <code>man bridge</code> page</p> <p>The bridge utility can monitor the state of devices and addresses continuously This option has a slightly different format. Namely, the monitor command is the first in the command line and then the object list follows:</p> <pre><code>     bridge monitor [ all | OBJECT-LIST ]\n\n     OBJECT-LIST is the list of object types that we want to monitor.\n     It may contain link, fdb, vlan and mdb.  If no file argument is\n     given, bridge opens RTNETLINK, listens on it and dumps state\n     changes in the format described in previous sections.\n\n     If a file name is given, it does not listen on RTNETLINK, but\n     opens the file containing RTNETLINK messages saved in binary\n     format and dumps them.\n</code></pre> <p>With no object given:</p> <pre><code>sudo bridge -d monitor\nDeleted dc:cd:2f:3c:85:57 dev eno1 master br0 stale\nDeleted 00:e0:b3:34:56:2f dev eno1 master br0 stale\nDeleted d8:d4:3c:65:1b:3e dev eno1 master br0 stale\n00:e0:b3:34:56:2f dev eno1 master br0\nDeleted 06:8b:73:5b:10:e7 dev eno1 master br0 stale\nDeleted dev br0 port eno1 grp ff02::fb temp proto kernel\ndev br0 port eno1 grp ff02::fb temp proto kernel\n</code></pre>"},{"location":"KVM-Bridge/#attach-a-vm-to-vlan-40","title":"Attach a VM to vlan 40","text":"<p>In virt-manager, double click on a VM, select View, Details. Click on NIC on the left and then select `Virtual network 'br0-vlan40' from the dropdown list. Click apply to save the configuration.</p> <p></p> <p>Click view, console to open the Ubuntu VM. I don't have a DHCP server on vlan 40 so I manually set <code>192.168.40.200</code> as the address.</p> <p>From the terminal on the VM run <code>ip address</code> to find the MAC address.</p> <pre><code>2: enp8s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 52:54:00:75:21:34 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.40.200/24 brd 192.168.40.255 scope global noprefixroute enp8s0\n</code></pre> <p>Now back on the host run</p> <pre><code>ip a show dev eno1-vlan40\n149: eno1-vlan40@eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br40 state UP group default qlen 1000\n    link/ether c4:34:6b:65:b6:d0 brd ff:ff:ff:ff:ff:ff\n</code></pre> <p>The vlan 40 interface has a MAC address of <code>c4:34:6b:65:b6:d0</code></p> <pre><code>brctl showmacs br40\nport no  mac addr           is local?  ageing timer\n 1   c4:34:6b:65:b6:d0      yes           0.00\n 2   52:54:00:75:21:34      no            0.29\n</code></pre> <p>The Ubuntu VM's MAC and the vlan 40 mac are on the bridge <code>br40</code>!</p> <p>On the Cisco switch:</p> <pre><code>show mac address-table interface Gi1/0/6\n          Mac Address Table\n-------------------------------------------\n\nVlan    Mac Address       Type        Ports\n----    -----------       --------    -----\n  10    c434.6b65.b6d0    DYNAMIC     Gi1/0/6\n  10    e6b5.f8a0.9bc5    DYNAMIC     Gi1/0/6\n  40    7e3a.69b5.0656    DYNAMIC     Gi1/0/6\n  40    c434.6b65.b6d0    DYNAMIC     Gi1/0/6\n  40    5254.0075.2134    DYNAMIC     Gi1/0/6\n  41    6622.e1b0.951b    DYNAMIC     Gi1/0/6\n  41    c434.6b65.b6d0    DYNAMIC     Gi1/0/6\nTotal Mac Addresses for this criterion: 7\n</code></pre> <p>You can see the <code>br40</code> MAC address on line 9 and the VM's MAC address on line 11. So we have verified that the bridge works and the vlan tagging works!</p>"},{"location":"KVM-Bridge/#traceroute-to-vlan-10","title":"traceroute to vlan 10","text":"<pre><code>traceroute 192.168.10.222\ntraceroute to 192.168.10.222 (192.168.10.222), 64 hops max\n  1   192.168.40.235  3.288ms  1.321ms  1.186ms\n  2   192.168.10.222  0.373ms  0.400ms  1.894ms\n</code></pre> <p>The route hit interface vlan 40 on the switch and then the inter vlan routing sent it to the device at 192.168.10.222.</p> <p>It looks like we have successfully created a bridged interface with 3 vlans.</p>"},{"location":"KVM-Bridge/#brctl-options","title":"brctl options","text":"<pre><code>sudo brctl\nUsage: brctl [commands]\ncommands:\n    addbr          &lt;bridge&gt;                 add bridge\n    delbr          &lt;bridge&gt;                 delete bridge\n    addif          &lt;bridge&gt; &lt;device&gt;        add interface to bridge\n    delif          &lt;bridge&gt; &lt;device&gt;        delete interface from bridge\n    hairpin        &lt;bridge&gt; &lt;port&gt; {on|off} turn hairpin on/off\n    setageing      &lt;bridge&gt; &lt;time&gt;          set ageing time\n    setbridgeprio  &lt;bridge&gt; &lt;prio&gt;          set bridge priority\n    setfd          &lt;bridge&gt; &lt;time&gt;          set bridge forward delay\n    sethello       &lt;bridge&gt; &lt;time&gt;          set hello time\n    setmaxage      &lt;bridge&gt; &lt;time&gt;          set max message age\n    setpathcost    &lt;bridge&gt; &lt;port&gt; &lt;cost&gt;   set path cost\n    setportprio    &lt;bridge&gt; &lt;port&gt; &lt;prio&gt;   set port priority\n    show           [ &lt;bridge&gt; ]             show a list of bridges\n    showmacs       &lt;bridge&gt;                 show a list of mac addrs\n    showstp        &lt;bridge&gt;                 show bridge stp info\n    stp            &lt;bridge&gt; {on|off}        turn stp on/off\n</code></pre>"},{"location":"KVM-Bridge/#networkmanager-debug-logs","title":"NetworkManager debug logs","text":"<p>By default, the NetworkManager log level is set to info. You can use nmcli to modify the logging level:</p> <pre><code>sudo nmcli general logging level DEBUG domains ALL\n</code></pre> <p>You do not need to restart NetworkManager to begin seeing debug messages logged to journalctl. You can watch the NetworkManager logs:</p> <pre><code>sudo journalctl -f -u NetworkManager\n</code></pre>"},{"location":"KVM-Bridge/#set-logging-back-to-info","title":"Set logging back to info","text":"<pre><code>sudo nmcli general logging level INFO domains ALL\n</code></pre>"},{"location":"KVM-Bridge/#reference-links","title":"Reference Links","text":"<ul> <li>Netplan documentation - Offical documentation for Netplan. Tutorials, How to Guides, References</li> <li>VM Networking Libvirt / Bridge - A youtube video</li> <li>How to add a static IP in Ubuntu 22.04 Server - A simple example of a Netplan file for a static address</li> <li>Error in network definition: bond0: interface not defined - An example of creating a bond in Netplan.</li> <li>use the stable VirtIO ISO, download it from here - Download the Virtio drivers for Windows guests here</li> <li>The Essential KVM Cheat Sheet for System Administrators</li> <li>How to enable KVM virsh console access - Create a serial interface on a Linux VM</li> <li>Windows 10 guest best practices - This video is for ProxMox but the section on installing the virtio drives for the Windows NIC works on KVM with virt manager.</li> <li>Redhat Introduction to Linux interfaces for virtual networking - A great article by Redhat. It discusses every type of Linux interface that you can create.</li> <li>Redhat Virtualization Deployment Guide - A great article by Redhat on deploying KVM.</li> <li>How to Install KVM on Ubuntu 24.04 Step-by-Step - A 25 minute youtube video on installing KVM on Ubuntu.</li> </ul>"},{"location":"Log_tools/","title":"Working with Logs","text":"<p>Linux has a rich set of tools available for collecting and reading log files. The system logs are stored in <code>/var/log</code> and you can use <code>ls -l /var/log</code> to display the logs.</p> <p>You will see files with .gz extensions. These are log files that have been archived. The system does not delete the log files that are archived.</p> <p>Global system activity data, including startup messages are logged to <code>/var/log/syslog</code> and <code>/var/log/messages</code>. You can use the built-in <code>tail</code> command to display the logs.</p> <p><code>tail -20 /var/log/syslog</code></p> <p>will display the last 20 log entries. You can change 20 to any value.</p> <p>This blog is an in depth article on using the built in tools to display Linux logs - Ultimate Guide to Linux Logging</p>"},{"location":"Log_tools/#tailspin","title":"Tailspin","text":"<p>Overview</p> <p>Tailspin works by reading through a log file line by line, running a series of regexes against each line. The regexes recognize patterns you expect to find in a log file, like dates, numbers, severity keywords and more.</p> <p>tailspin does not make any assumptions on the format or position of the items it wants to highlight. For this reason, it requires no configuration and the highlighting will work consistently across different log files.</p> <p>Installation Instructions</p> <p>The repository is located here: tailspin. Tailspin is installed using <code>brew install tailspin</code>. There are instructions for tailspin on the README page at the repo.</p> <p>A second tool, spacer, is very useful with tspin. The spacer repository is located here. <code>spacer</code> is a simple CLI tool to insert spacers when command output stops.</p> <p>If you're the type of person that habitually presses enter a few times in your log tail to know where the last request ended and the new one begins, this tool is for you!</p> <p>Spacer is installed using <code>brew install spacer</code>.</p> <p></p>"},{"location":"Log_tools/#windows","title":"Windows","text":"<p>To use tailspin on Windows you will need WSL. See How to install Homebrew on Windows for instructions.</p>"},{"location":"Log_tools/#tspin-examples","title":"tspin examples","text":"<p>For Linux logs</p> <ul> <li>tspin --help</li> <li>tspin --print /var/log/ufw.log</li> <li>tspin --print /var/log/syslog</li> <li>journalctl -ef | tspin</li> </ul> <p>Example using spacer</p> <ul> <li>journalctl -ef | tspin | spacer --after 5</li> </ul> <pre><code>2024-12-21 14:39:06 1.2s \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nDec 21 14:39:12 1S1K-G5-5587 smartd[2581]: Device: /dev/sda [SAT], SMART Usage Attribute: 190 Airflow_Temperature_Cel changed from 70 to 69\n2024-12-21 14:39:14 7.4s \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nDec 21 14:40:01 1S1K-G5-5587 CRON[3541730]: pam_unix(cron:session): session opened for user mhubbard(uid=1000) by mhubbard(uid=0)\nDec 21 14:40:01 1S1K-G5-5587 CRON[3541734]: (mhubbard) CMD (clamav sleep $((RANDOM % 42)); venv/bin/fangfrisch --conf /etc/fangfrisch.conf refresh)\nDec 21 14:40:01 1S1K-G5-5587 systemd[1]: Starting sysstat-collect.service - system activity accounting tool...\nDec 21 14:40:01 1S1K-G5-5587 CRON[3541730]: pam_unix(cron:session): session closed for user mhubbard\nDec 21 14:40:01 1S1K-G5-5587 systemd[1]: sysstat-collect.service: Deactivated successfully.\nDec 21 14:40:01 1S1K-G5-5587 systemd[1]: Finished sysstat-collect.service - system activity accounting tool.\n2024-12-21 14:40:03 49.0s \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>You can see the advantage of having <code>spacer</code> put a time stamp and line for each new log entry.</p> <p>Network Switch log file specific</p> <ul> <li>tspin CX-log.txt --print</li> <li>tspin CX-log.txt --print | grep WARN</li> <li>tspin CX-log.txt --print | grep VSX</li> </ul> <p>Add \"on the fly\" colors</p> <ul> <li>tspin CX-log.txt --print --words-red LOG_WARN --words-green AMM</li> <li>tspin CX-log.txt --print --words-red LOG_WARN,Partner --words-green AMM</li> </ul> <p></p> <p>Add custom word list to color</p> <p>tspin uses .toml files for configuration. Here is a sample toml file for a CX switch log</p> <pre><code>[[keywords]]\nwords = ['LOG_WARN', 'Partner', 'AdjChg', 'Authorization', 'Authentication', 'User']\nstyle = { fg = \"red\" }\n\n[[keywords]]\nwords = ['LAG', 'VSX', 'LLDP']\nstyle = { fg = \"green\", italic = true }\n</code></pre> <p>Here is one I'm working on for Cisco IOS/IOS-XE</p> <pre><code>[[keywords]]\nwords = ['LINK', 'CLEAR', 'LINEPROTO', 'UPDOWN', 'Configured', 'from', 'console', 'PARSER', 'SEC', 'SYS', 'CONFIG_I', 'SEC_LOGIN', 'LOGOUT', 'LOGIN_FAILED', 'LOGIN_SUCCESS', 'has exited tty session', 'SSH', 'SSH2_USERAUTH', 'SSH2_SESSION', 'SSH2_CLOSE', 'TTY_EXPIRE_TIMER']\nstyle = { fg = \"red\" }\n\n[[regexes]]\nregex = 'GigabitEthernet\\d{1,2}/\\d{1,2}/\\d{1,2}'\nstyle = { fg = \"red\" }\n\n[[keywords]]\nwords = ['LAG', 'vty', 'LLDP', 'CDP', 'GigabitEthernet']\nstyle = { fg = \"green\", italic = true }\n\n[[keywords]]\nwords = ['user', 'User', 'Interface']\nstyle = { fg = \"blue\", bold = true, italic = false }\n\n[[keywords]]\nwords = ['ILPOWER', 'DETECT', 'POWER_GRANTED', 'IEEE_DISCONNECT']\nstyle = { fg = \"magenta\", bold = true}\n</code></pre> <p>You can create more <code>[[keywords]]</code> entries for other colors. The available colors are:</p> <ul> <li>default</li> <li>black</li> <li>red</li> <li>green</li> <li>yellow</li> <li>blue</li> <li>magenta</li> <li>cyan</li> <li>white</li> <li>bright_black</li> <li>bright_red</li> <li>bright_green</li> <li>bright_yellow</li> <li>bright_blue</li> <li>bright_magenta</li> <li>bright_cyan</li> <li>bright_white`</li> </ul> <p>Create a custom theme directory</p> <p>In the example above I created a directory <code>~/.config/tailspin/</code> to save the toml files in.</p> <p><code>mkdir -p ~/config/tailspin</code></p> <p>The <code>-p</code> argument will create parent directories if necessary.</p> <p>Use custom config file</p> <ul> <li>tspin --print --config-path ~/.config/tailspin/cx-config.toml CX-log.txt</li> <li>tspin --print --config-path cx-config.toml CX-log.txt</li> </ul> <p>You could save the toml file in the same directory as the log file and use: <code>tspin --print --config-path cx-config.toml CX-log.txt</code> but that doesn't scale well. I think it's better to put them in <code>~/.config/tailspin/</code> and then create an alias.</p> <p>alias example</p> <p>Place in <code>.zshrc</code></p> <p>alias tspincx='tspin --print --config-path ~/.config/tailspin/cx-config.toml $1'</p> <p>To call the alias <code>tspincx CX-log.txt</code></p>"},{"location":"Log_tools/#cx-log-parse","title":"CX Log Parse","text":"<p>I wrote a python script that parses the CX log file into a csv file. The file can then be opened in Excel with each field of the file as a column. That allows you to sort and filter the log file. This is useful for <code>Root Cause Analysis</code> documentation purposes if the customer needs it.</p>"},{"location":"Log_tools/#filtering","title":"Filtering","text":"<p>Including <code>-r</code> after the <code>show logging</code> command outputs the log in reverse order. You can also use the advanced piping features of the CX OS to filter the output. For example:</p> <pre><code>show logging -r | i exceed | e 1/1/32\n</code></pre> <p>Will include entries with exceed but exclude entries with 1/1/32. If you use a <code>?</code> after the pipe symbol <code>|</code> CX will show you examples of filtering.</p>"},{"location":"Log_tools/#ai-analysis","title":"AI Analysis","text":"<p>If you have a <code>Claude</code> account, you can narrow down the log messages that you think are relevant to the issue using Log Parse and Excel, then have <code>Claude</code> analyze it. You would be surprised how good <code>Claude</code> is at log file analysis.</p>"},{"location":"Log_tools/#rainbow-csv","title":"Rainbow CSV","text":"<p>If you use VS Code, you can install the <code>Rainbow CSV</code> extension and use SQL syntax to parse the file. I find it much faster to use SQL than sorting/filtering in Excel.</p> <p>Here is a screenshot of the log file open and a query string to pull LOG_WARN messages:</p> <p></p> <p>And  a screenshot of the result file:</p> <p></p> <p>You can see how fast that is to parse a huge log file down to just Warnings!</p>"},{"location":"Log_tools/#execution","title":"Execution","text":"<p>Save the code listed below as CX-Log-Parse.py and run:</p> <p><code>python CX-Log-Parse.py -f CX-log.txt</code></p> <p>This will create a csv file with the name CX-log.csv.</p> CX-Log-Parse.py<pre><code>import argparse\nimport csv\nimport re\nimport sys\nfrom pathlib import Path\n\n# Updated regex pattern to account for either a value like \"1/1\" or \"-\"\nlog_pattern = re.compile(\n    r\"(?P&lt;date&gt;\\d{4}-\\d{2}-\\d{2})T(?P&lt;time&gt;\\d{2}:\\d{2}:\\d{2}\\.\\d+)(?P&lt;timezone&gt;[+-]\\d{2}:\\d{2}) (?P&lt;hostname&gt;\\S+) (?P&lt;process&gt;\\S+)\\[(?P&lt;pid&gt;\\d+)\\]: (?P&lt;event_type&gt;\\S+)\\|(?P&lt;event_id&gt;\\d+)\\|(?P&lt;log_level&gt;\\S+)\\|(?P&lt;module&gt;\\S+)\\|(?P&lt;interface&gt;(?:\\S+|-)?)\\|(?P&lt;message&gt;.+)\"\n)\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-f\", \"--Log_filename\", dest=\"Log_filename\")\nargs = parser.parse_args()\nLog_filename: str = args.Log_filename\n\n\nif Log_filename is None:\n    print(\"-f Log filename is a required argument\")\n    sys.exit()\n\ncsv_filename: str = Path(Log_filename).stem + \".csv\"\n\n# Get path and add Log Filename to it\nmy_dir: Path = Path().resolve()\n\nLog_file_Exists: Path = my_dir.joinpath(Log_filename)\n\n# Open log file and CSV file\nif Log_file_Exists.exists():\n    with (\n        open(Log_filename, \"r\") as log_file,\n        open(csv_filename, \"w\", newline=\"\") as csv_file,\n    ):\n        csv_writer = csv.writer(csv_file)\n\n        # Write CSV header\n        csv_writer.writerow(\n            [\n                \"Date\",\n                \"Time\",\n                \"Timezone\",\n                \"Hostname\",\n                \"Process\",\n                \"PID\",\n                \"Event Type\",\n                \"Event ID\",\n                \"Log Level\",\n                \"Module\",\n                \"Interface\",\n                \"Message\",\n            ]\n        )\n\n        # Parse each log line\n        for line in log_file:\n            match = log_pattern.match(line)\n            if match:\n                # Write the captured groups to the CSV\n                csv_writer.writerow(match.groups())\n    print(f\"Log file saved to: {csv_filename}\")\nelse:\n    print(f\"Log file {Log_filename} does not exist\")\n    sys.exit()\n</code></pre>"},{"location":"SSH/","title":"SSH","text":"<p> KEY TAKEAWAYS</p> <ul> <li>Ubuntu has the latest version of the OpenSSH client installed by default.</li> <li>All the tools needed to secure and customize the SSH daemon are built in.</li> <li>You can use terminal tools like tmux and screen to log into devices and manage SSH sessions.</li> <li>You can use GUI tools like SecureCRT, Termius, and putty. See SSH GUI clients</li> </ul> <p>I highly recommend buying a copy of SSH Mastery by Michael Lucas. It\u2019s available at SSH Mastery or Amazon as an ebook for about $10.</p> <p>When I switched to Linux my only experience with SSH was Putty. Basically just opening putty, putting in an ip address and connecting. I knew that Putty had a separate program, puttygen, to create ssh keys and other functionality but I really just used it to do a simple ssh connection. There is so much more to SSH and Michael explains all of it in SSH Mastery.</p> <p>For a network engineer the biggest benefit of Ubuntu is that you have an SSH client and server that can be used from the terminal without installing proprietary software. It gets updated automatically when Ubuntu is updated.</p> <p>As I moved more and more to NetDevOps and started working with Linux servers in the cloud I started to appreciate the benefits of having an ssh client and server integrated with the operating system.</p>"},{"location":"SSH/#history-of-ssh","title":"History of SSH","text":"<p>Secure Shell (SSH) has always been an open source project. It was originally released in 1995 by a Finnish computer scientist Tatu Yl\u00f6nen. Before SSH, telnet was the most popular remote access protocol but it doesn't support encryption.</p> <p>OpenSSH was released in 1999 by the OpenBSD project. Most network devices supports SSH V1 and V2. V1 has been deprecated and V2 was released in 2006. On network devices if you do a <code>show ip ssh</code> command you might see <code>SSH Enabled - version 1.99</code> which means both V1 and V2 are enabled. What you want to see is <code>SSH Enabled - version 2.0</code> meaning V1 is disabled.</p> <p>The open source community for ssh and ssl are moving rapidly to drop support for legacy ciphers.</p> <p>Warning</p> <p>Ubuntu 25.04 includes openSSH 9.9p1 which dropped all support for ssh V1! Any device that uses ssh-dss for the Host Key Algorithm will not connect</p> <p>I upgraded to Ubuntu 25.04 on my laptop because I wanted some features in Gnome 48. The openSSH 9.9p1 update turns out a problem for older network devices like an HPE Procurve 2920, a Cisco IOS-XE device running 3.6.7 or older or a Ubiquiti M5 NanoStation. The reason is they are using ssh-dss for the Host Key Algorithm. This was part of the ssh V1 spec so it is gone.</p> <p>I tried to recompile openSSH using flags but they were serious and there isn't a way to add ssh-dss back. This means that you cannot open a terminal and ssh to an older network device.</p>"},{"location":"SSH/#work-around-for-ssh-dss","title":"Work Around for ssh-dss","text":"<ul> <li>You can install putty using <code>sudo snap install putty</code> since putty brings legacy crypto with it.</li> <li>You can spin up a virtual machine of Ubuntu 24.04 using KVM.</li> </ul> <p>I installed Putty but then realized that I use netmiko and other tools so I had to install a VM. I will glad when ancient network equipment is gone. Just last week (June 2025) a friend texted me that he was at a customer with a working Cisco 4500 running CatOS and Cisco 2926 switches. Gemini couldn't figure out how old these devices were!</p>"},{"location":"SSH/#verifying-ssh-ciphers","title":"Verifying ssh ciphers","text":"<p>From a terminal you can use:</p> <ul> <li>ssh -V - Display openSSH version</li> <li>ssh -Q HostKeyAlgorithms - Display the Host Key Algorithms supported</li> <li>ssh -Q MACs - Display the Message Authentication Code algorithms supported</li> <li>ssh -Q KexAlgorithms - Display the Key Exchange Algorithms supported.</li> </ul> <p>I created the following alias since I was checking often and on several machines:</p> <pre><code>alias mw-ssh='ssh -V &amp;&amp; echo \"\" &amp;&amp; echo HostKeyAlgorithms &amp;&amp; ssh -Q HostKeyAlgorithms &amp;&amp; echo \"\" &amp;&amp; echo MACs &amp;&amp; ssh -Q MACs &amp;&amp; echo \"\" &amp;&amp; echo KEXAlgorithms &amp;&amp; ssh -Q KexAlgorithms'\n</code></pre> <p>I preface my custom aliases with \"mw\" so that I can type <code>mw-</code> and hit tab to display them.</p> <p>This is the output on Ubuntu 25.04</p> <pre><code>mw-ssh\nOpenSSH_9.9p1 Ubuntu-3ubuntu3.1, OpenSSL 3.4.1 11 Feb 2025\n\nHostKeyAlgorithms\nssh-ed25519\nssh-ed25519-cert-v01@openssh.com\nsk-ssh-ed25519@openssh.com\nsk-ssh-ed25519-cert-v01@openssh.com\necdsa-sha2-nistp256\necdsa-sha2-nistp256-cert-v01@openssh.com\necdsa-sha2-nistp384\necdsa-sha2-nistp384-cert-v01@openssh.com\necdsa-sha2-nistp521\necdsa-sha2-nistp521-cert-v01@openssh.com\nsk-ecdsa-sha2-nistp256@openssh.com\nsk-ecdsa-sha2-nistp256-cert-v01@openssh.com\nwebauthn-sk-ecdsa-sha2-nistp256@openssh.com\nssh-rsa\nssh-rsa-cert-v01@openssh.com\nrsa-sha2-256\nrsa-sha2-256-cert-v01@openssh.com\nrsa-sha2-512\nrsa-sha2-512-cert-v01@openssh.com\n\nMACs\nhmac-sha1\nhmac-sha1-96\nhmac-sha2-256\nhmac-sha2-512\nhmac-md5\nhmac-md5-96\numac-64@openssh.com\numac-128@openssh.com\nhmac-sha1-etm@openssh.com\nhmac-sha1-96-etm@openssh.com\nhmac-sha2-256-etm@openssh.com\nhmac-sha2-512-etm@openssh.com\nhmac-md5-etm@openssh.com\nhmac-md5-96-etm@openssh.com\numac-64-etm@openssh.com\numac-128-etm@openssh.com\n\nKEXAlgorithms\ndiffie-hellman-group1-sha1\ndiffie-hellman-group14-sha1\ndiffie-hellman-group14-sha256\ndiffie-hellman-group16-sha512\ndiffie-hellman-group18-sha512\ndiffie-hellman-group-exchange-sha1\ndiffie-hellman-group-exchange-sha256\necdh-sha2-nistp256\necdh-sha2-nistp384\necdh-sha2-nistp521\ncurve25519-sha256\ncurve25519-sha256@libssh.org\nsntrup761x25519-sha512\nsntrup761x25519-sha512@openssh.com\nmlkem768x25519-sha256\n</code></pre> <p>Notice there are no ssh-dss ciphers</p> <p>This is the output on Ubuntu 24.04. You can see ssh-dss on lines 18-19.</p> <pre><code>mw-ssh\nOpenSSH_9.6p1 Ubuntu-3ubuntu13.12, OpenSSL 3.0.13 30 Jan 2024\n\nHostKeyAlgorithms\nssh-ed25519\nssh-ed25519-cert-v01@openssh.com\nsk-ssh-ed25519@openssh.com\nsk-ssh-ed25519-cert-v01@openssh.com\necdsa-sha2-nistp256\necdsa-sha2-nistp256-cert-v01@openssh.com\necdsa-sha2-nistp384\necdsa-sha2-nistp384-cert-v01@openssh.com\necdsa-sha2-nistp521\necdsa-sha2-nistp521-cert-v01@openssh.com\nsk-ecdsa-sha2-nistp256@openssh.com\nsk-ecdsa-sha2-nistp256-cert-v01@openssh.com\nwebauthn-sk-ecdsa-sha2-nistp256@openssh.com\nssh-dss\nssh-dss-cert-v01@openssh.com\nssh-rsa\nssh-rsa-cert-v01@openssh.com\nrsa-sha2-256\nrsa-sha2-256-cert-v01@openssh.com\nrsa-sha2-512\nrsa-sha2-512-cert-v01@openssh.com\n\nMACs\nhmac-sha1\nhmac-sha1-96\nhmac-sha2-256\nhmac-sha2-512\nhmac-md5\nhmac-md5-96\numac-64@openssh.com\numac-128@openssh.com\nhmac-sha1-etm@openssh.com\nhmac-sha1-96-etm@openssh.com\nhmac-sha2-256-etm@openssh.com\nhmac-sha2-512-etm@openssh.com\nhmac-md5-etm@openssh.com\nhmac-md5-96-etm@openssh.com\numac-64-etm@openssh.com\numac-128-etm@openssh.com\n\nKEXAlgorithms\ndiffie-hellman-group1-sha1\ndiffie-hellman-group14-sha1\ndiffie-hellman-group14-sha256\ndiffie-hellman-group16-sha512\ndiffie-hellman-group18-sha512\ndiffie-hellman-group-exchange-sha1\ndiffie-hellman-group-exchange-sha256\necdh-sha2-nistp256\necdh-sha2-nistp384\necdh-sha2-nistp521\ncurve25519-sha256\ncurve25519-sha256@libssh.org\nsntrup761x25519-sha512@openssh.com\n</code></pre>"},{"location":"SSH/#locating-devices-with-ssh-dss-host-key-algorithms","title":"Locating devices with ssh-dss Host Key Algorithms","text":"<p>You can use nmap to quickly scan devices and find those with ssh-dss ciphers.</p> <p><code>nmap -sV -p 22 -oN ssh-dss.nmap --script ssh2-enum-algos 192.168.10.50-254</code></p> <p>The -oN ssh-dss creates a <code>.nmap</code> file.</p> <p>Here is the output from the HPE 2920 in my garage:</p> <pre><code>Nmap scan report for 2920-Garage.pu.pri (192.168.10.52)\nHost is up (0.0069s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     Mocana NanoSSH 6.3 (protocol 2.0)\n| ssh2-enum-algos:\n|   kex_algorithms: (4)\n|       ecdh-sha2-nistp521\n|       ecdh-sha2-nistp384\n|       ecdh-sha2-nistp256\n|       diffie-hellman-group14-sha1\n|   server_host_key_algorithms: (1)\n|       ssh-dss\n|   encryption_algorithms: (8)\n|       aes256-ctr\n|       aes256-cbc\n|       rijndael-cbc@lysator.liu.se\n|       aes192-ctr\n|       aes192-cbc\n|       aes128-ctr\n|       aes128-cbc\n|       3des-cbc\n|   mac_algorithms: (4)\n|       hmac-sha1-96\n|       hmac-md5\n|       hmac-sha1\n|       hmac-md5-96\n|   compression_algorithms: (1)\n|_      none\n</code></pre> <p>Since we created the nmap file we can use:</p> <p><code>grep -i '192.168|dss' ssh-dss.nmap</code> to quickly find all devices.</p> <p>Here is a sample output:</p> <pre><code> 2:Nmap scan report for Ubiquiti-ofc.pu.pri (192.168.10.50)\n17:|       ssh-dss\n28:Nmap scan report for Ubiquiti-garage.pu.pri (192.168.10.51)\n43:|       ssh-dss\n54:Nmap scan report for 2920-Garage.pu.pri (192.168.10.52)\n66:|       ssh-dss\n</code></pre> <p>As you can see, devices 192.168.10.51-52 are using <code>ssh-dss</code> as the Host Key Algorithm. I have my network devices registered in DNS to it's easy to identify them. If you use MS Windows you can easily ask chatGPT to create a PowerShell script to read a spreadsheet of hostnames/IP addresses and create the DNS entries.</p> <p>The HPE 2920 is running <code>WB.16.10.0025</code> firmware which I think is the last release. Here is a <code>show ip ssh</code> from the 2920:</p> <pre><code>HP-2920-24G-PoEP# sh ip ssh\n\n  SSH Enabled     : Yes                 Secure Copy Enabled : No\n  TCP Port Number : 22                  Timeout (sec)       : 120\n  Rekey Enabled   : No                  Rekey Time (min)    : 60\n                                        Rekey Volume (KB)   : 1048576\n  Host Key Type   : DSA                 Host Key/Curve Size : 1024\n\n  Ciphers : aes256-ctr,aes256-cbc,rijndael-cbc@lysator.liu.se,aes192-ctr,\n            aes192-cbc,aes128-ctr,aes128-cbc,3des-cbc\n  MACs    : hmac-sha1-96,hmac-md5,hmac-sha1,hmac-md5-96\n</code></pre> <p>You can see from the ip ssh config that you can change the cipher and the MAC but not the Host Key Algorithm. FYI, HMAC is Hashed Message Authentication Code. All ssh MACs are actually HMACs.</p> <pre><code>HP-2920-24G-PoEP(config)# ip ssh\n cipher                Specify a cipher to enable/disable.\n filetransfer          Enable/disable secure file transfer capability.\n listen                Specify in which mode daemon should listen in.\n mac                   Specify a mac to enable/disable.\n port                  Specify the TCP port on which the daemon should listen for SSH connections.\n public-key            Configure a client public-key.\n rekey                 Enable SSH key re-exchange.\n timeout               Specify the maximum length of time (seconds) permitted for protocol\n                       negotiation and authentication.\n</code></pre>"},{"location":"SSH/#what-cryptographic-algorithms-should-i-use","title":"What Cryptographic Algorithms Should I use","text":"<p>When building a configuration template for a deployment you should remove as many legacy ciphers as possible. As the US CISA pushes for more secure IT infrastructure you will find more customers running security scans after you deploy. It's better to pass a security scan than have to answer questions about why your refresh failed a basic security audit.</p> <p>Since SSH is almost 30 years old there are a lot of ciphers available. But of course, many are no longer secure. IoT manufactures and network devices typically have a lot of ancient ciphers. Episode 209 of the 2.5 Admins podcast titled: Faulty Defaults is worth listening to if any of this is new to you.</p> <p>Asking which ciphers are secure is like asking \"Is Mac better than Windows?\". But here are some general guidelines:</p> <ul> <li>Don't use any encryption with CBC in the name. For example aes128-cbc. The CBC means <code>cipher block chaining</code> and PCI will fail you if it finds it.</li> <li>Do use encryption with CTR in the name. For example aes256-ctr.</li> <li>Don't use a MAC with SHA1 in the name if possible. For example hmac-sha1</li> <li>Do use a MAC with SHA2 in the name. For example hmac-sha2-256 or hmac-sha2-512</li> <li>Don't use a Key Exchange Algorithm (KEX) with SHA1 in the name if possible. For example diffie-hellman-group1-sha1</li> <li>Don't use a HostKeyAlgorithm with dss in the name. This is an SSH V1 Host key and has been dropped on openSSH 9.9 and above.</li> </ul> <p>You can do a search on the Internet for current algorithms. But, you will find that a lot of network devices don't support modern cryptographic algorithms. Some notable exceptions that support modern ciphers are:</p> <ul> <li>Aruba CX version 10.07 and newer</li> <li>Juniper Junos version 18.2R1.9 or higher</li> <li>Cisco IOS version 15.2(7)E2 or higher</li> <li>Cisco IOS-XE 17.2.x or later</li> </ul>"},{"location":"SSH/#how-to-configure-the-algorithms","title":"How to configure the algorithms","text":"<p>This is not an exhaustive tutorial. It's here to give you an idea of how to configure ssh algorithms for your base template.</p> <p>Aruba CX</p> <pre><code>ssh ciphers chacha20-poly1305@openssh.com aes256-ctr aes256-cbc\nssh host-key ed25519\nssh host-key-algorithms ssh-ed25519 ecdsa-sha2-nistp521\nssh key-exchange-algorithms ecdh-sha2-nistp256 curve25519-sha256\n diffie-hellman-group-exchange-sha256\nssh macs hmac-sha2-256 hmac-sha2-512\nssh public-key-algorithms x509v3-ssh-rsa rsa-sha2-256\nssh maximum-auth-attempts 5\n</code></pre> <p>The Aruba CX firmware has rock solid cryptographic algorithms out of the box. See the link in the references below for the exact algorithms. For a table of ssh server commands, see the Aruba CX SSH server commands below.</p> <p>Cisco IOS</p> <pre><code>ip ssh version 2\ncrypto key generate rsa modulus 4096 label SSH-KEYS\nip ssh rsa keypair-name SSH-KEYS !associate keys to SSH\nip ssh server algorithm encryption aes256-ctr aes192-ctr aes128-ctr\nip ssh server algorithm mac hmac-sha2-256 hmac-sha2-512\nno ip ssh server algorithm mac hmac-sha1\nno ip ssh server algorithm mac hmac-sha1-96\nip ssh authentication-retries 5\n</code></pre> <p>Ciscco IOS XE</p> <pre><code>ip ssh version 2\ncrypto key generate rsa modulus 4096 label RSA4096_SSH_KEY\nip ssh rsa keypair-name RSA4096_SSH_KEY !associate keys to SSH\nip ssh server algorithm authentication keyboard\nip ssh server algorithm mac hmac-sha2-512 hmac-sha2-256\nip ssh server algorithm encryption aes256-gcm aes256-ctr\nip ssh server algorithm kex ecdh-sha2-nistp521 ecdh-sha2-nistp384\nip ssh server algorithm hostkey rsa-sha2-512 rsa-sha2-256\nip ssh server algorithm publickey ecdsa-sha2-nistp521 ecdsa-sha2-nistp384\nip ssh authentication-retries 5\n</code></pre> <p>Juniper</p> <pre><code>set system services ssh ciphers aes256-ctr\nset system services ssh macs hmac-sha2-256\nset system services ssh macs hmac-sha2-512\nset system services ssh hostkey-algorithm ssh-ed25519\n</code></pre>"},{"location":"SSH/#references-ssh-history","title":"References SSH History","text":"<ul> <li>Secure Shell Wikipedia</li> <li>Top 20 OpenSSH Server Best Security Practices</li> <li>Aruba CX SSH ciphers</li> <li>IOS-XE SSH Best Practices</li> <li>Configuring IOS XE for Strong Security SSH Sessions</li> </ul>"},{"location":"SSH/#connecting-to-network-devices","title":"Connecting to Network Devices","text":"<p> KEY TAKEAWAYS</p> <ul> <li>Ubuntu makes it easy to use SSH from the terminal</li> <li>You can create custom entries in the ssh config file for each device if needed</li> <li>You can use password authentication or public key authentication with the ssh client</li> <li>You can easily create a jump host and secure your network devices even further.</li> </ul> <p>To connect using ssh:</p> <ul> <li>Open the terminal</li> <li>Enter the following command.</li> </ul> <p><code>ssh mhubbard@192.168.10.253</code></p> <p>Change the username and IP address to fit your device.</p>"},{"location":"SSH/#run-network-commands-remotely","title":"Run network commands remotely","text":"<p>You can run commands remotely on the network device using ssh. For example, to execute <code>show running-configuration</code> use:</p> <pre><code>ssh 192.168.10.253 show run\n(mhubbard@192.168.10.253) Password:\nDECOM___MCI-KSC-SW1 line 2\n\nBuilding configuration...\n\nCurrent configuration : 17541 bytes\n!\n! Last configuration change at 23:34:18 PDT Thu Jul 4 2024 by mhubbard\n! NVRAM config last updated at 16:19:00 PDT Tue Jul 9 2024\n.\n.\n.\nend\n</code></pre> <p>You can also use shell commands to get just what you need. For example, let's say I want to know what <code>ip ssh</code> commands are in the running configuration.</p> <pre><code>ssh 192.168.10.253 show run | grep \"ip ssh\"\n(mhubbard@192.168.10.253) Password:\nip ssh source-interface Vlan10\nip ssh rsa keypair-name SSH-KEYS\nip ssh version 2\nip ssh dh min size 4096\nip ssh server algorithm mac hmac-sha2-256 hmac-sha2-512\nip ssh server algorithm encryption aes256-ctr aes192-ctr aes128-ctr\nip ssh server algorithm kex diffie-hellman-group14-sha1\nConnection to 192.168.10.253 closed by remote host.\n</code></pre>"},{"location":"SSH/#network-devices-with-legacy-ciphers","title":"Network Devices with legacy ciphers","text":"<p>One problem for a network engineer is that newer versions of the OpenSSH client don\u2019t allow weak crypto by default and most network devices have weak ciphers by default. If you are connecting to network devices from a modern version of Mac/Linux you will probably get an error and the connection will fail. You will have to customize the <code>~/.ssh/config</code> file to add the ciphers needed.</p> <p>This is an example trying to connect to a Cisco 3850 IOS XE switch running 16.12.3a:</p> <pre><code>Unable to negotiate with 192.168.10.253 port 22: no matching key exchange method found. Their offer: diffie-hellman-group14-sha1\n</code></pre> <p>Here is the entry I added to <code>~/.ssh/config</code>:</p> <p>Open the file using <code>gnome-text-editor ~/.ssh/config</code> and add the following:</p> <pre><code>Host 192.168.10.253\n    KexAlgorithms +diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\n    MACs +hmac-sha1,hmac-sha2-256,hmac-sha2-512\n    HostKeyAlgorithms +ssh-rsa\n</code></pre> <p>You can add an SSH key file and a custom port for ssh if needed:</p> <pre><code>Host 192.168.10.253\n    KexAlgorithms +diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\n    MACs +hmac-sha1,hmac-sha2-256,hmac-sha2-512\n    HostKeyAlgorithms +ssh-rsa\n    IdentityFile ~/.ssh/id_rsa\n    Port 45005\n</code></pre> <p>To use a specific key on the fly: <code>ssh -i ~/.ssh/customer1/id_rsa  192.168.10.253</code></p> <p>I have run across network devices that required the ancient <code>dss</code> HostKeyAlgorithm. Add that with: <code>HostKeyAlgorithms +ssh-rsa,ssh-dss</code></p>"},{"location":"SSH/#using-a-wildcard-in-the-config-file","title":"Using a wildcard in the config file","text":"<p>If you have 100s or 1000s of devices with legacy crypto it gets painful to create an entry in <code>~/.ssh/config</code> for every device. You can use a wildcard in the configuration file that will pass the same configuration to every connection. Keep in mind that the wildcard configuration applies to all devices that match the wildcard, not just network devices.</p> <p>If you have a dedicated management network, for example, 192.168.10.0/24:</p> <pre><code>Host 192.168.10.*\n    Protocol 2\n    KexAlgorithms +diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1\n    HostKeyAlgorithms +ssh-rsa\n    MACs +hmac-sha1,hmac-sha2-256,hmac-sha2-512\n    PubkeyAcceptedKeyTypes +ssh-rsa\n</code></pre> <p>The <code>+</code> sign adds the legacy ciphers but leaves the new ciphers in place. So a device that only has legacy ciphers can connect but a new device should still negotiate new ciphers.</p> <p>You can use the <code>?</code> as wildcard placeholders. For example, <code>192.168.10.??</code> would match any host address with 2 digits.</p> <p>You can also put multiple hosts on the same line, separated by spaces.</p> <p><code>host 192.168.10.* 172.16.1.*</code></p> <p>You can use an <code>*</code> to cover any hosts. The <code>~/.ssh/config</code> file is read top to bottom so you can place this at the bottom and have specific devices defined above it.</p> <pre><code>gnome-text-editor ~/.ssh/config\nHost *\n    Protocol 2\n    KexAlgorithms +diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1\n    HostKeyAlgorithms +ssh-rsa\n    MACs +hmac-sha1,hmac-sha2-256,hmac-sha2-512\n    PubkeyAcceptedKeyTypes +ssh-rsa\n</code></pre>"},{"location":"SSH/#create-an-ssh-config-file-for-testing-purposes","title":"Create an ssh config file for testing purposes","text":"<p>You can use a different configuration if you want to test changes without modifying <code>~/.ssh/config</code>. Use <code>-F</code> option, for example:</p> <p><code>ssh -F test-config 192.168.10.253</code></p>"},{"location":"SSH/#use-a-different-username-for-network-access","title":"Use a different username for network access","text":"<p>Let's say that your laptop's username is <code>mhubbard</code> but the customer uses <code>vector</code> on all network devices. You can add the username to your config file:</p> <pre><code>Host 192.168.10.*\n    Protocol 2\n    KexAlgorithms +diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1\n    HostKeyAlgorithms +ssh-rsa\n    MACs +hmac-sha1,hmac-sha2-256,hmac-sha2-512\n    PubkeyAcceptedKeyTypes +ssh-rsa\n    User vector\n</code></pre> <p>Now list the username on my laptop</p> <pre><code>~/.ssh \u231a 21:33:59\n$ whoami\nmhubbard\n</code></pre> <p>Log into the switch and run who:</p> <pre><code>$ ssh 192.168.10.253\n(vector@192.168.10.253) Password:\nDECOM___MCI-KSC-SW1 line 2\nDECOM___MCI-KSC-SW1#who\n    Line       User       Host(s)              Idle       Location\n*  2 vty 0     vector     idle                 00:00:00 ubuntu.pu.pri\n</code></pre> <p>This is very convenient even if you are not using ssh keys.</p>"},{"location":"SSH/#display-the-configuration-that-will-be-used","title":"Display the configuration that will be used","text":"<p>Using <code>-G</code> Causes ssh to print its configuration after evaluating Host and Match blocks and exit. You can review your settings to verify you\u2019re getting what you need.</p> <p>In this example I removed a lot of detail but you can see the key that will be used, the ciphers, and other important details. The <code>-G</code> switch will save you a lot of time preparing you config file.</p> <pre><code>ssh -G 192.168.10.253\nhost 192.168.10.253\nuser mhubbard\nhostname 192.168.10.253\nport 22\naddressfamily any\ncanonicalizehostname false\nfingerprinthash SHA256\nhashknownhosts yes\npubkeyauthentication true\nstricthostkeychecking ask\ntcpkeepalive yes\nupdatehostkeys true\nrequiredrsasize 1024\nciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc\nhostkeyalgorithms ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ssh-dss\nhostbasedacceptedalgorithms ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com,rsa-sha2-512,rsa-sha2-256\nkexalgorithms diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ncasignaturealgorithms ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com,rsa-sha2-512,rsa-sha2-256\nloglevel INFO\nmacs hmac-sha2-512,hmac-sha2-256\nsecuritykeyprovider internal\npubkeyacceptedalgorithms ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa\nxauthlocation /usr/bin/xauth\nidentityfile ~/.ssh/id_rsa\naddkeystoagent true\nsyslogfacility USER\n</code></pre>"},{"location":"SSH/#ssh-jump-hosts","title":"SSH Jump hosts","text":"<p>A jump host is a device that you connect to and then connect to other devices. This is done to limit administrative access to just the jump host. This is very easy to do with Linux. Spin up an Ubuntu server VM with a NIC that has access to the network devices, hardened per your company security policy and then add <code>ProxyJump</code> to the ssh config file.</p> <p>In this example I have an Ubuntu server at 192.168.10.223:</p> <pre><code>Host 192.168.10.* !192.168.10.223\n        Protocol 2\n        HostKeyAlgorithms +ssh-rsa,ssh-dss\n        MACs hmac-sha2-512,hmac-sha2-256\n        KexAlgorithms diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\n        PubkeyAcceptedKeyTypes +ssh-rsa\n        IdentityFile ~/.ssh/id_rsa\n        AddKeysToAgent yes\n        ProxyJump 192.168.10.223\n</code></pre> <p>The <code>!192.168.10.223</code> parameter means <code>not 192.168.10.223</code>. Without this entry there would be a loop and the jump would fail.</p> <p>Now use the - J option:</p> <pre><code>~/.ssh \u231a 17:00:00\n$ ssh -J mhubbard@192.168.10.223 mhubbard@192.168.10.253\nDECOM___MCI-KSC-SW1 line 2\n\nDECOM___MCI-KSC-SW1#\n</code></pre> <p>None of your keystrokes reach the jump host. The only thing the jump host can see is an encrypted data stream between your client and the destination server.</p> <p>Note</p> <p>Keep in mind that if the jump box is down you will not be able to log into the network devices. If you use <code>ssh -v</code> you will see these messages:</p> <ul> <li>debug1: Reading configuration data /Users/mhubbard/.ssh/config</li> <li>debug1: /Users/mhubbard/.ssh/config line 4: Skipping Host block because of negated match for 192.168.10.223</li> <li>debug1: /Users/mhubbard/.ssh/config line 18: Applying options for *</li> </ul> <p>You can comment out the ProxyJump 192.168.10.223 line in the configuration with a # symbol until the jump box is back online.</p>"},{"location":"SSH/#references-wild-cards","title":"References Wild Cards","text":"<p>SSH config wildcard on expanded Hostname</p>"},{"location":"SSH/#debugging-ssh-connections","title":"Debugging SSH connections","text":"<p>You can use the -v switch to debug the SSH connection. You can repeat the v up to 4 times - -vvvv. Each extra v adds more details to the output.</p>"},{"location":"SSH/#what-crypto-does-my-device-support","title":"What crypto does my device support?","text":"<p>On most switches you can use something like <code>show ip ssh</code> to get a list of the current ssh ciphers.</p> <p>Here is an example from the Cisco 3850 in my home lab:</p> <pre><code>ssh 192.168.10.253 show ip ssh\n(mhubbard@192.168.10.253) Password:\n\nDECOM___MCI-KSC-SW1 line 2\n\nSSH Enabled - version 2.0\nAuthentication methods:publickey,keyboard-interactive,password\nAuthentication Publickey Algorithms:x509v3-ssh-rsa,ssh-rsa\nHostkey Algorithms:x509v3-ssh-rsa,ssh-rsa\nEncryption Algorithms:aes256-ctr,aes192-ctr,aes128-ctr\nMAC Algorithms:hmac-sha2-256,hmac-sha2-512\nKEX Algorithms:diffie-hellman-group14-sha1\nAuthentication timeout: 120 secs; Authentication retries: 3\nMinimum expected Diffie Hellman key size : 4096 bits\nIOS Keys in SECSH format(ssh-rsa, base64 encoded): SSH-KEYS\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC9HNJvj5z6RlhYQxxXk7WmWzoSGl8O9Iw5mUIFEmkR\nMRwG7Hg32r5qZ0JSI//gZv8xAVfaR8h2Z5dlJnZyHkpH9eUyXcQOFTY6Y7O4GlFcIGCsVwMWSNslipyf\nUVW9NBHFrbdfPgZnPzU6FxiTsKLCgIdbrGi51X1jpJf762Q6ZCsPV6h963gRgAMs+BsxRzDXxOVVcjYW\nnDhN+nK9FNdHC4xlf7y3LLAb3zL41JuWN3N+7NEeNlM8fVgSI4Wzv3RE6uLRB6HIir/WjUgfzAOnBi5/\nj52pac2gkstrdJmpko5ImRSWxuZfLYzn4LLXoIBXAKbps7BSk7Ci+to+RVDje5d68+Ech19ogzsfufNU\nnYHvKNkxmahaZSZav6BPZWBiJ6Xc9c1OcqHX0seVXEp7ZZ+a99yrtY22yBC5W5Wh1hY/PEULbP7W64E+\nmUQP9U8lIxCCw3MvmafZx2XvbPPENzYdIVO1nfIkAC/1QeK47Jh+HJMGZQbsfoTA4Gz3REKUXiU2eLRV\n8hQznQVtjKn/Ey+aziHBrYo7IvwyKALA6Ofk+KehGgcmijEGi8HeyQdwmKzZ9t1XlVWE25M+RZMk0YCa\nuWp6C0y9Zb2GUDgoazWp09gqEjNH2vnefIJvFvR7oRjGgSyYdyBm4z9PGEyRg//asR8+rkNi5jXaqzUd%\n</code></pre>"},{"location":"SSH/#checking-ciphers-with-nmap","title":"Checking ciphers with nmap","text":"<p>For devices that don't have <code>show ip ssh</code>, like IoT devices, you can use nmap with the built in <code>ssh-enum-algos</code> script. This is from the Ubiquiti Nano Station in my home lab.</p> <pre><code>sudo nmap -sV --script ssh2-enum-algos 192.168.10.50\nStarting Nmap 7.95 ( https://nmap.org ) at 2024-07-08 16:36 PDT\nNmap scan report for office.pu.pri (192.168.10.50)\nHost is up (0.020s latency).\nNot shown: 996 closed tcp ports (reset)\nPORT      STATE SERVICE    VERSION\n22/tcp    open  ssh        Dropbear sshd (protocol 2.0)\n| ssh2-enum-algos:\n|   kex_algorithms: (6)\n|       curve25519-sha256\n|       curve25519-sha256@libssh.org\n|       diffie-hellman-group14-sha256\n|       diffie-hellman-group14-sha1\n|       diffie-hellman-group1-sha1\n|       kexguess2@matt.ucc.asn.au\n|   server_host_key_algorithms: (2)\n|       ssh-rsa\n|       ssh-dss\n|   encryption_algorithms: (2)\n|       aes128-ctr\n|       aes256-ctr\n|   mac_algorithms: (2)\n|       hmac-sha1\n|       hmac-sha2-256\n|   compression_algorithms: (1)\n|_      none\n80/tcp    open  http       lighttpd 1.4.54\n|_http-server-header: lighttpd/1.4.54\n443/tcp   open  ssl/http   lighttpd 1.4.54\n|_http-server-header: lighttpd/1.4.54\n10001/tcp open  tcpwrapped\nMAC Address: FC:EC:DA:C4:6E:55 (Ubiquiti)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 17.98 seconds\n</code></pre> <p>As you can see, it has good crypto like curve 25519 and aes256-ctr but then it also supports rsa-dss and diffie-hellman group1 sha1! Why?</p> <p>This is an example of why you don't want to use the wildcard in the configuration file. depending on the client you could end up using sha1 instead of sha2 or ssh-dss instead of ssh-rsa.</p> <p>nmap also has a similar script for checking SSL (TLS) crypto:</p> <pre><code>sudo nmap --script ssl-cert,ssl-enum-ciphers -p 443 192.168.10.253\nStarting Nmap 7.94 ( https://nmap.org ) at 2024-07-12 13:45 PDT\nNmap scan report for 3850.pu.pri (192.168.10.253)\nHost is up (0.0043s latency).\n\nPORT     STATE  SERVICE\n443/tcp  open   https\n| ssl-enum-ciphers:\n|   TLSv1.2:\n|     ciphers:\n|       TLS_RSA_WITH_AES_256_GCM_SHA384 (rsa 2048) - F\n|       TLS_RSA_WITH_AES_128_GCM_SHA256 (rsa 2048) - F\n|       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (secp256r1) - F\n|       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (secp256r1) - F\n|     compressors:\n|       NULL\n|     cipher preference: server\n|     warnings:\n|       Insecure certificate signature (SHA1), score capped at F\n|_  least strength: F\n| ssl-cert: Subject: commonName=IOS-Self-Signed-Certificate-1097548300\n| Issuer: commonName=IOS-Self-Signed-Certificate-1097548300\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha1WithRSAEncryption\n| Not valid before: 2023-03-08T00:38:42\n| Not valid after:  2030-01-01T00:00:00\n| MD5:   12d5:9652:7129:3c66:169d:1e69:2dc1:ddcc\n|_SHA-1: 9fcc:9d66:f55a:ccec:4949:4da8:a3f7:205a:046d:78b0\nMAC Address: F8:7B:20:34:A3:C6 (Cisco Systems)\n\nNmap done: 1 IP address (1 host up) scanned in 1.53 seconds\n</code></pre> <p>For new deployments you should take the time to remove legacy crypto in the switch configuration that you build. Once you decide on the best setup, add it to your base template. This is a best practice and will save you some embarrassment if the customer has a security team. Don't ask me how I know this.</p> <p>If you have written permission from the network owner, you can use this script to do a quick cipher suite assessment of the existing network devices. I have a python script that creates a menu of nmap scripts for security testing. You can find it here. The script is easy to use has a lot of nmap goodness for a network engineer.</p>"},{"location":"SSH/#ssh-gui-clients","title":"SSH GUI Clients","text":"<p>Here are three different GUI SSH clients for Linux.</p>"},{"location":"SSH/#putty","title":"Putty","text":"<p>If you are coming from Windows you have probably used Putty. There is a Linux version of putty that is free to use.</p>"},{"location":"SSH/#installation","title":"Installation","text":"<p>You can install putty using the Ubuntu package manager:</p> <p><code>sudo apt-get install -y putty</code></p> <pre><code> sudo apt-get install -y putty\n[sudo] password for mhubbard:\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  putty-tools\nSuggested packages:\n  putty-doc\nThe following NEW packages will be installed:\n  putty putty-tools\n0 upgraded, 2 newly installed, 0 to remove and 6 not upgraded.\nNeed to get 1,240 kB of archives.\n\nputty --version\nputty --version\nPuTTY: Release 0.78\nBuild platform: 64-bit Unix (GTK + X11)\nCompiler: gcc 13.2.0\nCompiled against GTK version 3.24.38\nSource commit: 4ff82ab29a22936b78510c68f544a99e677efed3\n</code></pre> <p>Notice that it's a fairly old version. Tap the Super key and type <code>putty</code> to run it. I would not install it, instead use ssh from terminator or purchase Termius/SecureCRT.</p>"},{"location":"SSH/#termius","title":"Termius","text":"<p>Termius is a modern SSH client and terminal that works on:</p> <ul> <li>Windows</li> <li>Mac OS</li> <li>Linux</li> <li>IOS</li> <li>Android</li> </ul> <p>Which makes it a great option. I personally use it on all of those except Windows. It syncs to the cloud so no matter what device I am on I have all of my hosts, keys, etc. It also has color coding for most network devices and a lot of themes.</p> <p>I bought it years ago when it was in beta. It's now a $10.00 per month subscription. I think it's worth $10 per month but you will have to decide for yourself.</p>"},{"location":"SSH/#installation-termius","title":"Installation Termius","text":"<p>go to download and select <code>Download .DEB</code> then open a terminal and run <code>sudo dpkg -i Termius.deb</code></p>"},{"location":"SSH/#securecrt","title":"SecureCRT","text":"<p>This is the 800lb Gorilla of SSH clients. If your company pays for a license for Windows users, you should be able jump on that plan. If not it's $209 for a three year subscription or $129 for a 1 year subscription.</p> <p>I have never used SecureCRT so I am just going to put a link to the download here and you can research it yourself.</p>"},{"location":"SSH/#installation-securecrt","title":"Installation SecureCRT","text":"<p>SecureCRT Downloads</p>"},{"location":"SSH/#creating-ssh-keys","title":"Creating SSH Keys","text":"<p>The OpenSSH client allows you to create custom SSH keys. You can create as many keys as you need. You should think about your security requirements and create SSH keys to fit the requirements. For example, if you work for a VAR or MSP, you may want to create unique keys for each customer. You can create subdirectories for different customers. For example:</p> <p><code>~/.ssh/customer1/</code></p> <p>See the section Network Devices with legacy ciphers for an example of how to add a key to a device profile.</p> <p>My current recommended public-key signing algorithm is Dan Bernstein's ED25519. To create a set of keys using ed25519, run the following in the terminal from the ~/.ssh directory:</p> <p><code>ssh-keygen -a 100 -f id_custom_25519 -o -t ed25519 -C \"$(whoami)@$(uname -n)-$(date -I)\"</code></p> <p>-a 100 Use 100 rounds of pbkdf2 (password based key derivation function 2).</p> <p>-f name for the key pair.</p> <p>-o Use the new RFC4716 key format and the use of a modern key derivation function powered by bcrypt.</p> <p>-t Specifies the type of key to create. The options are:</p> <ul> <li>dsa (weak)</li> <li>ecdsa</li> <li>ecdsa\u2010sk</li> <li>ed25519</li> <li>ed25519\u2010sk</li> <li>rsa (weak)</li> </ul> <p>dsa and rsa are not good choices as they are deprecated. The keys with -sk at the end are for use with physical Security Keys. See the Yubico topic later in this section for more information.</p> <p>-C Specifies a comment to be added to the public key to make it easier to identify the key in the authorized_keys file of the server you connect to. This is optional. In the example:</p> <ul> <li>whoami - The username</li> <li>uname -n - The device hostname</li> <li>date -I - The year-month-day</li> </ul> <p>Specify a strong passphrase when prompted. The passphrase is required anytime you use the key. If you don\u2019t password protect the key, and an attacker gets access to the keys, they can log into any server you used them on.</p> <p>Here is what the output of the command should look like:</p> <pre><code>ssh-keygen -a 100 -o -C \"$(whoami)@$(uname -n)-$(date -I)\" -f id_custom_25519 -t ed25519\nGenerating public/private ed25519 key pair.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in id_custom_25519\nYour public key has been saved in id_custom_25519.pub\nThe key fingerprint is:\nSHA256:4alqMRHMO/O91aJjlON2NLOUVcwZ5WLBVpcIaOFKylw mhubbard@1S1K-G5-5587-2024-07-11\nThe key's randomart image is:\n+--[ED25519 256]--+\n|   o     .o..++==|\n|    +   .o   .B+.|\n|     o Eo.   oo .|\n|    B +..o  .. . |\n|     O oS. +     |\n|    o ..= O .    |\n|     o.o B =     |\n|    ..  B o      |\n|   ..  o o       |\n+----[SHA256]-----+\n</code></pre> <p>Here is what the public key looks like with the comment:</p> <pre><code>cat id_custom_25519.pub\n       \u2502 File: id_custom_25519.pub\n       \u2502 ssh-ed25519\u00b7AAAAC3NzaC1lZDI1NTE5AAAAINCnTz475PiCydfW10kXIwPqpRpufeeuicoY9NLUndbt\u00b7mhubbard@1S1K-G5-5587-2024-07-11\n</code></pre> <p>You can see my username (mhubbard), hostname (1S1K-G5-5587) and date at the end.</p> <p>You can replace any of the variables between the starting <code>\"</code> and ending <code>\"</code>. For example instead of hostname you could use <code>key-4-cisco</code>:</p> <p><code>\"$(whoami)-key4cisco-$(date -I)\"</code></p> <pre><code>ssh-keygen -a 100 -f id_custom_25519  -o  -t ed25519 -C \"$(whoami)-key4cisco-$(date -I)\"\n\nThe key fingerprint is:\nSHA256:nDm2hRdFrE7xLV3UxKh1DHEOS1C5Ftm0l/Wtqvb6OgI mhubbard-key4cisco-2024-07-24\n</code></pre>"},{"location":"SSH/#display-the-existing-keys-on-ubuntu","title":"Display the existing keys on Ubuntu","text":"<p>Tip for naming keys</p> <p>I always start my key names wih <code>id_</code>. If you don't, you will need to modify the <code>~/.ssh/id_*</code> section of the next command.</p> <p><code>for keyfile in ~/.ssh/id_*; do ssh-keygen -l -f \"${keyfile}\"; done | uniq</code></p> <ul> <li>DSA or RSA 1024 bits: This is a red flag. Unsafe.</li> <li>RSA 2048: This is a yellow flag, recommended to change</li> <li>RSA 3072/4096: Good, but ED25519 is better!</li> <li>ECDSA: depends. Recommended to change</li> <li>ED25519: The best choice!</li> </ul> <p>Here is what it looked like on my laptop.</p> <pre><code>for keyfile in ~/.ssh/id_*; do ssh-keygen -l -f \"${keyfile}\"; done | uniq\n256 SHA256:2uWbzS9A/4dI+ZS+bM8f5q6wTqeb8vsBvylvQi5B9dE mhubbard@1S1K-G5-5587-2024-07-08 (ED25519)\n256 SHA256:2XtMiDbg64rBnUXOzcFFXqwzUbbAjAO2Y9RwrWvVTB4 michael.hubbard999@gmail.com (ED25519)\n4096 SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E mhubbard@1S1K-G5-5587-2024-07-11 (RSA)\n2048 SHA256:YRwfm94a26cfCQZK6mT3SO29XaLoAHWJgnixN2OZDM0 mhubbard@1S1K-G5-5587 (RSA)\n</code></pre> <p>You can see the comment on the first key.</p> <p>You can print the file name out by adding a print statement:</p> <pre><code>for keyfile in ~/.ssh/id_*.pub; do ssh-keygen -l -f \"${keyfile}\"; print ${keyfile}; done | uniq\n256 SHA256:2uWbzS9A/4dI+ZS+bM8f5q6wTqeb8vsBvylvQi5B9dE mhubbard@1S1K-G5-5587-2024-07-08 (ED25519)\n/home/mhubbard/.ssh/id_custom_25519.pub\n256 SHA256:2XtMiDbg64rBnUXOzcFFXqwzUbbAjAO2Y9RwrWvVTB4 michael.hubbard999@gmail.com (ED25519)\n/home/mhubbard/.ssh/id_github.pub\n4096 SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E mhubbard@1S1K-G5-5587-2024-07-11 (RSA)\n/home/mhubbard/.ssh/id_rsa.pub\n2048 SHA256:YRwfm94a26cfCQZK6mT3SO29XaLoAHWJgnixN2OZDM0 mhubbard@1S1K-G5-5587 (RSA)\n/home/mhubbard/.ssh/id_rsa_pub_2096.pub\n</code></pre>"},{"location":"SSH/#ssh-key-permissions","title":"SSH Key permissions","text":"<p>The private key should have rw permission to only the user. No other users or groups should have any permissions. Use the following to view/set the permissions:</p> <pre><code>ls -l\n-rw-------    1 mhubbard  staff   464B Jul  8 15:54 id_custom_25519\n-rw-r--r--    1 mhubbard  staff   108B Jul  8 15:54 id_custom_25519.pub\n\nIf the permissions are wrong, use the following:\nchmod 600 ~/.ssh/id_custom_25519\n</code></pre> <p>Here is the output using keys with 0644 instead of 0600:</p> <pre><code>ssh -i ~/.ssh/juniper_ed25519_key root@192.168.10.162\nAuthorized access only! Violators will be violated!\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0664 for '/home/mhubbard/.ssh/juniper_ed25519_key' are too open.\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"/home/mhubbard/.ssh/juniper_ed25519_key\": bad permissions\n</code></pre>"},{"location":"SSH/#using-the-ssh-keys","title":"Using the SSH keys","text":"<p> KEY TAKEAWAYS</p> <ul> <li>SSH Keys use Public Key Infrastructure (PKI) instead of usernames/passwords. Keys are more challenging to brute force than passwords.</li> <li>Linux servers are very easy to configure to use ssh keys on. The <code>ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;Server_IP&gt;</code> command copies the public key to the server in one step.</li> <li>Hardware Security devices such as Yubico Yubikey and the Google Titan Security Key allow you to store your keys securely and login from any laptop or desktop.</li> <li>Many Network Devices (Cisco, Aruba, Juniper, Arista, Ubiquiti, etc.) support ssh key authentication.</li> </ul> <p>Once you have keys created what do you do with them? If you support Linux servers it's very easy to copy the public key to the server. Using a Public/Private key pair instead of a password to authenticate an SSH session is popular on Linux/Unix boxes. If you spin up a Virtual Private server on Digital Ocean or Linode you will want to use keys instead of a username and password.</p> <p>Digital Ocean, a Virtual Private Server (VPS) provider, has this advice on how you should log into their Droplets:  \"you should use public key authentication instead of passwords, if at all possible. This is because SSH keys provide a more secure way of logging in compared to using a password alone. While a password can eventually be cracked with a brute-force attack, SSH keys are nearly impossible to decipher by brute force alone.\" Plus, it means you never have to type C!$c0 again!</p> <p>See Brute Forcing SSH below for an example of brute forcing ssh with nmap.</p>"},{"location":"SSH/#ssh-keys-with-a-linux-server","title":"SSH Keys with a Linux server","text":"<p>Following along with our <code>id_custom_25519</code> example and an Ubuntu server at 192.168.10.223:</p> <pre><code>ssh-copy-id -i ~/.ssh/id_custom_25519 192.168.10.223\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/mhubbard/.ssh/id_custom_25519.pub\"\nThe authenticity of host '192.168.10.223 (192.168.10.223)' can't be established.\nRSA key fingerprint is SHA256:oKfQX+/8lwu3rfP8OMRpAfoeJo8EaOeUZ9kxMQfFNsc.\nThis host key is known by the following other names/addresses:\n    ~/.ssh/known_hosts:186: [hashed name]\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nmhubbard@192.168.10.223's password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh '192.168.10.223'\"\nand check to make sure that only the key(s) you wanted were added.\n\n\n~/.ssh \u231a 13:19:05\n$ ssh 192.168.10.223\nWelcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-35-generic x86_64)\n\u256d\u2500mhubbard@ubuntu-server ~\n\u2570\u2500$ cat ~/.ssh/authorized_keys\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGrwMtnnQo0kfjQVwcWOKx72SgsTB7Qj8FPTyyVwduxn mhubbard@1S1K-G5-5587-2024-07-08\n</code></pre> <p>You can see how the comment makes the key easy to identify in the authorized_keys file.</p> <p>Since we created a passphrase for the key we are prompted for the passphrase, then logged in.</p>"},{"location":"SSH/#automatic-logins","title":"Automatic logins","text":"<p>If you need to have an automated login, you can create a key without a passphrase. The actual connection is still secure, but if you lose control of the private key anyone can use it. It's one of those religious arguments that exit in security circles.</p> <p>Alternatively, you can add the ssh private key to the ssh agent using the following command:</p> <p><code>ssh-add ~/.ssh/id_custom_ed25519</code></p> <p>You will be prompted for the passphrase.</p>"},{"location":"SSH/#ssh-add-switches","title":"ssh-add switches","text":"<p>You can find all switches using <code>man ssh-add</code>. Here I'm listing the more common switches.</p> <ul> <li>D Deletes all identities from the agent.</li> <li>d Deletes the given identities from the agent. The private key files for the identities to be deleted should be listed on the command line.</li> <li>K Load resident keys from a FIDO authenticator.</li> <li>k When loading keys into or deleting keys from the agent, process plain private keys only, skipping certificates.</li> <li>L Lists public key parameters of all identities currently represented by the agent.</li> <li>l Lists fingerprints of all identities currently represented by the agent.</li> <li>X Unlocks the agent. This asks for a password to unlock.</li> <li>x Locks the agent. This asks for a password; the password is required for unlocking the agent. When the agent is locked, it cannot be used for authentication.</li> </ul> <p>Be sure to ask your security team if using the ssh-agent is permitted.</p>"},{"location":"SSH/#i-get-an-error-when-trying-to-use-the-key","title":"I get an error when trying to use the key","text":"<p>If the login fails, rerun the ssh command with -vvvv <code>ssh -vvvv 192.168.10.253</code>. If you see a debug message <code>sign_and_send_pubkey: signing failed: agent refused operation</code> the first time you use the key enter the following:</p> <p><code>ssh-add</code> to add the default private keys to the ssh agent and</p> <p><code>ssh-add ~/.ssh/id_custom_ed25519</code> to add our custom key.</p> <p>You can view the keys in the agent using:</p> <pre><code>ssh-add -l\n4096 SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E mhubbard@1S1K-G5-5587-2024-07-11 (RSA)\n4096 SHA256:569SKPB/kLsw1DqVlSV4J+bE+NYUDfY/LHNbvjvRs+o mhubbard@vectorusa.com (RSA)\n</code></pre> <p>For the first key you can see the size, 4096 bits, the fingerprint, the label we used when creating the key and the type (RSA).</p>"},{"location":"SSH/#references-ssh-add","title":"References ssh-add","text":"<ul> <li>SSH Keys for SSO: Usage, ssh-add Command, ssh-agent</li> </ul>"},{"location":"SSH/#ssh-keys-with-github","title":"SSH Keys with github","text":"<p>Github doesn't accept username/password for repositories any longer. You will need to use a key pair and configure git to use it. I created a key pair just for github named id_github. To add it to your global git configuration:</p> <pre><code>add the key\ngit config --global user.signingkey ~/.ssh/id_github.pub\n\nDisplay the user settings in the ~/.gitconfig file\ngit config --global --list\nuser.name=rikosintie\nuser.email=michael.hubbard999@gmail.com\nuser.signingkey=/home/mhubbard/.ssh/id_github.pub\n</code></pre> <p>Once you have the key configured in the ~/.gitconfig file you will need log into github.com, settings, SSH and GPG keys, and click \"New SSH key\".</p>"},{"location":"SSH/#using-ssh-keys-with-network-devices","title":"Using SSH keys with network devices","text":"<p>First off why would you want to use ssh keys on switches/routers/etc? With large customers you typically use Cisco ISE, Aruba Clearpass or Microsoft Network Policy Server (NPS) and authenticate to Microsoft AD.</p> <p>But with smaller customers you may not have these infrastructure services available. Using SSH keys on switches/routers/etc when ISE, Clearpass or NPS isn't available is better than using local users and passwords. In this situation, over time,  the customer will usually have several different usernames and passwords across different switches and it can be a nightmare to log into all the switches.</p> <p>They may not even have the credentials for all devices. In that case, you may want to use the nmap ssh-brute script. See Brute Forcing SSH below for an example of brute forcing ssh with nmap.</p> <p>If you add your public key to the network devices before deploying, at least you will be able to log in efficiently without wasting time trying different passwords. You can also give the private key to the customer and they can import it into Putty.</p>"},{"location":"SSH/#using-ssh-keys-with-a-cisco-ios-switch","title":"Using SSH keys with a Cisco IOS switch","text":"<p>Unfortunately it's not quite as easy to enable key based login on network devices but it's just a process. You can include it in your basic security template for example and automate it.</p> <p>I'm using a WS-C3850-48U running 16.12.3a CAT3K_CAA-UNIVERSALK9 for this example.</p>"},{"location":"SSH/#configure-a-time-server","title":"Configure a Time Server","text":"<p>Accurate time is required to use ssh keys. The first step is to configure a time server.</p> <pre><code>no ntp allow mode control 3\nntp server ip time-b.nist.gov\nntp server 192.168.10.222 prefer\n</code></pre> <p>The <code>no ntp allow mode control 3</code> is a Cisco recommended best practice to prevent DOS attacks.</p> <ul> <li>ntp allow mode control 3 --&gt; causes the device to respond to mode 6 packet with a delay of 3 seconds, hence rate limiting and being considered not vulnerable (recommended)</li> </ul>"},{"location":"SSH/#check-ntp-server-config-with-nmap","title":"Check NTP server config with nmap","text":"<p>nmap has two built in scripts for checking the NTP server configuration.</p> <pre><code>sudo nmap -sU -p 123 -n --script=ntp-monlist  192.168.10.253\nsudo nmap -sU -p 123 --script ntp-info 192.168.10.253\n</code></pre> <p>The first one is for verifying that your ntp server doesn't support the \"Monitor List\" command that led to serious DDoS attacks back in 2014. Here I ran it against the ntp server on the Cisco 3850:</p> <pre><code>sudo nmap -sU -p 123 -n --script=ntp-monlist  192.168.10.253\nStarting Nmap 7.94 ( https://nmap.org ) at 2024-07-12 13:50 PDT\nNmap scan report for 192.168.10.253\nHost is up (0.0052s latency).\n\nPORT    STATE SERVICE\n123/udp open  ntp\nMAC Address: F8:7B:20:34:A3:C6 (Cisco Systems)\n\nNmap done: 1 IP address (1 host up) scanned in 5.34 seconds\n</code></pre> <p>Notice the only output is that the port is open. If the switch supported \"monitor list\" it would have returned a list of devices that have requested time.</p> <p>The second is very useful when you are having time issues. You can run it against the configured time server and see if you get response. I have an alias setup for this script:</p> <pre><code>#Run the nmap ntp-info script. $1 is the ip of the ntp server.\nalias mw-ntp='(){sudo nmap -sU -p 123 --script ntp-info $1}'\nmw-ntp 192.168.10.253\n</code></pre> <p>Here I ran it against my Cisco 3850 after I configured it for time.</p> <pre><code>sudo nmap -sU -p 123 --script ntp-info 192.168.10.253\nStarting Nmap 7.94 ( https://nmap.org ) at 2024-07-12 13:50 PDT\nNmap scan report for 3850.pu.pri (192.168.10.253)\nHost is up (0.0032s latency).\n\nPORT    STATE SERVICE\n123/udp open  ntp\n| ntp-info:\n|_  receive time stamp: 2024-07-12T20:51:09\nMAC Address: F8:7B:20:34:A3:C6 (Cisco Systems)\n\nNmap done: 1 IP address (1 host up) scanned in 10.35 seconds\n</code></pre> <p>To verify that the switch is syncing with the ntp server I configured:</p> <pre><code>show ntp association\n\n  address         ref clock       st   when   poll reach  delay  offset   disp\n+~129.6.15.29     .NIST.           1    369   1024   377 68.998  -1.408  1.066\n*~192.168.10.222  129.6.15.28      2    109   1024   377  0.989   0.619  1.037\n * sys.peer, # selected, + candidate, - outlyer, x falseticker, ~ configured\n</code></pre>"},{"location":"SSH/#add-a-domain-name-create-the-key-set-ssh-v2","title":"Add a Domain Name, create the key, set SSH v2","text":"<p>To enable ssh on the switch you have to create an SSH key pair. I used a modulus of 4096, the maximum. It took 113 seconds to generate!  We will copy our RSA public key to the switch's pubkey-chain in the next section. That public key will be used with our private key to secure the SSH session.</p> <pre><code>ip domain name pu.pri\ncrypto key generate rsa modulus 4096 exportable label RSA-SSH-Key\nip ssh version 2\nip ssh rsa keypair-name RSA-SSH-Key !associate keys to SSH\n</code></pre> <p>Optional but informational</p> <p>The \"exportable\" parameter. This isn't required but I wanted to point that out that you can make the keys exportable. It's not so important in this case but if you have setup GetVPN on a router you absolutely want to export the keys used for the tunnels. If you don't and the router fails you will have to touch EVERY tunnel once you replace the hardware. If you have exported the keys you just reload them on the new hardware and call it a day.</p>"},{"location":"SSH/#display-the-key","title":"Display the key","text":"<pre><code>show crypto key mypubkey rsa RSA-SSH-Key\n% Key pair was generated at: 14:15:39 PDT Jul 21 2024\nKey name: RSA-SSH-Key\nKey type: RSA KEYS\n Storage Device: not specified\n Usage: General Purpose Key\n Key is exportable. Redundancy enabled.\n Key Data:\n  30820222 300D0609 2A864886 F70D0101 01050003 82020F00 3082020A 02820201\n  009EB39F 14DF98CA 96D74597 E3056C4B A1DD37B3 71019ADC D8FD0AD7 81335E21\n  D14CC267 79409A66 FD687EA3 312D65A5 E6D14A22 0EE598BC 0991E5FB 91261101\n  B29BDF85 05058257 8373F9B6 83093E65 ABBCF25C 422965EB 5D84A07D 9E97F8D1\n  E834BE4B 74970547 42F5C48C BFA3A968 00569467 FA65080B A0F5F8DC 27AFC43C\n  B00FBAE6 899C8B5C 3B5F6A6A 9F8EC065 C7A50455 6B5D4345 F3CD9B74 C55D0180\n  F8870094 55A86FDF A514C4BA 74FC2E21 B7F3D7F4 1924847C B420BF2C 4FD14250\n  C7D40209 914F3FF6 67F2EEEA F4674BDF FF692E36 C73BC4DF 597261D2 80B7FFC3\n  DAF6E93C C167F196 D1A3B7AE A4B8EFC3 1FB3DA2C 681C1A9F 601F096E 1E73534F\n  CCE25F9E DC753531 98DADDB1 C6C127E9 033EF061 7EB1DD44 33186410 15D23500\n  A5569BE0 B1FB1C5F 83C017C2 8C223DD5 C07B3759 816E84B7 D9D6E503 C0A3DDD3\n  5B3323AE 485744F9 B131422F 45E8DAED CF595280 F8ACE13A E2DFF9BE A75EA8ED\n  78AB6DB3 52FC940C 40D4AC25 CF976D72 47E51F67 6EC05E8F CB6BEE99 53318C0D\n  076880F0 A6AE0FD6 950AE9ED B17C5CCE D95209EA CA74B09B 83B103A9 510357CB\n  D5514EA8 DD71BFC4 C57E7FD6 8EFE80E1 FA6CAADD 751EA11B 7D179394 791CE1BC\n  71660659 E59E9FA0 9D0A3A0C 078C569D FF3CCB4D 4D6191E6 1A627C1E 64BC9649\n  C25476B0 610EA0BC 1A124B93 FD6B61BC F5B09D38 427019FD D8D7B5D8 AB0AF723\n  B5020301 0001\n</code></pre>"},{"location":"SSH/#export-the-key","title":"Export the Key","text":"<pre><code>(config)#crypto key export rsa RSA-SSH-Key pem terminal 3des Sup3rS3crt\n% Key name: RSA-SSH-Key\n   Usage: General Purpose Key\n   Key data:\n-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnrOfFN+YypbXRZfjBWxL\nod03s3EBmtzY/QrXgTNeIdFMwmd5QJpm/Wh+ozEtZaXm0UoiDuWYvAmR5fuRJhEB\nspvfhQUFgleDc/m2gwk+Zau88lxCKWXrXYSgfZ6X+NHoNL5LdJcFR0L1xIy/o6lo\nAFaUZ/plCAug9fjcJ6/EPLAPuuaJnItcO19qap+OwGXHpQRVa11DRfPNm3TFXQGA\n+IcAlFWob9+lFMS6dPwuIbfz1/QZJIR8tCC/LE/RQlDH1AIJkU8/9mfy7ur0Z0vf\n/2kuNsc7xN9ZcmHSgLf/w9r26TzBZ/GW0aO3rqS478Mfs9osaBwan2AfCW4ec1NP\nzOJfntx1NTGY2t2xxsEn6QM+8GF+sd1EMxhkEBXSNQClVpvgsfscX4PAF8KMIj3V\nwHs3WYFuhLfZ1uUDwKPd01szI65IV0T5sTFCL0Xo2u3PWVKA+KzhOuLf+b6nXqjt\neKtts1L8lAxA1Kwlz5dtckflH2duwF6Py2vumVMxjA0HaIDwpq4P1pUK6e2xfFzO\n2VIJ6sp0sJuDsQOpUQNXy9VRTqjdcb/ExX5/1o7+gOH6bKrddR6hG30Xk5R5HOG8\ncWYGWeWen6CdCjoMB4xWnf88y01NYZHmGmJ8HmS8lknCVHawYQ6gvBoSS5P9a2G8\n9bCdOEJwGf3Y17XYqwr3I7UCAwEAAQ==\n-----END PUBLIC KEY-----\n-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,067C3CC2D69C7213\n\nTQ6ytl7+uSw/P4lHdpykCnJux8hAfT3LnC7OPcUE0hRjVPhP0+dPC4AlYhZ9AuPw\n1J3tXogtfy+gry5lmRZn6xa6HFvxGywfA5ekj7jfYWiIp9tlC4YqZFFgkdLC5gwJ\nnEov0ZzXYPU9gmRBloA5lpFtAPuhoSVXscCoDBnrsdxfLa7yQbd7LjQKp9xCWtF/\nCjN392p7TPS4tNE7X8SE4F+dm7DOFdUUalcV3J0CLtIkNs/wxJke+qheBqIgVT3o\n2fhJJNLc09nvsetyI/ezxqAidwBK47ZU7lsmu7O59uRCRwUndedIWMoRZ8Odr68Y\ng5XEhoNiDFGS743kIoiL0Ahx2fCg+crh+Kw1vO3GbLDBfG0jtIKOcO3ua+laC2cB\nUk5Vj4UEztK9TzD/3MzAOQlBdxDnfMTCWI0qyKuQ5vcPap+mEBk+FVkyftu+aV4n\nAat8vCdWGxDSKueHgHNggR2JvP371i4ZfbIjtO8nQDGz9DYsYuSNPxl0xjr9Ivd3\nLGfz3srfe6R4NHlu2g2fzp4jLumfB79t6ZO2GPTxGtTs6OYEvdN9zrH2yGw7VYOP\ngMrvZcXpKUADZyDzO+Dt0prsRAsYruM5n5E/ofwr/tgqH8cpnJ6c6rcUzFbZMnp5\nMxjas3IdYZ5YoS3yPlUfIq/tFfXZgqJmxxNJyjZcQn1Q0H9RFv3jZcjdOlwWvuV2\nJs5tn/ZrzV/lUengx6lkCuLA33vrDQjmM2K4xScbKbuNDW/xjxHoFyUkj0oNretU\nxIvl+O3vVRA0wRVmtRUDBN/2r9eOqGsDX2BynCnksvO8hdn2JF4k7jsClVn5jYcg\nLMVUEKsWiLNkUWJlcw/fkT38gAF5DH8J0yjz0rrhzkJ7dMwDcMc0qA9DGUy8Kwj6\nmUZtr8TR1VlwRB9O3dFvdo9TGzhlugNE0Tm8CaOp8bS5wPiKUQPPw4EbSPBYdo/7\nEBBincyjeNrhiSdVWIfNYhUMZU95wSafgCnHFDRIO9hdOof3550uo72xwk4NTbpm\nqc8Lqygx6DJry6hJio9emLNHKf75jX7zYsEoy6Jvofz4ky5O1Ace1scgEW7bgjoa\neXq+Xskri3T78gCUMEP4WxWlxE4UbU3GQ7LsW9x9Yz4qd/BkcvSD1VmTcju3t/KC\n8vRx0LwaqhSycedO2M0lGsmlH9OSmdh7Aui5QU3e8Zj6Vb/qUTNS88pyWWi5+zGC\nzVejUEi9zdCQcfdhdvgMphVyq86fagoEFMpu4m+61JuWFqtjLxncSr6hOW8+R9xN\nD6YiAgobH1sXkcgQsS2iRJrqGSFVL09NetEApTBpgZmmoQDd14VRKiqXFd5djHk+\nGjOqn6cFJCQynfehHKJVkoTuSLa1CYDQ46YSdEwisXU+CVDt26OZ4G3GieNAUzQn\nyTzHuONMffnjTJlSiVhbIGnV+3UMQY/lyTKyJpMePidvhC7Aue19TLc6TSZcFNIK\nQFlkONDOEftIq4ceRozKwkijqg+PmJ5iYMUwlunW9b4gqfI2QrSJ0NLZhsV0ItqT\nvbM+UTc8UI4xODdi+5CGhY5zCV+Up6EBkkrnuDCVUrPVPEBkOkkDXjPx/WVNHzQ+\noaCDxHVz8238yiw9ztqPqaL3G8JAPzNtn2mBgK/HgACsLKeD3xUsI8c27YJB/M1M\nYvL9glbKIhSuoySKxFvMEsqic2uQXDHPJTdKLPbdwnhBDiRo7vHOPXzoth74p/Hw\nxGycOvkSW1xt+vIcqdJ4dXO+sXLzzK2xd8cxrDD6yHcu3axmUNz8hfPwVUfIl8Cy\nGz0NaDyGByHhVjpigZ4GSyXiyPfIZlgol2yyblktLrPGRgJyWlU5lb6ZYm8E0+K/\ngmz85q7JgfuQm3KihDRpOq3rqaIaabg6rhgxEazk7Z/tqRg7BIZelmSI8BRGwK/t\nN76YVG19DjzLB93we25euV2pXKJ09DN4noILRK3hialvaGwT6LZ3eUqfiJ2vdHAT\n30N8/QYxfh5avrTXKO0siwTBheslDwUq31oJXOvygrCDDusZ3Qf3IKp3AjZr1fv3\nMMV3qhkpDiiLZOcqGbmLjzzONSvyq23DR31vHLhijct5lVjXtHTe1neiChvmgNp7\nciWj2J+Xu4krw/5ewO8JfQXkb2JQc/WraVKJxmT4oxPq0djGIWjOdz6RNShXIppt\nUmP9TTK9KEQbgj+lI4djj0W++fI5j6GK3CDckJoTyZ2NS2WoQU9aeb1ucxEAsye+\nsudObLhH+af1e1kFBjaMiVoGzBsTOM5tzXIlKuNASB2pJTwWPjkCWXlSDrSE0g+F\ni2bhIa/VA5Xhgb6Pxp2eUjodOHPXyFiP78BpjOtLRrVwp70QHudXbXTqmMceE3DV\nrHD3u2ag5HO66RpE1Jgd0VBt4ImQ9aNOZemXmLC/Z+S5Zz5lrkR5Ar8q6LONYxSL\n3r7VfyLbzHz2itnsoXM0rJ9WY80su3cz1pbYW20kURVkRAfgUTk9si0w2nhZfLnr\n9uQtsgPc10z72BhlLjhMhq2SFK6HUQUUpi4oehOmSWz6xr627GyOV+u5A6SRlGlV\n4Ps4t9Ug8+wjsC+nC/B9DZkB6dEE4iESXbblx4fI/EN8BwGUgBQvh/1PV8uRA+ND\neiwXU4vY3MR/Iy4G4Rp8JbJggkNPFOmKhStoH3U06Zi+9E2lXhXVNIadGyRCmeXI\np77a8fCXIofO20R0lHyOW4Za0eJ8+xDcE26wRAOvXa80IIPu5rfNszKz4cTep4/q\naShY1vQmBlfgge0D5G1cDG05kN8gJlHY5Q8z8KdMXJtRNG+ae2yoWSHb1Ca0Cnul\nj4oyrxUhaG4UtR0W7czGIb8oMj8vfhd6PxYsZIjpnQHBSx3HvCeue7ef1+Zf/P1H\nX4/JfLE14Qe85/IKYZD9wXEth4zFbGpUsDE3YQe2YQLsOUgZZeQhvgTHOYDCxwTA\n9abHL6YkXTWrcTc2dXMsrgIVCXyGJYmdVLX761y3sCiSMwoYSFC+inuPIPjZVh5y\nbUtxlWRFyuRx0t0eFzb7rMHf9y0KvCfr3RTRnVNa/1l0dd3UJ+ok7RCGHyynYwZr\nn6FpY2CsvK9R5cDrjLWMjjHCC4Y+adD3pS1g4CQWH3saQH1PmbSQ9ul/K8fYYe2v\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>Copy the key stating at <code>BEGIN PUBLIC KEY</code> until <code>END PRIVATE KEY</code>, save it to a file and store it in a secure place.</p>"},{"location":"SSH/#configure-aaa-authentication","title":"Configure AAA authentication","text":"<p>The aaa new-model command causes the local username and password on the router to be used in the absence of other AAA statements. Once you enter \"aaa new-model\" you will not be able to enter \"login local\" on vty line configuration. If you had login local configured it will be removed.</p> <p>When you create the username be sure to include a secret. If you don't, anyone will be able to login with just the username. As always, create a strong secret and use a password manager to store it.</p> <pre><code>(config)#username mhubbard privilege 15 algorithm-type scrypt secret ^8(nn-!#who\n(config)#aaa new-model\n(config)#aaa authentication login default local\n(config)#aaa authorization exec default local\n(Authentication through the line password is not possible with SSH)\n</code></pre>"},{"location":"SSH/#configure-the-vty-lines","title":"Configure the vty lines","text":"<pre><code>(config)#line vty 0 4\n(config-line)#transport input ssh\n(config-line)#logging sync (prevents console messages from interfering with your inputs)\n</code></pre>"},{"location":"SSH/#add-your-public-key-to-the-device","title":"Add your PUBLIC key to the device","text":"<p>Open the public key file you created earlier in a text editor (not a word processor). Copy the text between the comments. If you generated a 2048/4096 bit key you will need to break it into smaller pieces or you may see \"%SSH: Failed to decode the Key Value\" when you exit. I break it into 100 characters per line.</p> <pre><code>gnome-text-editor id_rsa.pub\nbreak the lines into lengths of 100 characters\ncopy the text after ssh-rsa till the comment begins.\nclose the key file but do not save it\n</code></pre> <p>Paste the key into the device</p> <pre><code>(config)#ip ssh pubkey-chain\n(conf-ssh-pubkey)#username mhubbard\n(conf-ssh-pubkey-user)#key-string\n(conf-ssh-pubkey-data)#AAAAB3NzaC1yc2EAAAADAQABAAACAQDhgWxFej4ybQHAEtMHo9gYL6zU5t7HeQE0vy3IFONK9JFsM0HSoxZPK18nh26\n(conf-ssh-pubkey-data)#58l+i8FonksmnhhjX+VOn6dkPwdedEHAOZeSPNGbPdCwQeMZhRZSgE+NCxCesgp3wOOlYLvIaBYFnpF3TbXG8SGSjPmXvupvl75\n(conf-ssh-pubkey-data)#6Obax6cxi/o5MvnRi0aA4kmQYkoDHm/3SDc/fkeEJ3Cqljsc4kTJOGOLiFvfik+wDFILt630J/2cKV/iGhk98cYxVUsPVtlV254\n(conf-ssh-pubkey-data)#ayu8x1aUxTzIhdj11T7Yw20H/+2NHbGbwLRyNn2xMPgFz6UmqnPMreNBWspR0xGcmCjqIxsI73UNZjA0YMm7ob1wTDPHRbJU7Yn\n(conf-ssh-pubkey-data)#j1Oyiqo4fISNtc6nI+MY0t95JEKBcpt653Bq//h/319pzI2h0FAh4UL2XgV581TWMZWtAe2gFQmh5wLyUhxkPyZpwdZomxS58An\n(conf-ssh-pubkey-data)#ZbxQtO8YaSJTGbWzd06lPaWYKYQ+6CMmfGTdPMPS3LsG17rfWUoE4T9ot8uWvD/+ZfteGId+gftva8kxl0rX3VW4lmOG5Vf0FNG\n(conf-ssh-pubkey-data)#HoVRNyQ00xj/rRRo6zgfzJQe7rpjp1nEWmftc2ZouTHtidGCtJ2fmfFS09A+kUHdY51gS1FeJLCySSz+2HIkZpaOVOqlhqz//xa\n(conf-ssh-pubkey-data)#g9QIk4RSWAfpKt+TqB5R+iBCpWYoQ==\n(conf-ssh-pubkey-data)#exit\n(conf-ssh-pubkey-user)#end\n</code></pre> <p>Make sure to press <code>enter</code> after <code>key-string</code> before you paste the key in. You have to use <code>exit</code> to end the key-string input. Then use <code>end</code> to exit configuration mode.</p>"},{"location":"SSH/#verify-the-ssh-configuration","title":"Verify the ssh configuration","text":"<pre><code>show run | sec ssh\nip ssh source-interface Vlan10\nip ssh rsa keypair-name RSA-SSH-Key\nip ssh logging events\nip ssh version 2\nip ssh dh min size 4096\nip ssh pubkey-chain\n  username mhubbard\n   key-hash ssh-rsa 5D24EA1D261C1836E437F4E67E2CEBEB\n   key-hash ssh-rsa CCA79DBB37A7EA060C781DA2767509C0\nip ssh server algorithm mac hmac-sha2-256 hmac-sha2-512\nip ssh server algorithm encryption aes256-ctr aes192-ctr aes128-ctr\nip ssh server algorithm kex diffie-hellman-group14-sha1\n transport input ssh\n transport output ssh\n</code></pre> <p>Use the hash for setting up the rest of the switches</p> <p>You can use the HASH instead of the key for the next devices you setup. Instead of using \"Key-string\" in the ip ssh pubkey-chain statement use <code>key-hash ssh-rsa 5D24EA1D261C1836E437F4E67E2CEBEB</code>.</p> <p>If you need to remove a key use the <code>no</code> keyword with the key-hash keyword. I needed to remove the old 2096 bit RSA key after I changed the <code>ip ssh dh min key size</code> to 4096.</p> <pre><code>ip ssh pubkey-chain\nusername mhubbard\nno key-hash ssh-rsa 4682578A0267D583568FCDCD1229B62C\n</code></pre>"},{"location":"SSH/#login-using-the-ssh-keys","title":"Login using the SSH Keys","text":"<p>Continuing in the theme of network devices having legacy crypto, you will have to add <code>PubkeyAcceptedKeyTypes +ssh-rsa</code> to the <code>~/.ssh/config</code> file for the host.</p> <p><code>ssh -i ~/.ssh/id_rsa.pub 192.168.10.253</code></p> <p>Remember that you can add -vvvv to the command to get verbose debugging. I had to do that because the key was failing. In the debugs I saw <code>send_pubkey_test: no mutual signature algorithm</code> which reminded me to add  <code>PubkeyAcceptedKeyTypes +ssh-rsa</code> to the config file for this host.</p> <p>You can also use <code>ssh 192.168.10.253</code> and the SSH client will try all the keys. I prefer to explicitly call the key, but it doesn't matter if you don't.</p> <p>Here is the complete configuration and debug to log into the Cisco 3850 using the id_rsa key:</p> <pre><code>gnome-text-editor ~/.ssh/config\nHost 192.168.10.253\n        Protocol 2\n        HostKeyAlgorithms +ssh-rsa,ssh-dss\n        MACs hmac-sha2-512,hmac-sha2-256\n        KexAlgorithms diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\n        PubkeyAcceptedKeyTypes +ssh-rsa\n        IdentityFile ~/.ssh/id_rsa\n\nssh -vvvv 192.168.10.253\nNext authentication method: publickey\nOffering public key: /home/mhubbard/.ssh/id_rsa.pub RSA SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E explicit agent\nsend packet: type 50\nwe sent a publickey packet, wait for reply\nreceive packet: type 60\nServer accepts key: /home/mhubbard/.ssh/id_rsa.pub RSA SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E explicit agent\nsign_and_send_pubkey: using publickey with RSA SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E\nsign_and_send_pubkey: signing using ssh-rsa SHA256:0WF9uxNBCPeeHzMAGsYJy2wrsOXNrhPxJ+3lp2PxI+E\nsend packet: type 50\nreceive packet: type 52\nAuthenticated to 192.168.10.253 ([192.168.10.253]:22) using \"publickey\".\n</code></pre> <p>Once you have entered the passphrase it will be added to the ssh agent and you won't be prompted again until you close the terminal and open a new one. If you want to remove the key from the agent without closing the terminal use:</p> <p><code>ssh-add -D ~/.ssh/id_rsa</code></p> <p>If you want to change the password on the key use:</p> <p><code>ssh-keygen -p -f ~/.ssh/id_rsa</code></p>"},{"location":"SSH/#using-keys-with-putty","title":"Using keys with Putty","text":"<p>If you want to connect from a Windows computer with Putty I have a blog with a tutorial on how to create keys and connect using putty/puttygen - Authenticating to Cisco devices using SSH and your RSA Public Key.</p>"},{"location":"SSH/#can-users-still-login-who-dont-have-keys-configured","title":"Can users still login who don't have keys configured?","text":"<p>Yes, the key-chain must be configured for each user.</p> <pre><code>sh run | sec pubkey\nip ssh pubkey-chain\n  username mhubbard\n   key-hash ssh-rsa 5D24EA1D261C1836E437F4E67E2CEBEB\n   key-hash ssh-rsa CCA79DBB37A7EA060C781DA2767509C0\n</code></pre> <p>Here are the users I have configured on this switch:</p> <pre><code>show run | sec user\nusername thubbard privilege 15 secret 9 $9$95tTO1OC4HNmIE$bt1Z4.7aw/EBUQHl3NmLUNMacw4hRPI.742Kbs2r4jA\nusername mhubbard privilege 15 secret 9 $9$y4j0lAgHcDtV3.$sH6LI79G3qmdpVdICokss8dzjGUC3u7we4.wcPnwNQ.\n  username mhubbard\n   key-hash ssh-rsa 5D24EA1D261C1836E437F4E67E2CEBEB\n   key-hash ssh-rsa CCA79DBB37A7EA060C781DA2767509C0\n</code></pre> <p>You can see that <code>thubbard</code> has to use a password but <code>mhubbard</code> can use a password or SSH keys. User <code>mhubbard</code> has two keys listed because I generated keys on my Ubuntu machine and my M1 MacBook Air. I could have copied my private key from Ubuntu to the MacBook but I wanted to show two keys.</p> <p>Note</p> <p>IOS only allows two keys in the key-chain.</p> <p>You can see in the ouput the user's secret is hashed as type 9. In Cisco speak that is scrypt. Scrypt is a <code>memory</code> hard hash so having hardware GPUs doesn't speed up reversing the hash. To create a users with scrypt:</p> <p><code>username thubbard privilege 15 algorithm-type scrypt secret Sup3rS3cr3t</code></p>"},{"location":"SSH/#using-the-keys-with-a-junos-switch","title":"Using the keys with a JunOS switch","text":"<p>Setting up the JunOS switch is similar to setting up the Cisco switch.</p> <pre><code>ssh -i ~/.ssh/juniper_ed25519_key root@192.168.10.162\nAuthorized access only! Violators will be violated!\nEnter passphrase for key '/home/mhubbard/.ssh/juniper_ed25519_key':\nLast login: Fri Jul 12 14:01:28 2024 from 192.168.10.143\n--- JUNOS 18.2R1.9 Kernel 64-bit  JNPR-11.0-20180614.6c3f819_buil\nroot@TEST-Router:~ #\n</code></pre>"},{"location":"SSH/#using-the-keys-with-an-aruba-cx-switch","title":"Using the keys with an Aruba CX switch","text":"<p>The Aruba CX switches are easy to set up for SSH and public key access. They support strong cipher suites and it's easy to reset the cipher suite if you remove some and your client can't connect. I personally think they set the standard for how the SSH server implementation should be done on network devices.</p>"},{"location":"SSH/#initial-setup","title":"Initial setup","text":"<p>In the Cisco section above we configured NTP, and the user accounts before setting up SSH. You need to do the same for the Aruba CX.</p> <p>You need to decide which VRF to enable the server on. In this example, we will use the mgmt vrf. Use the following command to enable the ssh server:</p> <pre><code>ssh server vrf mgmt\n</code></pre> <p>When an SSH server is enabled on a VRF for the first time, host-keys are generated. Keeping with the \"Aruba sets the standard for ssh\" theme, the default RSA key is 4096 bits!</p> <p>Note</p> <p>If the host-key of the given type exists, a warning message is displayed with a request to overwrite the previous host-key with the new key.</p> <p>That isn't a problem as far as setting up ssh, but keep in mind that if you have connected before, the client will complain that the key has changed.</p> <p>If that happens you will see the following message:</p> <pre><code>ssh 192.168.10.233\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ED25519 key sent by the remote host is\nSHA256:fImGI4bZxLw7eRKZ1Sz5PJPLVGy...J3W4.\nPlease contact your system administrator.\nAdd correct host key in /home/mhubbard/.ssh/known_hosts to get rid of this message.\nOffending RSA key in /home/mhubbard/.ssh/known_hosts:200\n  remove with:\n  ssh-keygen -f \"/home/mhubbard/.ssh/known_hosts\" -R \"192.168.10.233\"\nHost key for 192.168.10.233 has changed and you have requested strict checking.\nHost key verification failed.\n</code></pre> <p>You can copy/paste the following into the terminal to remove the old host:</p> <pre><code>ssh-keygen -f \"/home/mhubbard/.ssh/known_hosts\" -R \"192.168.10.233\"\n</code></pre> <p>On macOS you don't get the command to delete the old key but it does give you the line number in the <code>~/.ssh/config</code> file that you need to delete.</p>"},{"location":"SSH/#viewing-the-host-keys","title":"Viewing the host-keys","text":"<pre><code>show ssh host-key ?\n  ecdsa    Show SSH server ECDSA host-key.\n  ed25519  Show SSH server ED25519 host-key.\n  rsa      Show SSH server RSA host-key.\n\nTo Show all keys\n\nshow ssh host-key\n\nKey Type : ECDSA     Curve : ecdsa-sha2-nistp256\necdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEcAjbbHW7bUnubX5SFZJ31Tkgs5dDSXMxyrXFFVC8P+rm48GQ75WIvxp4mPFFsmkJoi5OhuAA+rTncTXl3bAYM= root@switch\n\n\nKey Type : ED25519\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOV1JvayGmBsryg+uyR/fKwABQ5jllra6mBRnc1pwprY\n\n\nKey Type : RSA       Key Size : 4096\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCpG5P1MQOp1q98++nLoVMnwwZFsYgapfB/akN44rJ+ULOusPX95+sGCDl33kBebzeA0+AbkvBNetZRWJ7J+CBihpQ9f9ms6jS4wb1GtlV/HlP9JbpYEPIfCH9HxKHThuMLd36K/UeDkaZo4B22l8DJBIJrYl5T5hVZ73VBqdf7O/UsC9gUGZSDp7nXmCFWc38x8CW6+VBNo0K7MsHHff7ajLAi6lfrlbSOOn/Xzls3eil9bX0uzL69biflyA6y7ESnMX7PFijOoYqz2hp0cxk4La0NSJbRi+efbUyyaZ/0/xYUcnrv/QXYvCPGZEfDOycyBYgtgVD942OO+OZC3NB5jRb6QtIlb+tbw43yGcDdQiFrPUi3cxZlvnUr/CCVrnSaNEj4yliQ+QF9tLG5ap+cbAxW8I6ofy/eX6xvIuNf43ycilN+E/OJbPTvW4lndTATDeyNhHeIrPae87x0Cx0x2sHEi5dXgJdl/IQlrJFNLqydJQq1DSazVSaG7Zfd12a/9XW0fm/1InS/rQ5gd9Rot4Ou/VtNO1+v7CyAG2aaPKLaYSi4jfbCB7NFrbSlqdzLP4ODVzsWZg6CNk9bqmAb/eKaMCXK2u4w0rKVPcQJ5yYWThmAb6X2SUEi3mbGZzOEko2T9uSHpPch1EOJ6gmPkJ7kt53x2fDfbpTcUoBTEw==\n</code></pre>"},{"location":"SSH/#list-the-enabled-auth-methods","title":"List the enabled auth methods","text":"<p>Before adding our public key check to make sure publickey authentication is enabled. Public Key Authentication is enabled by default.</p> <pre><code>show ssh authentication-method\n SSH publickey authentication  : Enabled\n SSH password authentication   : Enabled\n SSH two factor authentication : Disabled\n</code></pre> <p>Public key authentication can be enabled/disabled using the following:</p> <pre><code>no ssh public-key-authentication\nssh public-key-authentication\n</code></pre>"},{"location":"SSH/#add-your-public-key","title":"Add your public key","text":"<p>This is where the Aruba shines! You need to display the public key on your laptop and copy it to the clipboard. In the Creating SSH Keys section we created id_custom_25519, you can use the following commands to view that public key on your computer and copy it to the Aruba:</p> <pre><code>gnome-text-editor id_custom_25519.pub\nCX-10-10(config)# user mhubbard authorized-key ssh-ed25519 AAAAC3NzaC1...FC8 mhubbard@HP8600-2328.local-2024-07-08\nend\nwrite mem\n</code></pre>"},{"location":"SSH/#view-the-public-key","title":"View the public key","text":"<p>In this example, I have copied the public keys from my Linux and Mac laptops:</p> <pre><code>CX-10-10# show user mhubbard authorized-key\n\n1. ed25519 AAAAC3NzaC1lZDI1NTE5...uxn mhubbard@1S1K-G5-5587-2024-07-08\n\n2. Key Type : ED25519\nssh-ed25519 AAAAC3NzaC1lZDI1NT...KFC8 mhubbard@HP8600-2328.local-2024-07-08\n</code></pre> <p>That's all that's needed to setup pulic key login on the Aruba CX switches!</p>"},{"location":"SSH/#list-logged-in-users","title":"List logged in users","text":"<p>I logged into the switch from my Linux and Mac laptops:</p> <pre><code>show ssh server sessions all-vrfs\n\nSSH sessions on VRF default :\n    IPv4 SSH Sessions :\n        Server IP        : 192.168.10.233\n        Client IP        : 192.168.10.106\n        Client Port      : 64407\n\n        Server IP        : 192.168.10.233\n        Client IP        : 192.168.10.130\n        Client Port      : 42954\n\n    IPv6 SSH Sessions :\n        IPv6 session does not exist.\n</code></pre>"},{"location":"SSH/#configure-key-exchange","title":"Configure Key Exchange","text":"<p>The default key exchange algorithms are good but <code>diffie-hellman-group14-sha1</code> is available. Since I'm using Ubuntu 24.04 and this switch is in my lab I changed the algorithms using the following. Notice that no comma is used between the algorithms.:</p> <pre><code>ssh key-exchange-algorithms curve25519-sha256 curve25519-sha256@libssh.org ecdh-sha2-nistp256 ecdh-sha2-nistp384`\n</code></pre>"},{"location":"SSH/#configure-macs","title":"Configure MACs","text":"<p>MAC stands for  message authentication code. In SSH it's actually HMAC, or Hash Message Authentication code. The default MACs are good but it does include <code>hmac-sha1</code> which is weak. Since I'm using Ubuntu 24.04 and this switch is in my lab I changed the MACs using the following. Notice that no comma is used between the macs.:</p> <pre><code>ssh macs hmac-sha2-256-etm@openssh.com hmac-sha2-512-etm@openssh.com hmac-sha1-etm@openssh.com hmac-sha2-256 hmac-sha2-512\n</code></pre>"},{"location":"SSH/#configure-the-public-key-algorithms","title":"Configure the Public Key Algorithms","text":"<p>Again, the default public key algorithms are good but it does include ssh-rsa with is weak.  Since I'm using Ubuntu 24.04 and this switch is in my lab I changed the MACs using the following. I shortened the list substantially, and I really would just use the ssh-ed-25519 if I had all modern clients in my organization. Notice that no comma is used between the algorithms.:</p> <pre><code>ssh public-key-algorithms rsa-sha2-512 ecdsa-sha2-nistp256 ecdsa-sha2-nistp384 ecdsa-sha2-nistp521 ssh-ed25519\n</code></pre>"},{"location":"SSH/#final-ssh-ciphers","title":"Final SSH ciphers","text":"<p>Here is what the final ssh server configuration looks like. Notice that Aruba doesn't even offer ssh v1, version 2 has been available since 2006. I have no ideas why Cisco and others still ship it.</p> <pre><code>CX-10-10# show ssh server\n\nSSH server configuration on VRF default :\n\n    IP Version        : IPv4 and IPv6        SSH Version          : 2.0\n    TCP Port          : 22                   Grace Timeout (sec)  : 60\n    Max Auth Attempts : 6\n\n    Ciphers:\n    chacha20-poly1305@openssh.com, aes128-ctr, aes192-ctr, aes256-ctr,\n    aes128-gcm@openssh.com, aes256-gcm@openssh.com\n\n    Host Key Algorithms:\n    ssh-ed25519, ecdsa-sha2-nistp521\n\n    Key Exchange Algorithms:\n    curve25519-sha256, curve25519-sha256@libssh.org, ecdh-sha2-nistp256,\n    ecdh-sha2-nistp384\n\n    MACs:\n    hmac-sha2-256-etm@openssh.com, hmac-sha2-512-etm@openssh.com,\n    hmac-sha1-etm@openssh.com, hmac-sha2-256, hmac-sha2-512\n\n    Public Key Algorithms:\n    rsa-sha2-512, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521,\n    ssh-ed25519\n</code></pre>"},{"location":"SSH/#reset-cipher-suites","title":"Reset cipher suites","text":"<p>You can reset individual cipher components or run all of these to get back to factory default settings.</p> <pre><code>no ssh ciphers\nno host-key-algorithms\nno key-exchange-algorithms\nno ssh macs\nno ssh public-key-algorithms\n</code></pre>"},{"location":"SSH/#aruba-cx-ssh-server-commands","title":"Aruba CX SSH server commands","text":"<p>The following commands cover everything you need to do to configure ssh.</p> Task Command Example Enabling the SSH server ssh server vrf ssh server vrf default Disabling the SSH server no ssh server vrf no ssh server vrf default Clearing the list of trusted SSH servers for your user account ssh known-host remove ssh known-host remove 192.168.10.130 Configuring SSH to use a set of ciphers ssh ciphers ssh ciphers chacha20-poly1305@openssh.com aes256-ctr aes256-cbc Configuring SSH to use a set of host key algorithms ssh host-key-algorithms ssh host-key-algorithms ssh-rsa ssh-ed25519 ecdsa-sha2-nistp521 Configuring SSH to use a set of MACs ssh macs ssh macs hmac-sha2-256 hmac-sha2-512 Configuring SSH to use a set of key exchange algorithms ssh key-exchange-algorithms ssh key-exchange-algorithms ecdh-sha2-nistp256 Configuring SSH to use a set of public key algorithms ssh public-key-algorithms ssh public-key-algorithms x509v3-ssh-rsa ssh-rsa rsa-sha2-256 Showing the SSH server configuration show ssh server show ssh server all-vrfs Showing the active SSH sessions show ssh server sessions show ssh server sessions all-vrfs Showing the SSH server host keys show ssh host-key show ssh host-key ecdsa Show state of local password-based (for SSH) and SSH public key authentication show ssh authentication-method show ssh authentication-method Copying the client SSH public key into the key list user authorized-key user admin authorized-key ssh-ed25519 AAAAC3NzaC1lZD...uxn mhubbard@1S1K-G5-5587-2024-07-08 Removing SSH public keys from the key list user authorized-key no user admin authorized-key 2 Showing the SSH client public key list show user show user admin authorized-key Configuring SSH idle session timeout cli-session <ul><li>switch(config)# cli-session</li><li> switch(config-cli-session)# timeout 20</li></ul>"},{"location":"SSH/#using-the-keys-with-an-hpe-procurve-switch","title":"Using the keys with an HPE Procurve switch","text":""},{"location":"SSH/#colorizing-the-ssh-output","title":"Colorizing the ssh output","text":"<p>There is a github project called chromaterm that allows you to colorize the linux <code>screen</code> command which allows you to use a USB serial cable with color. Unfortunately that project was discontinued in 2022. It is still available on github if you want to try it out chromaterm</p> <p>Luckily a new project is available called chromaterm-- and works great with the latest version of Ubuntu. Here is the link chromaterm--</p> <p>On macOS, it's available from brew using <code>brew install hSaria/tap/chromaterm</code></p> <p>For Ubuntu we will clone the repository and install it. I have a directory 04_tools that I use for networking tools. You should make a directory for tools, cd into it and then run:</p> <pre><code>git clone https://github.com/hSaria/ChromaTerm--.git\ncd ChromaTerm--/src/\n./configure\nsudo make install\n</code></pre> <p>Copy the chromatermrc config file into ~/.chromatermrc. The configuration is written in Perl Compatable Regular Expression v2. You can test new regexes using Regex101. Set the FLAVOUR to PCRE2 (PHP &gt;=7.3).</p> <p>You can also use chatGPT to help you create new regexes. Just tell it you need PCRE v2 regexes and it will create a regex. It will probably be an interative deal to get the regex just right.</p> <p>I found a good starting configuration file here and then added several Cisco IOS XE regexes.</p> <p>My config file is at Ubuntu4NetworkEngineers. You can click on the linnk, and copy it. Save it to <code>~/.chromatermrc</code></p> <p>You can use chromaterm with a lot of Linux commands, to use it with ssh simply pipe the output to ct.</p> <p><code>ssh 192.168.10.253 | ct</code></p> <p>Here is an asciinema recording of chromaterm-- in action.</p>"},{"location":"SSH/#the-openssh-server","title":"The OpenSSH Server","text":"<p> KEY TAKEAWAYS</p> <ul> <li>OpenSSH is a powerful collection of tools for remotely controlling networked computers and transferring data between them.</li> <li>OpenSSH includes SCP so you can copy files to and from a network device.</li> <li>OpenSSH can use passwords or public keys to authenticate.</li> </ul> <p>Ubuntu comes with an SSH client. If you want to be able to ssh back into your laptop or send files to network devices using SCP you need to install and configure the OpenSSH server. Run these commands to enable the SSH server:</p> <pre><code>sudo apt update\nsudo apt install openssh-server\n</code></pre>"},{"location":"SSH/#useful-ssh-system-commands","title":"Useful SSH system commands","text":"<ul> <li>sudo systemctl start ssh - Start the SSH server</li> <li>sudo systemctl stop ssh - Stop the SSH server</li> <li>systemctl status ssh - Show server status</li> <li>sudo systemctl disable ssh \u2013 disables SSH server after next reboot</li> <li>sudo systemctl enable ssh \u2013 enables SSH after the next reboot.</li> </ul> <p>Example with OpenSSH installed but not started:</p> <pre><code> systemctl status ssh\n\u25cb ssh.service - OpenBSD Secure Shell server\n     Loaded: loaded (/lib/systemd/system/ssh.service; disabled; preset: enabled)\n    Drop-In: /etc/systemd/system/ssh.service.d\n             \u2514\u250000-socket.conf\n     Active: inactive (dead)\nTriggeredBy: \u25cf ssh.socket\n       Docs: man:sshd(8)\n             man:sshd_config(5)\n</code></pre> <p>Notice the Active status is <code>inactive (dead)</code>.</p> <p>Example with OpenSSH installed and started:</p> <pre><code>sudo systemctl start ssh\n\nsystemctl status ssh\n\u25cf ssh.service - OpenBSD Secure Shell server\n     Loaded: loaded (/lib/systemd/system/ssh.service; disabled; preset: enabled)\n    Drop-In: /etc/systemd/system/ssh.service.d\n             \u2514\u250000-socket.conf\n     Active: active (running) since Mon 2024-07-15 09:38:12 PDT; 4s ago\nTriggeredBy: \u25cf ssh.socket\n       Docs: man:sshd(8)\n             man:sshd_config(5)\n    Process: 3410496 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)\n   Main PID: 3410497 (sshd)\n      Tasks: 1 (limit: 38055)\n     Memory: 1.4M\n        CPU: 28ms\n     CGroup: /system.slice/ssh.service\n             \u2514\u25003410497 \"sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups\"\n\nJul 15 09:38:12 1S1K-G5-5587 systemd[1]: Starting ssh.service - OpenBSD Secure Shell server...\nJul 15 09:38:12 1S1K-G5-5587 sshd[3410497]: Server listening on :: port 22.\nJul 15 09:38:12 1S1K-G5-5587 systemd[1]: Started ssh.service - OpenBSD Secure Shell server.\n</code></pre> <p>Notice the Active status is <code>active (running) since Mon 2024-07-15 09:38:12 PDT; 4s ago</code></p> <p>You can see the daemon starting, listening on port 22, and then the status of the daemon changes to <code>Started ssh.service - OpenBSD Secure Shell server</code></p> <p>I don't use the <code>sudo systemctl enable ssh</code> command because I don't need SSH running all the time. I start and stop it as needed for added security.</p>"},{"location":"SSH/#edit-the-openssh-configuration-file","title":"Edit the OpenSSH configuration file","text":"<p>The OpenSSH server configuration file is located at <code>/etc/ssh/ssh_config</code>. To edit the configuration file use the following command:</p> <p><code>sudo nano /etc/ssh/ssh_config</code> to edit in the terminal or <code>sudo gnome-text-editor /etc/ssh/ssh_config</code> if you want a GUI</p> <p>Tip: Before editing the configuration file, you should make a copy of the original /etc/ssh/sshd_config file and protect it from writing so you will have the original settings as a reference and to reuse as necessary. You can do this with the following commands:</p> <pre><code>    sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.original\n    sudo chmod a-w /etc/ssh/sshd_config.original\n</code></pre>"},{"location":"SSH/#check-the-openssh-server-version","title":"Check the OpenSSH server version","text":"<p>To check the version of the OpenSSH daemon installed:</p> <pre><code>sshd -V\nOpenSSH_9.3, OpenSSL 3.0.10 1 Aug 2023\n</code></pre>"},{"location":"SSH/#open-the-ssh-port-on-the-firewall","title":"Open the SSH port on the Firewall","text":"<p>If you need to have a switch connect to your laptop to copy files over SCP or you want to ssh back into the laptop you will need to allow SSH through the firewall.</p> <p>The following command will allow SSH through the firewall from any IP address. <code>sudo ufw allow 22/tcp comment 'Open port ssh tcp port 22'</code></p> <p>If you want to lock down to a specific IP and subnet, in this example the host 192.168.10.100 and subnet 192.168.20.0/24:</p> <pre><code>sudo ufw allow from 192.168.10.100 to any port 22\nsudo ufw allow from 192.168.20.0/24 to any port 22 proto tcp\n</code></pre>"},{"location":"SSH/#verify-the-ufw-firewall-configuration","title":"Verify the UFW firewall configuration","text":"<pre><code>sudo ufw status numbered\n[sudo] password for mhubbard:\nStatus: active\n\n     To                         Action      From\n     --                         ------      ----\n[ 1] 514/udp                    ALLOW IN    Anywhere\n[ 2] 1716:1764/tcp              ALLOW IN    Anywhere\n[ 3] 1716:1764/udp              ALLOW IN    Anywhere\n[ 4] 514/udp (v6)               ALLOW IN    Anywhere (v6)\n[ 5] 1716:1764/tcp (v6)         ALLOW IN    Anywhere (v6)\n[ 6] 1716:1764/udp (v6)         ALLOW IN    Anywhere (v6)\n</code></pre> <p>You can see that I have an IPv6 stack running. I use IPv6 in my home lab. I also have the syslog daemon installed on port 514 and I use GSConnect to communicate with my iPhone and Android phone on ports 1716-1764. Obviously I don't have a rule for SSH so let's add a UFW rule allowing SSH from any address.</p> <pre><code>sudo ufw allow 22/tcp comment 'Open ssh tcp port 22'\nRule added\nRule added (v6)\n\nsudo ufw status numbered\nStatus: active\n\n     To                         Action      From\n     --                         ------      ----\n[ 1] 514/udp                    ALLOW IN    Anywhere\n[ 2] 1716:1764/tcp              ALLOW IN    Anywhere\n[ 3] 1716:1764/udp              ALLOW IN    Anywhere\n[ 4] 22/tcp                     ALLOW IN    Anywhere                   # Open port ssh tcp port 22\n[ 5] 514/udp (v6)               ALLOW IN    Anywhere (v6)\n[ 6] 1716:1764/tcp (v6)         ALLOW IN    Anywhere (v6)\n[ 7] 1716:1764/udp (v6)         ALLOW IN    Anywhere (v6)\n[ 8] 22/tcp (v6)                ALLOW IN    Anywhere (v6)              # Open port ssh tcp port 22\n</code></pre>"},{"location":"SSH/#when-finished-with-ssh","title":"When finished with SSH","text":"<p>You can either disable SSH and remove the rule or just disable SSH if you use it on a regular basis.</p> <p>From the output above ssh is on lines 4 and 8. Once rule 4 is deleted, rule 8 will become rule 7!</p> <pre><code>sudo ufw delete 4\nDeleting:\n allow 22/tcp comment 'Open port ssh tcp port 22'\nProceed with operation (y|n)? y\nRule deleted\n\nsudo ufw delete 7\nDeleting:\n allow 22/tcp comment 'Open port ssh tcp port 22'\nProceed with operation (y|n)? y\nRule deleted (v6)\n\nsudo ufw status numbered\nStatus: active\n\n     To                         Action      From\n     --                         ------      ----\n[ 1] 514/udp                    ALLOW IN    Anywhere\n[ 2] 1716:1764/tcp              ALLOW IN    Anywhere\n[ 3] 1716:1764/udp              ALLOW IN    Anywhere\n[ 4] 514/udp (v6)               ALLOW IN    Anywhere (v6)\n[ 5] 1716:1764/tcp (v6)         ALLOW IN    Anywhere (v6)\n[ 6] 1716:1764/udp (v6)         ALLOW IN    Anywhere (v6)\n</code></pre>"},{"location":"SSH/#an-alias-to-start-ssh-and-add-the-ufw-rule","title":"An alias to start ssh and add the UFW rule","text":"<pre><code># start the ssh daemon and display the status\nalias mw-ssh='sudo systemctl start ssh &amp;&amp; sudo ufw allow 22/tcp comment \"Open ssh tcp port 22\" &amp;&amp; sudo systemctl status ssh &amp;&amp; sudo ufw status numbered'\n</code></pre> <p>Here is the output of the alias command:</p> <pre><code>mw-ssh\nRule updated\nRule updated (v6)\n\u25cf ssh.service - OpenBSD Secure Shell server\n     Loaded: loaded (/lib/systemd/system/ssh.service; disabled; preset: enabled)\n    Drop-In: /etc/systemd/system/ssh.service.d\n             \u2514\u250000-socket.conf\n     Active: active (running) since Mon 2024-07-15 09:38:12 PDT; 3h 53min ago\nTriggeredBy: \u25cf ssh.socket\n       Docs: man:sshd(8)\n             man:sshd_config(5)\n    Process: 3410496 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)\n   Main PID: 3410497 (sshd)\n      Tasks: 1 (limit: 38055)\n     Memory: 1.4M\n        CPU: 28ms\n     CGroup: /system.slice/ssh.service\n             \u2514\u25003410497 \"sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups\"\n\nJul 15 09:38:12 1S1K-G5-5587 systemd[1]: Starting ssh.service - OpenBSD Secure Shell server...\nJul 15 09:38:12 1S1K-G5-5587 sshd[3410497]: Server listening on :: port 22.\nJul 15 09:38:12 1S1K-G5-5587 systemd[1]: Started ssh.service - OpenBSD Secure Shell server.\nStatus: active\n\n     To                         Action      From\n     --                         ------      ----\n[ 1] 514/udp                    ALLOW IN    Anywhere\n[ 2] 1716:1764/tcp              ALLOW IN    Anywhere\n[ 3] 1716:1764/udp              ALLOW IN    Anywhere\n[ 4] 22/tcp                     ALLOW IN    Anywhere                   # Open port ssh tcp port 22\n[ 5] 514/udp (v6)               ALLOW IN    Anywhere (v6)\n[ 6] 1716:1764/tcp (v6)         ALLOW IN    Anywhere (v6)\n[ 7] 1716:1764/udp (v6)         ALLOW IN    Anywhere (v6)\n[ 8] 22/tcp (v6)                ALLOW IN    Anywhere (v6)              # Open port ssh tcp port 22\n</code></pre>"},{"location":"SSH/#an-alias-to-stop-ssh-and-remove-the-ufw-rule","title":"An alias to stop ssh and remove the ufw rule","text":"<pre><code># stop the ssh daemon and display the status\nalias mw-ssh-stop='sudo systemctl stop ssh &amp;&amp; sudo ufw delete allow 22/tcp &amp;&amp; sudo systemctl status ssh &amp;&amp; sudo ufw status numbered'\n</code></pre> <p>Here is the output of the alias command:</p> <pre><code>mw-ssh-stop\nWarning: Stopping ssh.service, but it can still be activated by:\n  ssh.socket\nRule deleted\nRule deleted (v6)\n\u25cb ssh.service - OpenBSD Secure Shell server\n     Loaded: loaded (/lib/systemd/system/ssh.service; disabled; preset: enabled)\n    Drop-In: /etc/systemd/system/ssh.service.d\n             \u2514\u250000-socket.conf\n     Active: inactive (dead) since Mon 2024-07-15 13:37:02 PDT; 403ms ago\n   Duration: 3h 58min 50.090s\nTriggeredBy: \u25cf ssh.socket\n       Docs: man:sshd(8)\n             man:sshd_config(5)\n    Process: 3410496 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)\n    Process: 3410497 ExecStart=/usr/sbin/sshd -D $SSHD_OPTS (code=exited, status=0/SUCCESS)\n   Main PID: 3410497 (code=exited, status=0/SUCCESS)\n        CPU: 30ms\n\nJul 15 09:38:12 1S1K-G5-5587 systemd[1]: Starting ssh.service - OpenBSD Secure Shell server...\nJul 15 09:38:12 1S1K-G5-5587 sshd[3410497]: Server listening on :: port 22.\nJul 15 09:38:12 1S1K-G5-5587 systemd[1]: Started ssh.service - OpenBSD Secure Shell server.\nJul 15 13:37:02 1S1K-G5-5587 sshd[3410497]: Received signal 15; terminating.\nJul 15 13:37:02 1S1K-G5-5587 systemd[1]: Stopping ssh.service - OpenBSD Secure Shell server...\nJul 15 13:37:02 1S1K-G5-5587 systemd[1]: ssh.service: Deactivated successfully.\nJul 15 13:37:02 1S1K-G5-5587 systemd[1]: Stopped ssh.service - OpenBSD Secure Shell server.\n</code></pre>"},{"location":"SSH/#references-openssh-server","title":"References - OpenSSH Server","text":"<ul> <li>How to Set Up and Use SSH in Linux</li> <li>How to open ssh 22/TCP port using ufw on Ubuntu</li> <li>How to delete a UFW firewall rule on Ubuntu</li> </ul>"},{"location":"SSH/#yubico-authenticator","title":"Yubico Authenticator","text":"<p>Yubico is one of the companies that makes Physical Security keys. These allow you to copy your private key to the Yubico and have access no matter what laptop you are on with just one key. It's beyond the scope of this guide but here are links to Yubico.</p> <ul> <li>Highest assurance authentication that\u2019s fast and easy</li> <li>Securing SSH Authentication with FIDO2</li> </ul>"},{"location":"SSH/#brute-forcing-ssh","title":"Brute Forcing SSH","text":"<p>I mentioned in the creating ssh keys section that usernames and passwords are easier to brute-force than keys are. You can use nmap to brute force ssh. In this example I created a file named users.lst and a file named pass.lst with valid user and passwords for the switch.</p> <p>Obviously an attacker would be using a breach list or a social engineered list of names and passwords. But for demo purposes I didn't want to spend hours running nmap. I have a list of all the passwords that customers have given me over the years that I use in real situations.</p> <p>I have had to use this method more than once at small school districts and other customers that don't have ISE or Clearpass and have used local creds. I also had to use this once at a Community College that had the network team arrested!</p> <p>This should make it clear that you should set a limit on the number of login attempts!</p> <pre><code>nmap -p 22 --script ssh-brute --script-args userdb=./users.lst,passdb=./pass.lst 192.168.10.253\nStarting Nmap 7.95 ( https://nmap.org ) at 2024-07-24 23:36 PDT\nNSE: [ssh-brute] Trying username/password pair: mhubbard:R00tIsTheG0al\nNSE: [ssh-brute] Trying username/password pair: thubbard:Sup3rS3cr3t\nNmap scan report for 3850.pu.pri (192.168.10.253)\nHost is up (0.0046s latency).\n\nPORT   STATE SERVICE\n22/tcp open  ssh\n| ssh-brute:\n|   Accounts:\n|     mhubbard:R00tIsTheG0al - Valid credentials\n|     thubbard:Sup3rS3cr3t - Valid credentials\n|_  Statistics: Performed 4 guesses in 9 seconds, average tps: 0.4\n\nNmap done: 1 IP address (1 host up) scanned in 11.07 seconds\n</code></pre>"},{"location":"SSH/#general-ssh-references","title":"General SSH  References","text":"<ul> <li>Upgrade your SSH keys! - In this post I'll demonstrate how to transition to an Ed25519 type of key smoothly, why you would want this and show some tips and tricks on the way there.</li> <li>Authenticating to Cisco devices using SSH and your RSA Public Key - Here is a blog post I did on setting up the network device to use ssh keys.</li> <li>Why you should be using scrypt for Cisco Router Password Storage</li> <li>SSH Command - Usage, Options, Configuration - SSH Academy tips and tricks</li> <li>sshd_config - How to Configure the OpenSSH Server? SSH Academy Tutorial on SSH server configuration</li> <li>Aruba CX ssh ciphers - The Aruba CX platform supports state of the art crypto!</li> <li>Arch wiki on ssh server Good information on OpenSSH including configuring Google Authenticator</li> <li>Arch wiki on ssh keys - As always, the Arch wiki has a great page on ssh</li> <li>The Ultimate Guide to SSH - Setting Up SSH Keys</li> </ul>"},{"location":"SSH/#apendix-a-ios-xe-ciphers","title":"Apendix A - IOS-XE CIPHERS","text":"<ul> <li>From Cisco IOS XE Release 17.10, the Secure Shell Version 1.99 is not supported.</li> <li>From Cisco IOS XE Release 17.10, the minimum RSA key pair size must be 2048 bits.</li> <li>From Cisco IOS XE Release 17.11, if you want to continue using the weak RSA key, disable CSDL compliance on the device using the <code>crypto engine compliance shield disable</code> command, and reboot.</li> </ul>"},{"location":"SSH/#secure-shell-version-2","title":"Secure Shell Version 2","text":"<p>The configuration for the SSH Version 2 server is similar to the configuration for SSH Version 1. The ip ssh version command defines the SSH version to be configured. If you do not configure this command, SSH by default runs in compatibility mode; that is, both SSH Version 1 and SSH Version 2 connections are honored.</p> <p>The <code>ip ssh rsa keypair-name</code> command enables an SSH connection using the Rivest, Shamir, and Adleman (RSA) keys that you have configured. Previously, SSH was linked to the first RSA keys that were generated (that is, SSH was enabled when the first RSA key pair was generated). This behavior still exists, but by using the <code>ip ssh rsa keypair-name</code> command, you can overcome this behavior.</p> <p>If you configure the <code>ip ssh rsa keypair-name</code> command with a key pair name, SSH is enabled if the key pair exists or SSH will be enabled if the key pair is generated later. If you use this command to enable SSH, you are not forced to configure a hostname and a domain name, which was required in SSH Version 1 of the Cisco software.</p>"},{"location":"SSH/#supported-algorithms","title":"Supported Algorithms","text":"Supported Algorithms Default Non-Default Encryption chacha20-poly1305@openssh.com  aes128-gcm@openssh.com  aes256-gcm@openssh.com  aes128-gcm  aes256-gcm  aes128-ctr  aes192-ctr  aes256-ctr aes128-cbc  aes192-cbc  aes256-cbc  3des-cbc HMAC hmac-sha2-256-etm@openssh.com  hmac-sha2-512-etm@openssh.com hmac-sha1  hmac-sha2-256  hmac-sha2-512 Host Key rsa-sha2-512  rsa-sha2-256 ssh-rsa x509v3-ssh-rsa KEX DH Group curve25519-sha256  curve25519-sha256@libssh.org  ecdh-sha2-nistp256  ecdh-sha2-nistp384  ecdh-sha2-nistp521  diffie-hellman-group14-sha256  diffie-hellman-group16-sha512 diffie-hellman-group14-sha1 Public Key  ssh-rsa  ecdsa-sha2-nistp256  ecdsa-sha2-nistp384  ecdsa-sha2-nistp521  ssh-ed25519  x509v3-ecdsa-sha2-nistp256  x509v3-ecdsa-sha2-nistp384  x509v3-ecdsa-sha2-nistp521  rsa-sha2-256  rsa-sha2-512  x509v3-rsa2048-sha256 x509v3-ssh-rsa"},{"location":"kvm_ubuntu_24_vm_setup/","title":"Setting Up KVM, virt-manager, and Ubuntu 24.04 VM on Ubuntu 25.04","text":"<p>This guide walks through the process of setting up a KVM virtual machine running Ubuntu 24.04 on a host system running Ubuntu 25.04.</p>"},{"location":"kvm_ubuntu_24_vm_setup/#part-1-install-kvm-and-virt-manager","title":"Part 1: Install KVM and virt-manager","text":""},{"location":"kvm_ubuntu_24_vm_setup/#1-check-cpu-virtualization-support","title":"1. Check CPU Virtualization Support","text":"<pre><code>egrep -c '(vmx|svm)' /proc/cpuinfo\n</code></pre> <ul> <li>Output <code>0</code> = virtualization unsupported or disabled.</li> <li>Output <code>1</code> or more = virtualization supported.</li> </ul> <p>Ensure virtualization is enabled in BIOS/UEFI.</p>"},{"location":"kvm_ubuntu_24_vm_setup/#2-install-required-packages","title":"2. Install Required Packages","text":"<pre><code>sudo apt update\nsudo apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager\n</code></pre>"},{"location":"kvm_ubuntu_24_vm_setup/#3-add-user-to-groups","title":"3. Add User to Groups","text":"<pre><code>sudo usermod -aG libvirt $USER\nsudo usermod -aG kvm $USER\n</code></pre> <p>Log out and back in or reboot.</p>"},{"location":"kvm_ubuntu_24_vm_setup/#4-verify-libvirt-is-running","title":"4. Verify libvirt is Running","text":"<pre><code>virsh list --all\n</code></pre> <p>If it fails:</p> <pre><code>sudo systemctl status libvirtd\n</code></pre>"},{"location":"kvm_ubuntu_24_vm_setup/#part-2-download-ubuntu-2404-iso","title":"Part 2: Download Ubuntu 24.04 ISO","text":"<p>Download the ISO:</p> <pre><code>wget https://releases.ubuntu.com/24.04/ubuntu-24.04-desktop-amd64.iso -P ~/Downloads\n</code></pre>"},{"location":"kvm_ubuntu_24_vm_setup/#part-3-create-vm-with-virt-manager","title":"Part 3: Create VM with virt-manager","text":""},{"location":"kvm_ubuntu_24_vm_setup/#1-launch-virt-manager","title":"1. Launch virt-manager","text":"<pre><code>virt-manager\n</code></pre> <p>If it doesn't launch:</p> <pre><code>sudo apt install virt-manager\nvirt-manager\n</code></pre>"},{"location":"kvm_ubuntu_24_vm_setup/#2-create-new-vm","title":"2. Create New VM","text":"<ol> <li>Click \"Create a new virtual machine\"</li> <li>Choose \"Local install media (ISO)\"</li> <li>Browse to <code>~/Downloads/ubuntu-24.04-desktop-amd64.iso</code></li> <li>Choose OS: Ubuntu 24.04</li> <li>Allocate CPUs and RAM (e.g., 2 CPUs, 4\u20138 GB RAM)</li> <li>Create a virtual disk (20 GB or more)</li> <li>Name the VM <code>Ubuntu-24.04-LegacySSH</code></li> <li>Check \"Customize configuration before install\" (optional)</li> <li>Click Finish</li> </ol>"},{"location":"kvm_ubuntu_24_vm_setup/#3-optional-configurations","title":"3. Optional Configurations","text":"<ul> <li>set Network Source to <code>Bridge...</code></li> <li>set name to br0</li> <li>Set NIC to <code>virtio</code></li> <li>Use host-passthrough for CPU</li> <li>Choose UEFI or BIOS boot</li> </ul> <p>The NIC setup will look like this. </p> <p>The network configuration is saved to /etc/netplan/01-netcfg.yaml on the host. Use the following to review it:</p> <p><code>sudo nano /etc/netplan/01-netcfg.yaml</code></p> <p>For the VM I created, this is the contents:</p> <pre><code>network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    enp60s0:\n      dhcp4: no\n  bridges:\n    br0:\n      interfaces: [enp60s0]\n      dhcp4: yes\n      parameters:\n        stp: false\n        forward-delay: 0\n</code></pre> <p>My laptop's Ethernet adapter is enp60s0. I used br0 as the name for the bridge. I added the</p> <ul> <li>stp: false</li> <li>forward-delay: 0</li> </ul> <p>Parameters to the yaml file. I did not want the bridge to send BPDU packets and disable a switch port.</p>"},{"location":"kvm_ubuntu_24_vm_setup/#part-4-inside-ubuntu-2404-vm","title":"Part 4: Inside Ubuntu 24.04 VM","text":""},{"location":"kvm_ubuntu_24_vm_setup/#1-install-openssh-server","title":"1. Install OpenSSH Server","text":"<pre><code>sudo apt update\nsudo apt install openssh-server\n</code></pre>"},{"location":"kvm_ubuntu_24_vm_setup/#2-enable-legacy-ssh-support","title":"2. Enable Legacy SSH Support","text":"<p>Edit <code>/etc/ssh/sshd_config</code> and add:</p> <pre><code>HostKeyAlgorithms +ssh-dss\nKexAlgorithms +diffie-hellman-group14-sha1\nPubkeyAcceptedKeyTypes +ssh-dss\n</code></pre> <p>Then:</p> <pre><code>sudo systemctl restart ssh\n</code></pre> <p>This allows SCP/SFTP from Cisco gear requiring old crypto.</p>"},{"location":"kvm_ubuntu_24_vm_setup/#final-tip-take-a-snapshot","title":"Final Tip: Take a Snapshot","text":"<p>After installing and updating Ubuntu 24.04, shut down the VM and take a snapshot using <code>virt-manager</code>. This gives you a base image you can roll back or clone later.</p>"},{"location":"terminal/","title":"Build a Great Terminal","text":"<p> KEY TAKEAWAYS</p> <ul> <li>We will install z shell (ZSH) and set it as the default shell.</li> <li>Then we will install Oh-My-ZSH and configure it for awsomeness.</li> <li>We will enable syntax highlighting, autosuggestions, History-substring-search, git integration and docker aliases!!</li> <li>We will install <code>Terminator</code> which has tabs, logging, and several available plugins.</li> <li>You will be the envy of your network engineering friends.</li> </ul>"},{"location":"terminal/#change-shells","title":"Change Shells","text":"<p>There are several shells available for Ubuntu. To name a few:</p> <ul> <li>BASH - The default shell Ubuntu. This is the <code>Bourne Again Shell</code> first developed for the GNU Project by Brian Fox in 1989!</li> <li>ZSH - My preferred shell! Zsh was created by Paul Falstad in 1990 while he was a student at Princeton University.</li> <li>FISH - Friendly Interactive Shell is a smart and user-friendly command line shell for Linux, macOS, and the rest of the family.</li> <li>KORN - The KornShell (ksh) is a Unix shell and language based on the Bourne shell (sh) developed in the early 1980s.</li> <li>Warp - This is a new, AI based terminal. I have it installed but haven't used it a much. Warp Website</li> </ul> <p>A google search for <code>Linux shells</code> will return many articles on shells.</p> <p>But I like zsh so that's the one I will cover. It is the standard on recent versions of macOS which is a plus for me since I use Linux and macOS depending on what I am doing.</p> <p>There is a great add-on to zsh called \u201cOh My ZSH\u201d which is an unbelievably active community that creates themes and plugins for zsh. We will install it after we install zsh.</p> <p>Some zsh Features</p> <ul> <li>Command-line completion.</li> <li>History can be shared among all shells.</li> <li>Extended file globbing.</li> <li>Better variable and array handling.</li> <li>Compatibility with shells like bourne shell.</li> <li>Spelling correction and autofill of command names.</li> <li>Named directories.</li> </ul> <p>Installation Instructions</p> <p>We will need <code>curl</code> installed before we start. curl is a tool for communicating with http servers. We will use it a lot in NetDevOps. If you have installed <code>homebrew</code> for Linux, still use the apt method. You can run into ssl issues if you use the <code>homebrew</code> curl and your system ssl is a different version. I spent hours troubleshooting curl and ssl issues before chatGPT explained the root cause to me.</p> <p>We will also install <code>git</code>, a version control system commonly used in Open Source software</p> <p>First we will make sure the system is up to date. Open the terminal using <code>ctrl+alt+t</code>, and enter:</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> <p>Once the update is complete, enter the following to install <code>curl</code> and <code>git</code>:</p> <pre><code>sudo apt install curl git -y\n</code></pre> <p>Now we can install zsh</p> <pre><code>sudo apt install zsh\n</code></pre> <p>Check the version</p> <pre><code>zsh --version`\n</code></pre> <p>zsh 5.9 (x86_64-ubuntu-linux-gnu)</p> <p>This is the current version as of December 2024</p> <p>You can check your current shell using the echo command:</p> <pre><code>echo $SHELL\n/usr/bin/bash\n</code></pre> <p>or</p> <pre><code>echo $0\n/usr/bin/bash\n</code></pre> <p>You can see that the current shell is bash</p> <p>You can display all installed shells using:</p> <pre><code>cat /etc/shells\n</code></pre> <p>Run this to make zsh the default</p> <pre><code>chsh -s $(which zsh)\n</code></pre> <p>Verify that zsh is the new shell</p> <p><pre><code>grep zsh /etc/passwd\n</code></pre> <code>mhubbard:x:1000:1000:Michael Hubbard,,,:/home/mhubbard:/usr/bin/zsh</code></p> <p>The file <code>/etc/passwd</code> contains the individual user settings. You can see that my shell is now <code>/usr/bin/zsh</code>.</p> <p>Note</p> <p>You must log out and back in to make zsh the active shell. I usually reboot at this point instead using <code>sudo reboot now</code></p> <p>Here is a good article on changing shells: How to change your default shell on Linux with chsh</p> <p>On Linux/Mac, hidden files start with a <code>.</code>, zsh uses a hidden file named `~/.zshrc as it's configuration file. BASH uses ~/.bashrc as its configuration file. You can list the files using:</p> <pre><code>ls -l ~/.*rc\n</code></pre>"},{"location":"terminal/#configure-zsh","title":"Configure zsh","text":"<p>Once you log back in, open a terminal with  <code>ctrl+alt+t</code></p> <p>You will get a message saying zsh needs some configuration:</p> <pre><code>This is the Z Shell configuration function for new users,\nzsh-newuser-install.\n\nYou are seeing this message because you have no zsh startup files\n(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory\n~).  This function can help you with a few settings that should\nmake your use of the shell easier.\n\nYou can:\n\n(q)  Quit and do nothing.  The function will be run again next time.\n(0)  Exit, creating the file ~/.zshrc containing just a comment.\n     That will prevent this function being run again.\n(1)  Continue to the main menu.\n(2)  Populate your ~/.zshrc with the configuration recommended\n     by the system administrator and exit (you will need to edit\n     the file by hand, if so desired).\n\n--- Type one of the keys in parentheses ---\n</code></pre> <p>Choose 0 to just create the .zshrc file and exit</p> <p>We are going to install a tool called \u201cOh My ZSH\u201d to customize the shell.</p>"},{"location":"terminal/#install-oh-my-zsh","title":"Install Oh My ZSH","text":"<p>The zsh project uses a <code>shell script</code> to install <code>Oh My ZSH</code> on your system. In general, you should never copy a shell script from Internet and run it wihtout carefully review it. There are a lot of malicious scripts on the Internet! But the zsh project is a FOSS project and you can trust the shell script. Plus, the shell script is not run with <code>root</code> privileges.</p> <p>I have it here for convenience but you are free to go to the zsh project and copy the shell script from the official website.</p> <pre><code>sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>When the install shell script starts you will see:</p> <pre><code>Cloning Oh My Zsh...\nremote: Enumerating objects: 1444, done.\nremote: Counting objects: 100% (1444/1444), done.\nremote: Compressing objects: 100% (1380/1380), done.\nremote: Total 1444 (delta 40), reused 1248 (delta 36), pack-reused 0 (from 0)\nReceiving objects: 100% (1444/1444), 3.29 MiB | 4.52 MiB/s, done.\nResolving deltas: 100% (40/40), done.\nFrom https://github.com/ohmyzsh/ohmyzsh\n * [new branch]      master     -&gt; origin/master\nbranch 'master' set up to track 'origin/master'.\nAlready on 'master'\n/home/mhubbard\n\nLooking for an existing zsh config...\nFound /home/mhubbard/.zshrc.\nThe existing .zshrc will be backed up to .zshrc.pre-oh-my-zsh if overwritten.\nMake sure your .zshrc contains the following minimal configuration if you choose not to overwrite it:\n----------------------------------------\nexport ZSH=\"$HOME/.oh-my-zsh\"\nZSH_THEME=\"robbyrussell\"\nplugins=(git)\n\nsource $ZSH/oh-my-zsh.sh\n----------------------------------------\nDo you want to overwrite it with the Oh My Zsh template? [Y/n] y\n\n         __                                     __\n  ____  / /_     ____ ___  __  __   ____  _____/ /_\n / __ \\/ __ \\   / __ `__ \\/ / / /  /_  / / ___/ __ \\\n/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /\n\\____/_/ /_/  /_/ /_/ /_/\\__, /    /___/____/_/ /_/\n                        /____/                       ....is now installed!\n\nBefore you scream Oh My Zsh! please look over the ~/.zshrc file to select plugins, themes, and options.\n\n\u2022 Follow us on Twitter: https://twitter.com/ohmyzsh\n\u2022 Join our Discord server: https://discord.gg/ohmyzsh\n\u2022 Get stickers, shirts, coffee mugs and other swag: https://shop.planetargon.com/collections/oh-my-zsh\n</code></pre>"},{"location":"terminal/#install-plugins","title":"Install  plugins","text":"<p>Open the .zshrc file using: <code>nano ~/.zshrc</code> or <code>gnome-text-editor ~/.zshrc</code></p> <p>Find the plugin line and change it to</p> <pre><code>plugins=(\n            git\n            zsh-completions\n            zsh-autosuggestions\n            history-substring-search\n            colored-man-pages\n            zsh-docker-aliases\n        )\n</code></pre> <p>Download the plugins</p> <p>Copy each of these lines and paste it into the terminal:</p> <pre><code>git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions\n</code></pre> <pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n</code></pre> <pre><code>git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search\n</code></pre> <pre><code>git clone https://github.com/akarzim/zsh-docker-aliases.git  ~/.oh-my-zsh/custom/plugins/zsh-docker-aliases\n</code></pre> <p>Note</p> <p>If you hover the mouse over the command it will bring up a <code>copy to clipboard</code> icon. Just click it and the command will be copied to the clipboard. This works everywhere in this document.</p>"},{"location":"terminal/#update-zsh","title":"Update zsh","text":"<p>Anytime that you make changes to <code>~/.zshrc</code> you have to reload the configuration. You do this at a terminal using <code>exec zsh</code>. If there are no errors, all that you will see in the terminal is a new line.</p>"},{"location":"terminal/#set-the-default-editor","title":"Set the default editor","text":"<p>Especially in the beginning, you will be making a lot of changes to <code>.zshrc</code> and you won't want to type <code>nano ~/.zshrc</code> or <code>gnome-text-editor ~/.zshrc</code> every time. First we will set the default editor. Open <code>~/.zshrc</code> and search for <code>export EDITOR</code>. Then modify the configuration as follows. Remove the <code>#</code> symbols, they are comments.</p> <pre><code># Preferred editor for local and remote sessions\nif [[ -n $SSH_CONNECTION ]]; then\n   export EDITOR='nano'\n else\n   export EDITOR='subl'\n fi\n</code></pre> <p>This will make <code>nano</code> the default editor when you open a file over ssh and <code>sublime text</code> the default editor locally. If you haven't installed <code>sublime text</code> use the editor of your choice. For example, to use <code>nano</code> the line would be <code>export EDITOR='nano'</code></p> <p>Then add the following to ~/.zshrc:</p> <pre><code># open ~/.zshrc in using the default editor specified in $EDITOR\nalias ec=\"$EDITOR $HOME/.zshrc\"\n# rerun ~/.zshrc after making changes\nalias sc=\"exec zsh\"\n</code></pre> <p>----------------------------------------------- uses: actions/cache@v2 Close and reload the configuration using <code>exec zsh</code></p> <p>The code that we added has two aliases:</p> <ul> <li>ec - Open ~/.zshrc in the default editor</li> <li>sc - reload the zsh configuration using <code>exec zsh</code></li> </ul> <p>Now you can type <code>ec</code> to edit the .zshrc file and <code>sc</code> to reload zsh. These two aliases will save a ton of time when you are making changes to <code>~/.zshrc</code>.</p> <p>Plug-ins References</p> <p>You can read the documentation for the plug-ins on their github repository</p> <ul> <li>git - The git plugin provides many aliases and a few useful functions.</li> <li>zsh completions - Additional completion definitions for Zsh</li> <li>zsh autosuggestions - Fish-like fast/unobtrusive autosuggestions for zsh. It suggests commands as you type based on history and completions.</li> <li>History Substring Search -This is a clean-room implementation of the Fish shell's history search feature, where you can type in any part of any command from history and then press chosen keys, such as the UP and DOWN arrows, to cycle through matches.</li> <li>colored man pages - This plugin adds colors to man pages.</li> <li>zsh docker aliases - Defines Docker aliases and functions.</li> </ul>"},{"location":"terminal/#install-zsh-syntax-highlighting","title":"install zsh-syntax-highlighting","text":"<p>The zsh-syntax-highlighting package ( z-sy-h) is a MUST. It does a lot but the most important to me is that as you start typing a command it will be red, as soon as the shell matches it, zsh-syntax-highlighting turns it green. It is hard to describe how useful this in on the terminal until you use it.</p> <p>Installation Instructions</p> <p>In zsh prior to 5.8 I used the zsh plugin to install zsh-syntax-highlighting. The install page now recommends installing zsh-syntax-highlighting manually instead of using the <code>oh-my-zsh</code> plugin. The zsh-syntax-highlighting installation instructions are here.</p> <p>Luckily, zsh-syntax-highlighting is in the Ubuntu repository so installation of the package is simple. Here is how you would check if you weren\u2019t sure</p> <pre><code>sudo apt search zsh-syntax-highlighting\nzsh-syntax-highlighting/oracular,oracular 0.7.1-2 all\n</code></pre> <p>So now we know the package is named <code>zsh-syntax-highlighting</code>, we can install it using:</p> <pre><code>sudo apt install zsh-syntax-highlighting &amp;&amp; echo \"source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" &gt;&gt; ${ZDOTDIR:-$HOME}/.zshrc\n</code></pre> <p>These commands install the <code>zsh-syntax-highlighting</code> package then echo the source command into the .zshrc file.</p> <p>Now enter <code>sc</code> to reload zsh.</p> <p>For reference, the last part of the echo command is a variable. We can echo it to the terminal using:</p> <pre><code>echo ${ZDOTDIR:-$HOME}/.zshrc\n/home/mhubbard/.zshrc\n</code></pre> <p>Showing that my <code>.zshrc</code> is located at <code>/home/mhubbard/</code> or the root of my home directory.</p> <p>Note</p> <p>In zsh newer than 5.8 (not including 5.8 itself), zsh-syntax-highlighting uses the add-zle-hook-widget facility to install a zle-line-pre-redraw hook. Hooks are run in order of registration, therefore, z-sy-h must be sourced (and register its hook) after anything else that adds hooks that modify the command-line buffer.</p> <p>The line in the .zshrc file they are referring to is <code>source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code> . I make it the last line to the <code>.zshrc</code> file.</p> <p>Example of syntax highlighting</p> <p></p> <p></p>"},{"location":"terminal/#zsh-themes","title":"zsh Themes","text":"<p>Oh My ZSH offers a lot of themes. I found one that I really like called duellj. To install it, Open the .zshrc file using: <code>nano ~/.zshrc</code> or <code>gnome-text-editor ~/.zshrc</code> and change the ZSH-THEME line to: ZSH_THEME=\"duellj\"</p> <p>I also like \u201camuse\u201d. It\u2019s similar to duellj but doesn\u2019t put the username/machine name in the terminal. Since I\u2019m on my personal laptop I don\u2019t need that information. To use \u201camuse\u201d</p> <p>ZSH_THEME=\"amuse\"</p> <p>You can put a <code>#</code> symbol in front of the theme line to comment it out. I leave both themes in my <code>.zshrc</code> file and then switch back and forth as needed.</p> <p>Here is the prompt with <code>amuse</code> as the theme:</p> <pre><code>~/.config/terminator \u231a 22:17:17\n$\n</code></pre> <p>You can find all of the themes here: zsh themes</p> <p>Don't forget to update <code>.zshrc</code> with <code>sc</code> in a terminal.</p>"},{"location":"terminal/#auto-correction","title":"Auto Correction","text":"<p>Open the <code>.zshrc</code> file and search for <code>ENABLE_CORRECTION</code>. Delete the <code>#</code> symbol at the beginning of the line.</p> <pre><code># Uncomment the following line to enable command auto-correction.\nENABLE_CORRECTION=\"true\"\n</code></pre> <p>Save the <code>.zshrc</code> file and run <code>sc</code> in the terminal. Now for common typos you will see this prompt:</p> <pre><code>sl -l\nzsh: correct 'sl' to 'ls' [nyae]? y\ntotal 12K\n-rw-r--r-- 1 mhubbard mhubbard 6.9K 2024-12-24 17:41 config\ndrwxrwxr-x 3 mhubbard mhubbard 4.0K 2024-12-18 15:40 plugins/\n</code></pre> <p>You can press:</p> <ul> <li>y - for yes</li> <li>n - for no</li> <li>a - abort</li> <li>e - edit</li> </ul>"},{"location":"terminal/#aliases","title":"Aliases","text":"<p>zsh includes a lot of aliases and we added more with the <code>git</code> and <code>docker aliases</code> plug-ins. To see what aliases are available, open a terminal, <code>ctrl+alt+t</code> and type:</p> <pre><code>alias\n-='cd -'\n..='cd ..'\n...='cd ../../../'\n....='cd ../../../../'\n.....=../../../..\n......=../../../../..\n1='cd -1'\n2='cd -2'\n3='cd -3'\n4='cd -4'\n5='cd -5'\n6='cd -6'\n7='cd -7'\n8='cd -8'\n9='cd -9'\n_='sudo '\nafind='ack -il'\nback='cd $OLDPWD'\nbd='. bd -si'\ncat=bat\nchmod='chmod -c'\ncp='cp -iv'\ndf='df -h --exclude=squashfs'\ndiff='diff --color'\n</code></pre> <p>This is just a small sample of the available aliases. The ones related to changing directories are super useful. You need to spend some time building the muscle memory to use them.</p> <ul> <li>The <code>_=</code>sudo ` - is another good one since you use sudo anytime that you need elevated privileges.</li> <li>The <code>cp=</code>cp -iv` - adds an interactive prompt if you are copying and the target already exists.</li> <li>The <code>df=</code>df -h --exclude=squashfs' - runs the Disk File usage command, the <code>-h</code> puts the ouput into \"human readable' format and the <code>--exclude=squashfs'</code> hides squash files.</li> </ul> <p>As you can see, you have some homework to do if you want to be outstanding at the terminal.</p>"},{"location":"terminal/#zsh_stats","title":"zsh_stats","text":"<p>zsh has a command that will output a list the top 20 commands you have executed. You can run it periodically and see what commands you are using the most. If possible, you can create an alias and save some typing.</p> <pre><code>zsh_stats\n     1    1026  16.7374%   sudo\n     2    312   5.08972%   cd\n     3    262   4.27406%   nmap\n     4    259   4.22512%   docker\n     5    215   3.50734%   git\n     6    182   2.969%     grep\n     7    176   2.87113%   ping\n     8    156   2.54486%   ssh\n     9    144   2.3491%    ls\n    10    143   2.33279%   mw-manuf\n    11    130   2.12072%   ip\n    12    121   1.9739%    cat\n    13    102   1.66395%   l\n    14    88    1.43556%   history\n    15    87    1.41925%   nmcli\n    16    86    1.40294%   man\n    17    82    1.33768%   python3\n    18    66    1.07667%   python\n    19    60    0.978793%  exa\n    20    59    0.96248%   j\n</code></pre> <p>If you are still using <code>BASH</code> you can use this to generate the list:</p> <p><code>history 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl |  head -n10</code></p>"},{"location":"terminal/#useful-shell-scripts","title":"Useful shell scripts","text":"<p>You can include shell scripts in <code>.zshrc</code>. Here are two that I find very useful.</p>"},{"location":"terminal/#path","title":"Path","text":"<p>This script displays the path with each statement on a separate line. I find it much easier to read the path that way. Open ~/zshrc and paste this script in. Then in the terminal use the <code>sc</code> alias we created to reload zsh.</p> <pre><code># \"path\" shows current path, one element per line.\n# If an argument is supplied, grep for it.\npath() {\n    test -n \"$1\" &amp;&amp; {\n        echo $PATH | perl -p -e \"s/:/\\n/g;\" | grep -i \"$1\"\n    } || {\n        echo $PATH | perl -p -e \"s/:/\\n/g;\"\n    }\n}\n</code></pre> <p>Now when we type <code>path</code> into the terminal we get:</p> <pre><code> path\n/home/linuxbrew/.linuxbrew/bin\n/home/linuxbrew/.linuxbrew/sbin\n/home/mhubbard/.local/bin\n/home/mhubbard/.cargo/bin\n/usr/local/sbin\n/usr/local/bin\n/usr/sbin\n/usr/bin\n/sbin\n/bin\n/snap/bin\n/home/linuxbrew/.linuxbrew/opt/fzf/bin\n</code></pre>"},{"location":"terminal/#make-dir","title":"Make dir","text":"<p>This script uses <code>mkdir -p</code> to create a directory, and if necessary, the parent path, then switches to the directory. Open ~/zshrc and paste this script in. Then in the terminal use the <code>sc</code> alias we created to reload zsh.</p> <pre><code># Create a new directory and enter it\nmkd() {\n    mkdir -p \"$@\"\n    cd \"$@\" || exit\n}\n</code></pre> <p>Now type:</p> <pre><code>pwd\n/home/mhubbard\n\n~ \u231a 20:09:57\n$ mkd 01_test/test\nmkdir: created directory '01_test'\nmkdir: created directory '01_test/test'\n\n~/01_test/test \u231a 20:10:12\n</code></pre> <p>You can see that it created the parent directory, then the <code>01_test</code> directory.</p>"},{"location":"terminal/#zsh-custom-dir","title":"zsh custom dir","text":"<p>The <code>.zshrc</code> file is primary configuration file for zsh. But if you start creating a lot of aliases, shell scripts, etc. it will become too large to easily manage.</p> <p>To solve this problem, oh-my-zsh provides a custom folder, <code>~/.oh-my-zsh/custom</code> where you can create an additional configuration file. The file has to have <code>zsh</code> as the extension. I use <code>my-aliases.zsh</code> for mine. Having your custom aliases and shell scripts in a separate file makes locating your aliases easier.</p> <p>I found this tip in a Linux administration handbook - preface your personal aliases with a couple unique letters and a dash. I use <code>mw-</code> to preface mine. In the terminal I can type <code>mw- tab</code> and get a list of all of my aliases:</p> <pre><code>mw-exa2 -a\nmw-bauh              mw-ipen8             mw-nmshprofiles      mw-ssh-stop\nmw-bright            mw-kbd               mw-nmshrun           mw-start\nmw-chrome            mw-manuf             mw-nmshstate         mw-status\nmw-cpu10             mw-mem10             mw-nmshwifi          mw-stop\nmw-cpu5              mw-mem5              mw-nmshwifi-pw       mw-tftp\nmw-dang              mw-mount             mw-nmwifi            mw-tftp-conf\nmw-exa1              mw-nmcli-examples    mw-ntp               mw-tftp-fw\nmw-exa2              mw-nmcli-vlan-dhcp   mw-ports             mw-tftp-stop\nmw-extip             mw-nmcli-vlan-mac    mw-reload            mw-umount\nmw-interface         mw-nmconnectprof     mw-restart           mw-vmnet\nmw-interface-vlan    mw-nmlldp            mw-running_services  mw-vmnet-all\nmw-ipen0             mw-nmsh-ap           mw-sensors           mw-vmware\nmw-ipen6             mw-nmshipv4          mw-ssh\n</code></pre> <p>Without that trick I would never be able to remember all the aliases that I have created. I will include <code>my-aliases.zsh</code> at the end of this chapter. You can press <code>tab</code> to scroll through the aliases.</p>"},{"location":"terminal/#copy-bash-history","title":"Copy BASH history","text":"<p>If you have been using bash for a while before installing <code>zsh</code> you will want to copy the history over to <code>zsh</code>.</p> <p>I haven't used this script but it has a lot of positive comments in the repo.</p> <p>Create the script</p> <p>Create an empty text file in your text editor and paste the following into it. Save it as <code>bash-to-zsh-hist.py</code>.</p> <pre><code>#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# This is how I used it:\n# $ cat ~/.bash_history | python bash-to-zsh-hist.py &gt;&gt; ~/.zsh_history\n\nimport sys\nimport time\n\n\ndef main():\n    timestamp = None\n    for line in sys.stdin.readlines():\n        line = line.rstrip('\\n')\n        if line.startswith('#') and timestamp is None:\n            t = line[1:]\n            if t.isdigit():\n                timestamp = t\n                continue\n        else:\n            sys.stdout.write(': %s:0;%s\\n' % (timestamp or time.time(), line))\n            timestamp = None\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Run the script</p> <p><code>cd ~/ &amp;&amp; cp .bash_history .bash_history.bak &amp;&amp; cat ~/.bash_history | python3 bash-to-zsh-hist.py &gt;&gt; ~/.zsh_history</code></p> <p>Note</p> <p>if zsh_history format is : 1670471184:0;cat ~/.zsh_history need use int(time.time()) at line 21 of the script</p> <p>Here is the repository:</p> <p>bash-to-zsh-hist.py</p>"},{"location":"terminal/#bat","title":"BAT","text":"<p>This is a great upgrade to the built in cat command. The automatic paging, syntax highlighting, Git integration and the ability to show non-printable characters makes replacing cat with bat a no brainer.</p> <p>There are a lot of other features to bat. You should review the official Git repository at bat</p> <p>Syntax highlighting</p> <p>bat supports syntax highlighting for a large number of programming and markup languages:</p> <p></p> <p>Git integration</p> <p>bat communicates with git to show modifications with respect to the index (see left side bar):</p> <p></p> <p>Show non-printable characters</p> <p>You can use the -A/--show-all option to show and highlight non-printable characters. There are some malicious text files that embed non-printing characters. Use this method so see them.</p> <p></p> <p>Installation Instructions</p> <p>Note</p> <p>I now install <code>bat</code> with homebrew instead of apt using <code>brew install bat</code>. The Homebrew package is coved in another chapter.</p> <p>Download the latest <code>.deb</code>\u00a0package from the release page bat and install it via:</p> <p><code>sudo dpkg -i bat-musl_0.24.0_amd64.deb</code>  # adapt version number and architecture</p> <p>Warning</p> <p>If you install bat this way, please note that the executable may be installed as batcat instead of bat (due to a name clash with another package). Although I have not ever had this happen.</p> <p>If this happens, you can set up a bat -&gt; batcat symlink or alias to prevent any issues that may come up because of this and to be consistent with other distributions:</p> <p>mkdir -p ~/.local/bin ln -s /usr/bin/batcat ~/.local/bin/bat</p> <p>If you want to use an alias instead of a symlink, add</p> <p><code>alias cat='batcat'</code></p> <p>to <code>~/.zshrc</code></p>"},{"location":"terminal/#bat-configuration","title":"BAT configuration","text":"<p>Highlighting theme Use <code>bat --list-themes</code> to get a list of all available themes for syntax highlighting. There are a too many to list, I chose Dracula. You can quickly test a theme you can call <code>bat</code> with the --theme=Dracula option. To permanently use the Dracula theme, set the BAT_THEME environment variable to Dracula. Use export BAT_THEME=\"Dracula\" in your shell's startup file to make the change permanent.</p> <p><code>bat</code> can also be customized with a configuration file. A default configuration file can be created with the --generate-config-file option.</p> <p><code>bat --generate-config-file</code></p> <p>The location of the file is dependent on your operating system. To get the default path for your system, call</p> <pre><code> bat --config-file\n/home/mhubbard/.config/bat/config\n</code></pre> <p>Then open the file:</p> <pre><code>micro /home/mhubbard/.config/bat/config\n</code></pre> <p>The configuration file is a simple list of command line arguments. Use <code>bat --help</code> to see a full list of possible options and values. In addition, you can add comments by prepending a line with the # character.</p> <p>Example configuration file:</p> <pre><code># Set the theme to \"TwoDark\"\n--theme=\"TwoDark\"\n\n# Show line numbers, Git modifications and file header (but no grid)\n--style=\"numbers,changes,header\"\n\n# Use italic text on the terminal (not supported on all terminals)\n--italic-text=always\n\n# Use C++ syntax for Arduino .ino files\n--map-syntax \"*.ino:C++\"\n</code></pre>"},{"location":"terminal/#hubbards-zshrc-file","title":"Hubbard's .zshrc file","text":"Hubbard's .zshrc file<pre><code># If you come from bash you might have to change your $PATH.\nexport PATH=$HOME/.local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"/home/mhubbard/.oh-my-zsh\"\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n# ZSH_THEME=\"duellj\"\nZSH_THEME=\"amuse\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE=\"true\"\n\n# Uncomment the following line to automatically update without prompting.\n# DISABLE_UPDATE_PROMPT=\"true\"\n\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\nENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)\n# See https://github.com/ohmyzsh/ohmyzsh/issues/5765\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\n# HIST_STAMPS=\"mm/dd/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(\n    git\n    zsh-completions\n    zsh-autosuggestions\n    zsh-syntax-highlighting\n    history-substring-search\n    aliases\n    colored-man-pages\n    zsh-docker-aliases\n)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\nif [[ -n $SSH_CONNECTION ]]; then\n   export EDITOR='gedit'\n else\n   export EDITOR='subl'\n fi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig=\"mate ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n# alias python=python3\n# alias pip=pip3\n\n# open ~/.zshrc in using the default editor specified in $EDITOR\nalias ec=\"$EDITOR $HOME/.zshrc\"\n# rerun ~/.zshrc after making changes\nalias sc=\"exec zsh\"\n\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n\n# Zoxide https://github.com/ajeetdsouza/zoxide\neval \"$(zoxide init zsh)\"\n[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zsh\n\n# Configure fzf\neval \"$(fzf --zsh)\"\n</code></pre>"},{"location":"terminal/#zsh-references","title":"zsh References","text":"<p>Install zsh in Ubuntu - The Tecmint site has a tutorial for installing zsh</p>"},{"location":"terminal/#additional-tools","title":"Additional tools","text":"<ul> <li>Optimize your shell experience - Great tips on optimizing your terminal work flow.</li> <li>What's involved in getting a \"modern\" terminal setup?</li> <li>How to See Beautiful Git Project Stats in Your Terminal</li> <li>The Linux .bashrc File: What It Is, Plus 6 Things You Can Do With It</li> <li>Hack The Box themes https://blog.confirm.ch/zsh-tips-auto-completion-correction/</li> <li>git-delta - A syntax highlighting tool for git diffs</li> <li>Modern replacements for Unix tools - a git repo full of modern replacement tools</li> <li>A list of new-ish terminal tools</li> <li>Micro Text Editor - a modern and intuitive terminal-based text editor</li> </ul>"},{"location":"wireless-tools/","title":"Wireless tools","text":"<p>Linux offers a rich set of terminal tools for working with wireless networks. There are also graphical tools available. I'm going to start with my favorite GUI tool <code>Sparrow Wi-Fi</code>, which is a free, open source (FOSS) tool.</p>"},{"location":"wireless-tools/#sparrow-wi-fi","title":"Sparrow Wi-Fi","text":"<p>Overview from the GitHub site</p> <p>Sparrow-wifi has been built from the ground up to be the next generation 2.4 GHz and 5 GHz Wifi spectral awareness tool. At its most basic it provides a more comprehensive GUI-based replacement for tools like inSSIDer and linssid that runs specifically on linux. In its most comprehensive use cases, sparrow-wifi integrates</p> <ul> <li>wifi</li> <li>software-defined radio (hackrf)</li> <li>advanced bluetooth tools (traditional and Ubertooth)</li> <li>traditional GPS (via gpsd)</li> <li>drone/rover GPS via mavlink</li> </ul> <p>all in one solution.</p> <p>Written entirely in Python3, Sparrow-wifi has been designed for the following scenarios:</p> <ul> <li>Basic wifi SSID identification</li> <li>Wifi source hunt - Switch from normal to hunt mode to get multiple samples per second and use the telemetry windows to track a wifi source</li> <li>2.4 GHz and 5 GHz spectrum view - Overlay spectrums from Ubertooth (2.4 GHz) or HackRF (2.4 GHz and 5 GHz) in real time on top of the wifi spectrum (invaluable in poor connectivity troubleshooting when overlapping wifi doesn't seem to be the cause)</li> <li>Bluetooth identification - LE advertisement listening with standard bluetooth, full promiscuous mode in LE and classic bluetooth with Ubertooth</li> <li>Bluetooth source hunt - Track LE advertisement sources or iBeacons with the telemetry window</li> <li>iBeacon advertisement - Advertise your own iBeacons</li> <li>Remote operations - An agent is included that provides all of the GUI functionality via a remote agent the GUI can talk to.</li> <li>Drone/Rover operations - The agent can be run on systems such as a Raspberry Pi and flown on a drone (its made several flights on a Solo 3DR), or attached to a rover in either GUI-controlled or autonomous scan/record modes.</li> <li>The remote agent is JSON-based so it can be integrated with other applications</li> <li>Import/Export - Ability to import and export to/from CSV and JSON for easy integration and revisiualization. You can also just run 'iw dev scan' and save it to a file and import that as well.</li> <li>Produce Google maps when GPS coordinates are available for both discovered SSID's / bluetooth devices or to plot the wifi telemetry over time.</li> <li>Integration with Elasticsearch to feed wireless and optionally bluetooth scan data into Elastic Common Schema compliant indices.</li> </ul>"},{"location":"wireless-tools/#installation-on-ubuntu-2404-and-newer","title":"Installation on Ubuntu 24.04 and newer","text":"<pre><code>    git clone https://github.com/ghostop14/sparrow-wifi\n    cd sparrow-wifi\n    python -m venv venv --upgrade-deps --prompt=\"Sparrow\"\n    source venv/bin/activate\n    which python3\n</code></pre> <p>You may have to use <code>which python3</code> depending on your system. You should see a path similar to this:</p> <p><code>/home/mhubbard/Insync/GD/04_Tools/sparrow-wifi/venv/bin/python3</code></p> <p>The path means that the virtual environment is working. If you see:</p> <p><code>/usr/bin/python3</code></p> <p>Stop! It means the venv didn't start correctly and you are working with your system python.</p>"},{"location":"wireless-tools/#install-the-requirements","title":"Install the requirements","text":"<pre><code>    pip3 install gps3 python-dateutil requests pyqt5 pyqtchart numpy matplotlib\n    python -m pip install QScintilla gps3 dronekit manuf python-dateutil numpy matplotlib\n</code></pre> <p>Verify the reqirements are installed:</p> <pre><code>    pip list\nPackage            Version\n------------------ -----------\ncertifi            2025.7.14\ncharset-normalizer 3.4.2\ncontourpy          1.3.3\ncycler             0.12.1\ndronekit           2.9.2\nfastcrc            0.3.2\nfonttools          4.59.0\ngps3               0.33.3\nidna               3.10\nkiwisolver         1.4.8\nlxml               6.0.0\nmanuf              1.1.5\nmatplotlib         3.10.5\nmonotonic          1.6\nnumpy              2.3.2\npackaging          25.0\npillow             11.3.0\npip                25.2\npymavlink          2.4.48\npyparsing          3.2.3\nPyQt5              5.15.11\nPyQt5-Qt5          5.15.17\nPyQt5_sip          12.17.0\nPyQtChart          5.15.7\nPyQtChart-Qt5      5.15.17\npython-dateutil    2.9.0.post0\nQScintilla         2.14.1\nrequests           2.32.4\nsix                1.17.0\nurllib3            2.5.0\n</code></pre> <p>Ubuntu 25.04 doesn't install the <code>wireless-tools</code> package by default</p> <p>Sparrow-WiFi uses the Linux <code>iwconfig</code> tool from <code>wireless-tools</code>. Install it using:</p> <pre><code>sudo nala install wireless-tools\n</code></pre> <p>Test iwconfig</p> <p>In this example, my wireless interface is wlp61s0</p> <pre><code>    iwconfig wlp61s0\n    wlp61s0   IEEE 802.11  ESSID:\"test\"\n          Mode:Managed  Frequency:5.18 GHz  Access Point: 9C:8C:D8:11:7A:F0\n          Bit Rate=1.1342 Gb/s   Tx-Power=22 dBm\n          Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:on\n          Link Quality=70/70  Signal level=-22 dBm\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:0  Invalid misc:8   Missed beacon:0\n</code></pre> <p>Run sparrow-wifi</p> <p>Warning</p> <p>You have to include the path to the venv python because sparrow needs root access. Is you don't include the path, the <code>sudo</code> command will override the venv and call the system python</p> <pre><code>sudo /home/mhubbard/Insync/GD/04_Tools/sparrow-wifi/venv/bin/python3 sparrow-wifi.py\n</code></pre> <p>When <code>sparrow</code> starts up, click the <code>ip scan</code> button to start a scan.</p> <p></p>"},{"location":"wireless-tools/#create-a-function-to-start-sparrow","title":"Create a function to start sparrow","text":"<p>Below is a simple function that you can add to your <code>.zshrc</code> or custom zsh alias file. I prefer to put my custom functions into the zsh custom aliases file. Mine is at <code>~/.oh-my-zsh/custom/my-aliases.zsh</code> but you can use any name in the custom folder as long as the extension is <code>.zsh</code></p> <p>To add it to <code>.zshrc</code>:</p> <pre><code>nano ~/.zshrc\n</code></pre> <p>To add it to the custom <code>.zsh alias</code> file:</p> <pre><code>nano ~/.oh-my-zsh/custom/my-aliases.zsh\n</code></pre> <p>Then paste this function in:</p> <pre><code>sparrow () {\n    cd ~/Insync/GD/04_Tools/sparrow-wifi\n    source venv/bin/activate\n    sudo /home/mhubbard/Insync/GD/04_Tools/sparrow-wifi/venv/bin/python3    sparrow-wifi.py\n}\n</code></pre> <p>Use <code>ctrl+x</code> to exit <code>nano</code>, press <code>y</code> to save the file.</p> <p>Type <code>exec zsh</code> to reload the shell</p> <p>Now you can enter <code>sparrow</code> to start <code>sparrow-wifi</code> without manually entering all the commands.</p>"},{"location":"wireless-tools/#wireless-terminal-commands","title":"Wireless Terminal commands","text":"<p>Linux has many built-in or freely available terminal based tools for viewing information the wireless Interface.</p>"},{"location":"wireless-tools/#display-ssids","title":"Display SSIDs","text":"<p>To get a quick, static, view of all SSIDs visible to your laptop:</p> <p><code>nmcli device wifi list</code></p> <p></p>"},{"location":"wireless-tools/#list-all-connections","title":"List all connections","text":"<p>This command will list all connections on your laptop. The TYPE column lists the connection type and the DEVICE column lists the interface that is connected. This list will grow long for a network engineer because every SSID is recorded.</p> <pre><code>nmcli connection show\nNAME                UUID                                  TYPE      DEVICE\nWork                4adc6bf7-3a1c-4c0d-af1a-709974497468  ethernet  enx0050b61ca0c0\nLAB                 d135c39f-bcc1-4666-9951-6d5c32c3bf94  wifi      wlp61s0\nlo                  2a4b667f-68db-47bd-bb6c-a396b833b671  loopback  lo\nvirbr0              231172c6-33ab-4176-81aa-950b75b55e27  bridge    virbr0\nvnet0               3d320508-d381-4a78-9ad4-b235b2a28828  tun       vnet0\nHome-Lab            3d160ffd-982d-46d2-8f87-de9cb9a87e13  ethernet  --\nNETGEAR             5a899d4d-5af0-4d6b-b999-a1897709fd0c  wifi      --\nProfile 1           d05e76a7-292b-4841-9933-d78fe78c0494  ethernet  --\ntest                e6e95de6-0825-4c72-8da4-4b0c54f86264  wifi      --\nWired connection 1  c23c0b73-a5f9-3e45-b074-7b03f8d269e2  ethernet  --\n</code></pre>"},{"location":"wireless-tools/#display-the-ssid-and-password","title":"Display the SSID and password","text":"<p>This is useful is you need to share the password of a wireless network. A mobile phone can scan the QR code to connect:</p> <pre><code>sudo nmcli -a -p device wifi show-password ifname wlp61s0\nSSID: LAB\nSecurity: WPA\nPassword: Guest123456\n</code></pre> <p></p>"},{"location":"wireless-tools/#list-wifi-properties","title":"List WiFi properties","text":"<p>Show details for the SSID \"test\" connection with the <code>preshared key password</code> (PSK). Note: without --show-secrets option, secrets would not be displayed.</p> <p><code>nmcli --show-secrets connection show \"test\"</code></p> <p>This returns a lot of information, too much to post here.</p> <p>If you are looking for just the PSK password, you can pipe the output to grep:</p> <pre><code>nmcli --show-secrets connection show test | grep security.psk\n802-11-wireless-security.psk:           SuperSecretPasswd\n</code></pre> <p>The advantage of this over the <code>sudo nmcli -a -p device wifi show-password ifname wlp61s0</code> command is that you don't have to be connected to the SSID to retrieve the password.</p> <p>List connections for the Wi-Fi interface wlp61s0.</p> <pre><code>nmcli -f connections device show wlp61s0\nCONNECTIONS.AVAILABLE-CONNECTION-PATHS: /org/freedesktop/NetworkManager/Settings/8\nCONNECTIONS.AVAILABLE-CONNECTIONS[1]:   d135c39f-bcc1-4666-9951-6d5c32c3bf94 | LAB\n</code></pre> <p>The log UUID is the connection ID for SSID <code>LAB</code>.</p> <p>List only GENERAL and WIFI-PROPERTIES sections for wlp61s0</p> <pre><code>nmcli -f GENERAL,WIFI-PROPERTIES dev show wlp61s0\nGENERAL.DEVICE:                         wlp61s0\nGENERAL.TYPE:                           wifi\nGENERAL.NM-TYPE:                        NMDeviceWifi\nGENERAL.DBUS-PATH:                      /org/freedesktop/NetworkManager/Devices/4\nGENERAL.VENDOR:                         Intel Corporation\nGENERAL.PRODUCT:                        Wi-Fi 6E(802.11ax) AX210/AX1675* 2x2 [Typhoon Peak] (Wi-Fi 6 AX210 160MHz)\nGENERAL.DRIVER:                         iwlwifi\nGENERAL.DRIVER-VERSION:                 6.14.0-24-generic\nGENERAL.FIRMWARE-VERSION:               89.4d42c933.0 ty-a0-gf-a0-89.uc\nGENERAL.HWADDR:                         28:D0:EA:93:2A:42\nGENERAL.MTU:                            1500\nGENERAL.STATE:                          100 (connected)\nGENERAL.REASON:                         0 (No reason given)\nGENERAL.IP4-CONNECTIVITY:               4 (full)\nGENERAL.IP6-CONNECTIVITY:               4 (full)\nGENERAL.UDI:                            /sys/devices/pci0000:00/0000:00:1d.6/0000:3d:00.0/net/wlp61s0\nGENERAL.PATH:                           pci-0000:3d:00.0\nGENERAL.IP-IFACE:                       wlp61s0\nGENERAL.IS-SOFTWARE:                    no\nGENERAL.NM-MANAGED:                     yes\nGENERAL.AUTOCONNECT:                    yes\nGENERAL.FIRMWARE-MISSING:               no\nGENERAL.NM-PLUGIN-MISSING:              no\nGENERAL.PHYS-PORT-ID:                   --\nGENERAL.CONNECTION:                     LAB\nGENERAL.CON-UUID:                       d135c39f-bcc1-4666-9951-6d5c32c3bf94\nGENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/36\nGENERAL.METERED:                        no (guessed)\nWIFI-PROPERTIES.WEP:                    yes\nWIFI-PROPERTIES.WPA:                    yes\nWIFI-PROPERTIES.WPA2:                   yes\nWIFI-PROPERTIES.TKIP:                   yes\nWIFI-PROPERTIES.CCMP:                   yes\nWIFI-PROPERTIES.AP:                     yes\nWIFI-PROPERTIES.ADHOC:                  yes\nWIFI-PROPERTIES.2GHZ:                   yes\nWIFI-PROPERTIES.5GHZ:                   yes\nWIFI-PROPERTIES.6GHZ:                   yes\nWIFI-PROPERTIES.MESH:                   no\nWIFI-PROPERTIES.IBSS-RSN:               yes\n</code></pre> <p>This command is nice because it lists the:</p> <ul> <li>Chip vendor - Intel</li> <li>The chip model, a Wi-Fi 6E, AX210 in this case.</li> <li>The driver the chip is using, iwlwifi</li> <li>The driver version, 6.14.0.24</li> <li>The firmware version, 89.4d42c933.0 ty-a0-gf-a0-89.uc</li> <li>The Hardware address</li> </ul>"},{"location":"wireless-tools/#iwconfig","title":"iwconfig","text":"<p>This is an oldie but goodie in Linux!</p> <p><code>iwconfig</code> is part of the <code>wireless-tools</code> for Linux package maintained by Jean Tourrilhes.</p> <p>Ubuntu 25.04 doesn't install the <code>wireless-tools</code> package by default</p> <p>If you didn't install <code>Sparrow-WiFi</code> above, install <code>wireless-tools</code> using:</p> <pre><code>sudo nala install wireless-tools\n</code></pre> <p>Test iwconfig</p> <p>In this example, my wireless interface is wlp61s0</p> <pre><code>    iwconfig wlp61s0\n    wlp61s0   IEEE 802.11  ESSID:\"test\"\n          Mode:Managed  Frequency:5.18 GHz  Access Point: 9C:8C:D8:11:7A:F0\n          Bit Rate=1.1342 Gb/s   Tx-Power=22 dBm\n          Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:on\n          Link Quality=70/70  Signal level=-22 dBm\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:0  Invalid misc:8   Missed beacon:0\n</code></pre> <p>From the MAN pages:</p> <p>Iwconfig is similar to ifconfig(8), but is dedicated to the wireless interfaces. It is used to set the parameters of the network interface which are specific to the wireless operation (for example: the frequency). Iwconfig may also be used to display those parameters, and the wireless statistics (extracted from /proc/net/wireless).</p> <p>That last line means that we can display wireless interface statistics using the Linux watch command. Watch is a tool that runs a command at a regular interval and displays the output to the screen. The default is 2 seconds, -n1 sets it to 1 second.</p> <p><code>watch -n1 iwconfig</code></p> <pre><code>wlp61s0   IEEE 802.11  ESSID:\"test\"\n          Mode:Managed  Frequency:5.18 GHz  Access Point: 9C:8C:D8:11:7A:F0\n          Bit Rate=1.2009 Gb/s   Tx-Power=22 dBm\n          Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:on\n          Link Quality=70/70  Signal level=-24 dBm\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:0  Invalid misc:8   Missed beacon:0\n</code></pre> <p>This is useful when restarting an AP or troubleshooting wireless. With <code>watch</code> running, you can glance at the screen and see if the interface is connected.</p> <p>You can also use <code>watch</code> with an ethernet interface. In this example I was connected to a switch that I needed to reboot. I wanted to monitor the Ethernet interface and know when it was back up. The default time for watch is 2 seconds but you can override that with the -n (interval) switch. In this case 2 seconds was fine.</p> <p><code>watch ip address show enx0050b61ca0c0</code></p> <pre><code>10: enx0050b61ca0c0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\n    link/ether 00:50:b6:1c:a0:c0 brd ff:ff:ff:ff:ff:ff\n\n10: enx0050b61ca0c0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:50:b6:1c:a0:c0 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.130/24 brd 192.168.10.255 scope global dynamic noprefixroute enx0050b61ca0c0\n       valid_lft 3567sec preferred_lft 3567sec\n    inet6 fd24:42b2:12ce:0:756c:178d:b308:c785/64 scope global temporary dynamic\n       valid_lft 604769sec preferred_lft 86063sec\n    inet6 fd24:42b2:12ce:0:f5af:c424:4a19:d4e6/64 scope global dynamic mngtmpaddr noprefixroute\n       valid_lft 2591982sec preferred_lft 604782sec\n    inet6 fe80::2c7f:3933:39b9:ac0e/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n</code></pre> <p>You can see that initially the interface was down with no IP Address, then <code>watch</code> refreshes and the port has an ip address.</p>"},{"location":"wireless-tools/#iwgetid","title":"iwgetid","text":"<p>The iwgetid command is designed to be used with shell or Perl scripts. You get the same output as iwconfig but in a format that makes it easy to save in a variable. You can tell the command is old because the scheme switch outputs in a format for PCMCIA cards!</p> <pre><code>iwgetid -h\nUsage iwgetid [OPTIONS] [ifname]\n  Options are:\n    -a,--ap       Print the access point address\n    -c,--channel  Print the current channel\n    -f,--freq     Print the current frequency\n    -m,--mode     Print the current mode\n    -p,--protocol Print the protocol name\n    -r,--raw      Format the output as raw value for shell scripts\n    -s,--scheme   Format the output as a PCMCIA scheme identifier\n    -h,--help     Print this message\n</code></pre> <p>Examples</p> <pre><code>iwgetid -a\nwlp61s0   Access Point/Cell: 9C:8C:D8:11:7A:F0\n\niwgetid -a -r\n9C:8C:D8:11:7A:F0\n\niwgetid -f\nwlp61s0   Frequency:5.18 GHz\n\niwgetid -f -r\n5.18e+09\n\niwgetid -m\nwlp61s0   Mode:Managed\n\niwgetid -m -r\n2\n\niwgetid -p\nwlp61s0   Protocol Name:\"IEEE 802.11\"\n\niwgetid -s\ntest\n</code></pre>"},{"location":"wireless-tools/#a-function-for-iwgetid","title":"A function for iwgetid","text":"<p>Below is a simple function that you can add to your <code>.zshrc</code> or or custom zsh alias file. I prefer to put my custom functions into the zsh custom aliases file. Mine is at <code>~/.oh-my-zsh/custom/my-aliases.zsh</code> but you can use any name in the custom folder as long as the extension is <code>.zsh</code></p> <p>To add it to <code>.zshrc</code>:</p> <pre><code>nano ~/.zshrc\n</code></pre> <p>To add it to the custom <code>.zsh alias</code> file:</p> <pre><code>nano ~/.oh-my-zsh/custom/my-aliases.zsh\n</code></pre> <p>Then paste this function in:</p> <pre><code>iwget () {\n    APMac=`iwgetid -ar`\n    IntFace=`iwgetid -f`\n    ID=`iwgetid -s`\n    echo \"AP Mac:\" $APMac &amp;&amp; echo \"Interface:\" $IntFace &amp;&amp; echo \"SSID:\" $ID\n}\n</code></pre> <p>Use <code>ctrl+x</code> to exit <code>nano</code>, press <code>y</code> to save the file.</p> <p>Type <code>exec zsh</code> to reload the shell</p> <p>Now you can enter</p> <pre><code>iwget\nAP Mac: 9C:8C:D8:11:7A:F0\nInterface: wlp61s0   Frequency:5.18 GHz\nSSID: test\n</code></pre>"},{"location":"wireless-tools/#iwlist","title":"iwlist","text":"<p>From the man page:</p> <p>Name \u201ciwlist - Get more detailed wireless information from a wireless interface\u201d.</p>"},{"location":"wireless-tools/#description","title":"Description","text":"<p>Iwlist is used to display some additional information from a wireless\u2010network interface that is not displayed by iwconfig(8). The main argument is used to select a category of information, iwlist displays in detailed form all information related to this category, including information already shown by iwconfig(8).</p> <p>Options</p> <ul> <li>iwlist [interface] scanning</li> <li>iwlist [interface] frequency</li> <li>iwlist [interface] rate</li> <li>iwlist [interface] keys</li> <li>iwlist [interface] power</li> <li>iwlist [interface] txpower</li> <li>iwlist [interface] retry</li> <li>iwlist [interface] event</li> <li>iwlist [interface] auth</li> <li>iwlist [interface] wpakeys</li> <li>iwlist [interface] genie</li> <li>iwlist [interface] modulation</li> <li>iwlist --help</li> <li>iwlist \u2013version</li> </ul> <p>With this one iwlist command you will get detailed information about all the APs your card can see:</p> <pre><code>iwlist wlp61s0 scanning\nwlp61s0   Scan completed :\n          Cell 01 - Address: 9C:8C:D8:11:7A:F0\n                    Channel:36\n                    Frequency:5.18 GHz (Channel 36)\n                    Quality=70/70  Signal level=-23 dBm\n                    Encryption key:on\n                    ESSID:\"test\"\n                    Bit Rates:12 Mb/s; 18 Mb/s; 24 Mb/s; 36 Mb/s; 48 Mb/s\n                              54 Mb/s\n                    Mode:Master\n                    Extra:tsf=000000292b2a65bb\n                    Extra: Last beacon: 3526ms ago\n                    IE: Unknown: 000474657374\n                    IE: Unknown: 01069824B048606C\n                    IE: Unknown: 030124\n                    IE: IEEE 802.11i/WPA2 Version 1\n                        Group Cipher : CCMP\n                        Pairwise Ciphers (1) : CCMP\n                        Authentication Suites (1) : PSK\n</code></pre> <p>In this example:</p> <p>Cell \u2013 Address: 9C:8C:D8:11:7A:F0 is the radio MAC of the AP</p> <p>IE stands for Generic Information Events. I do not know how to decode them!</p> <p>Transmit Power</p> <p>Note that the power switch requires sudo.</p> <p>sudo iwlist wlp61s0 txpower</p> <p>wlp61s0 unknown transmit-power information.</p> <p>Current Tx-Power=22 dBm (158 mW)</p> <p>Bit Rate</p> <p>iwlist wlp61s0 rate</p> <p>wlp61s0 unknown bit-rate information.</p> <p>Current Bit Rate:866.7 Mb/s</p> <p>More Information</p> <p>Get more detailed wireless information from a wireless interface</p>"},{"location":"wireless-tools/#display-saved-networks","title":"Display Saved Networks","text":"<p>When you connect to a network, the settings, including the username/password, are saved. To view them, open a terminal and enter:</p> <pre><code>nm-connection-editor\n</code></pre> <p>A GUI will open and you can select a saved SSID:</p> <p></p>"},{"location":"wireless-tools/#display-the-password","title":"Display the password","text":"<p>If you click on an SSID, then click the <code>gear</code> icon, Wi-Fi Security, it will open a new dialog where you can change the Security type and view/change the password.</p> <p></p>"},{"location":"wireless-tools/#wavemon","title":"Wavemon","text":"<p>Another wireless monitoring tool for Ubuntu.</p>"},{"location":"wireless-tools/#installation","title":"Installation","text":"<p><code>sudo nala install wavemon</code></p> <p>From the MAN pages - Wavemon is an ncurses-based monitoring application for wireless network devices. It plots levels in real-time as well as showing wireless and network related device information.</p> <p>The wavemon interface splits into different \"screens\". Each screen presents information in a specific manner. For example, the \"info\" screen shows current levels as bargraphs, whereas the \"level\" screen represents the same levels as a moving histogram.</p> <p>Run wavemon with sudo to get the most information.</p> <p>sudo wavemon</p> <p>By default, it opens on the information screen.</p> <p>You can press \u201cs\u201d to bring up the scanning screen. This is useful to see all of the SSIDs your laptop can see along with AP MAC, signal quality, power, channel and frequency.</p> <p>Note that you can see \u201chidden\u201d SSIDs also.</p> <p></p>"},{"location":"wireless-tools/#cheat-sheets","title":"Cheat Sheets","text":"<p>Ubuntu server Cheat Sheet Linux Bash Shell Cheat Sheet Linux Commands Cheat Sheet</p>"}]}